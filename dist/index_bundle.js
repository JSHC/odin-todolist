(()=>{var e={110:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;AAChB",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n}"],sourceRoot:""}]);const a=s},953:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const a=s},780:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: min-content;\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #333;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,kCAAkC;AACtC;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: min-content;\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #333;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}"],sourceRoot:""}]);const a=s},846:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border: 1px solid #333;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectList.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sDAAsD;AAC1D;AACA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,sBAAsB;IACtB,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:[".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border: 1px solid #333;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}"],sourceRoot:""}]);const a=s},528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const a=s},563:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;AACxB;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const a=s},426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}"],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(s[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var d=e[a],c=r.base?d[0]+r.base:d[0],l=i[c]||0,p="".concat(c," ").concat(l);i[c]=l+1;var A=n(p),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(m);else{var u=o(m,r);r.byIndex=a,t.splice(a,0,{identifier:p,updater:u,references:1})}s.push(p)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var d=r(e,o),c=0;c<i.length;c++){var l=n(i[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=d}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},586:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";const e=new class{events={};publish(e,t){if(console.log(`publish called for event ${e} with data ${JSON.stringify(t)}`),this.events[e])for(let n of this.events[e])console.log(`calling ${n} for ${e}`),n(t)}subscribe(e,t){console.log(`subscribe: ${e}, ${t}`),this.events[e]||(this.events[e]=[]),this.events[e].push(t),console.log(`${t} subscribed to ${e}`)}unsubscribe(e,t){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===t)))}};class t{constructor(e,t,n,r,o,i){this.id=e,this.title=t,this.priority=n,this.description=r,this.dueDate=o,this.isComplete=!1,this.projectId=i}static priorities={1:"High",2:"Medium",3:"Low"}}function r(e){return 0===e.length?1:e.reduce(((e,t)=>e.id<t.id?t:e)).id+1}function o(t,n){e.publish("changePage",{page:t,data:n})}const i=JSON.parse(localStorage.getItem("todoItems"))||[];function s(n,o,s,a,d){const c=r(i);if(!(n&&o&&s&&a))return null;if(!Number(o))return null;const l=new t(c,n,Number(o),s,a,d||1);return i.push(l),e.publish("TodoItemsChanged"),l}function a(){return i}function d(e){return i.find((t=>t.id===e))}function c(e){return i.findIndex((t=>t.id===e))}e.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(i))}));class l{constructor(e,t){this.id=e,this.name=t}}const p=JSON.parse(localStorage.getItem("projects"))||[];function A(t){const n=r(p),o=new l(n,t);return p.push(o),e.publish("ProjectChanged"),o}function m(){return p}function u(e){return p.find((t=>t.id===e))}0===p.length&&A("Default"),e.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(p))}));var C=n(379),h=n.n(C),g=n(795),f=n.n(g),b=n(569),I=n.n(b),x=n(565),v=n.n(x),B=n(216),y=n.n(B),E=n(589),j=n.n(E),k=n(563),w={};w.styleTagTransform=j(),w.setAttributes=v(),w.insert=I().bind(null,"head"),w.domAPI=f(),w.insertStyleElement=y(),h()(k.Z,w),k.Z&&k.Z.locals&&k.Z.locals;var L=n(586),T=n.n(L),D=n(110),P={};P.styleTagTransform=j(),P.setAttributes=v(),P.insert=I().bind(null,"head"),P.domAPI=f(),P.insertStyleElement=y(),h()(D.Z,P),D.Z&&D.Z.locals&&D.Z.locals;class S{constructor(e,t){return this.checked=e,this.callback=t,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){this.checked?this.checkboxDiv.innerHTML=T():this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}const Z=new class{render(n){if(this.todoItem=d(n),!this.todoItem)return;const r=u(this.todoItem.projectId),s=document.createElement("div"),a=document.createElement("h2");a.textContent=this.todoItem.title;const l=document.createElement("div");l.classList.add("todoItemContent");const p=document.createElement("span");p.textContent="Project: ",l.appendChild(p);const A=document.createElement("a");A.href="#",A.textContent=r.name,A.addEventListener("click",(e=>{e.preventDefault(),o("ProjectDetail",r.id)})),p.appendChild(A);const C=document.createElement("select");C.name="project";for(let e of m()){const t=document.createElement("option");t.name="project",t.value=e.id,t.text=e.name,C.appendChild(t)}C.addEventListener("change",(e=>{this.todoItem.projectId=Number(e.target.value),this.onItemChange()})),l.appendChild(C);const h=document.createElement("label");h.setAttribute("for","priority"),h.textContent="Priority",l.appendChild(h);const g=document.createElement("select");g.required=!0,g.name="priority",g.id="priority";for(const e of Object.keys(t.priorities)){const n=Number(e),r=document.createElement("option");r.name="priority",r.value=n,r.text=t.priorities[n],n===this.todoItem.priority&&(r.selected=!0),g.appendChild(r)}g.addEventListener("change",(e=>{this.todoItem.priority=Number(e.target.value),this.onItemChange()})),l.appendChild(g);const f=document.createElement("label");f.setAttribute("for","description"),f.textContent="Description";const b=document.createElement("input");b.value=this.todoItem.description,b.name="description",b.addEventListener("change",(e=>{this.todoItem.description=e.target.value,this.onItemChange()})),l.appendChild(f),l.appendChild(b);const I=document.createElement("label");I.setAttribute("for","dueDate"),I.textContent="Due Date",l.appendChild(I);const x=document.createElement("input");x.type="date",x.name="dueDate",x.value=this.todoItem.dueDate,x.addEventListener("change",(e=>{this.todoItem.dueDate=e.target.value,this.onItemChange()})),l.appendChild(x);const v=document.createElement("span");v.textContent="Is completed";const B=new S(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));l.appendChild(v),l.appendChild(B);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-button"),y.addEventListener("click",(t=>{!function(t){i.splice(c(t),1),e.publish("TodoItemsChanged")}(this.todoItem.id),e.publish("changePage",{page:"ProjectDetail",data:r.id})})),l.appendChild(y),s.appendChild(a),s.appendChild(l),s}onItemChange(){var t;d((t=this.todoItem).id)&&(i[c(t.id)]=t,e.publish("TodoItemsChanged")),o("TodoItemDetail",this.todoItem.id)}},q=new class{getTodoItemsForProject(e){return a().filter((t=>t.projectId===e))}};var W=n(846),M={};M.styleTagTransform=j(),M.setAttributes=v(),M.insert=I().bind(null,"head"),M.domAPI=f(),M.insertStyleElement=y(),h()(W.Z,M),W.Z&&W.Z.locals&&W.Z.locals;const N=new class{render(){const e=m(),t=document.createElement("div");t.classList.add("project-list-container");const n=document.createElement("h2");n.textContent="Projects",t.appendChild(n);for(let n of e){const e=document.createElement("a");e.href="#",e.addEventListener("click",(e=>this.onProjectLinkClick(e,n)));const r=document.createElement("div");r.classList.add("project-card");const o=document.createElement("h3");o.textContent=n.name;const i=document.createElement("span"),s=q.getTodoItemsForProject(n.id).length;i.textContent=`Todo items: ${s}`,e.appendChild(r),r.appendChild(o),r.appendChild(i),t.appendChild(e)}return t}onProjectLinkClick(e,t){e.preventDefault(),console.log({project:t}),o("ProjectDetail",t.id)}};var F=n(953),O={};O.styleTagTransform=j(),O.setAttributes=v(),O.insert=I().bind(null,"head"),O.domAPI=f(),O.insertStyleElement=y(),h()(F.Z,O),F.Z&&F.Z.locals&&F.Z.locals;const R=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),t=document.createElement("nav"),n=document.createElement("ul");n.classList.add("header-links");for(let e of this.pageLinks){const t=document.createElement("li");t.classList.add("header-link-item");const r=document.createElement("a");r.href="#",r.textContent=e.name,r.addEventListener("click",(t=>this.onHeaderLinkClick(t,e))),t.appendChild(r),n.appendChild(t)}t.appendChild(n);const r=document.createElement("div");r.classList.add("buttons-container");const i=document.createElement("button");i.classList.add("add-project-button"),i.textContent="Add Project",i.addEventListener("click",(e=>{o("AddProject")}));const s=document.createElement("button");return s.classList.add("add-todo-button"),s.textContent="Add Todo Item",s.addEventListener("click",(e=>{o("AddTodoItem")})),r.appendChild(i),r.appendChild(s),e.appendChild(t),e.appendChild(r),e}onHeaderLinkClick(t,n){t.preventDefault(),e.publish("changePage",{page:n.page})}};var $=n(780),H={};H.styleTagTransform=j(),H.setAttributes=v(),H.insert=I().bind(null,"head"),H.domAPI=f(),H.insertStyleElement=y(),h()($.Z,H),$.Z&&$.Z.locals&&$.Z.locals;const U=new class{render(e){const n=u(e),r=q.getTodoItemsForProject(n.id),i=document.createElement("div");i.classList.add("project-detail");const s=document.createElement("h2");s.textContent=n.name||"Project Details",i.appendChild(s);const a=document.createElement("div");a.classList.add("todo-items-container");for(let e of r){const n=document.createElement("div");n.classList.add("todo-item"),n.classList.add(`priority-${t.priorities[e.priority].toLowerCase()}`);const r=document.createElement("a");r.href="#",r.addEventListener("click",(t=>{t.preventDefault(),o("TodoItemDetail",e.id)}));const i=document.createElement("h3");r.textContent=e.title,i.appendChild(r),n.appendChild(i);const s=document.createElement("div");s.textContent=`Due date: ${e.dueDate}`,n.appendChild(s);const d=document.createElement("div");d.classList.add("checkBoxContainer");const c=document.createElement("span");c.textContent="Finished?";const l=new S(e.isComplete,(()=>{e.isComplete=!e.isComplete}));d.appendChild(c),d.appendChild(l),n.appendChild(d),a.appendChild(n)}return i.appendChild(a),i}};var J=n(528),V={};V.styleTagTransform=j(),V.setAttributes=v(),V.insert=I().bind(null,"head"),V.domAPI=f(),V.insertStyleElement=y(),h()(J.Z,V),J.Z&&J.Z.locals&&J.Z.locals;const X=new class{render(){const e=m(),n=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const s=document.createElement("input");s.required=!0,s.name="title",s.type="text",s.id="title",o.appendChild(s);const a=document.createElement("label");a.setAttribute("for","priority"),a.textContent="Priority",o.appendChild(a);const d=document.createElement("select");d.required=!0,d.name="priority",d.id="priority";for(let e of Object.keys(t.priorities)){const n=document.createElement("option");n.name="priority",n.value=e,n.text=t.priorities[e],d.appendChild(n)}o.appendChild(d);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const p=document.createElement("label");p.setAttribute("for","dueDate"),p.textContent="Due Date",o.appendChild(p);const A=document.createElement("input");A.required=!0,A.type="date",A.name="dueDate",A.id="dueDate",o.appendChild(A);const u=document.createElement("label");u.setAttribute("for","project"),u.textContent="Project";const C=document.createElement("select");C.required=!0,C.name="project",C.id="project";for(let t of e){const e=document.createElement("option");e.value=t.id,e.textContent=t.name,C.appendChild(e)}o.appendChild(C);const h=document.createElement("button");return h.type="submit",h.textContent="Add",o.appendChild(h),n.appendChild(r),n.appendChild(o),n}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();let n=new FormData(t);s(n.get("title"),n.get("priority"),n.get("description"),n.get("dueDate"),Number(n.get("project")))?t.reset():console.log("Error when creating new todo item")}},z=new class{render(){const e=document.createElement("div"),t=document.createElement("h2");t.textContent="Add Project";const n=document.createElement("form");n.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",n.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,n.appendChild(o);const i=document.createElement("button");return i.textContent="Add",n.appendChild(i),e.appendChild(t),e.appendChild(n),e}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();const n=new FormData(t);A(n.get("name"))&&o("ProjectList"),console.table(n)}};var Y=n(426),_={};_.styleTagTransform=j(),_.setAttributes=v(),_.insert=I().bind(null,"head"),_.domAPI=f(),_.insertStyleElement=y(),h()(Y.Z,_),Y.Z&&Y.Z.locals&&Y.Z.locals,console.log("TodoList app loaded"),0===a().length&&(s("Test",1,"Test Description","2022-12-29"),s("Test2",1,"Test Description 2","2022-12-30")),console.table(a());const G={TodoItemDetail:Z,ProjectList:N,ProjectDetail:U,AddTodoItem:X,AddProject:z};e.subscribe("changePage",Q),document.body.appendChild(R.render());const K=document.createElement("div");function Q(e){console.log(e),e.page&&G[e.page]&&(K.innerHTML="",K.appendChild(G[e.page].render(e.data)))}K.classList.add("main-content"),document.body.appendChild(K),Q({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,