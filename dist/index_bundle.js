(()=>{"use strict";const e=new class{events={};publish(e,t){if(console.log(`publish called for event ${e} with data ${JSON.stringify(t)}`),this.events[e])for(let n of this.events[e])console.log(`calling ${n} for ${e}`),n(t)}subscribe(e,t){console.log(`subscribe: ${e}, ${t}`),this.events[e]||(this.events[e]=[]),this.events[e].push(t),console.log(`${t} subscribed to ${e}`)}unsubscribe(e,t){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===t)))}};class t{constructor(e,t,n,c,o){this.id=e,this.title=t,this.description=n,this.dueDate=c,this.isComplete=!1,this.projectId=o||1}}function n(t,n){e.publish("changePage",{page:t,data:n})}const c=[];function o(e,n,o){const d=0===(s=c).length?1:s.reduce(((e,t)=>e.id<t.value?t:e)).id+1;var s;const i=new t(d,e,n,o);return c.push(i),i}function d(){return c}const s=[new class{constructor(e,t){this.id=e,this.name=t}}(1,"Default")];function i(){return s}function a(e){return s.find((t=>t.id===e))}const l=new class{getProjectById(e){return a(e)}getTodoItemsForProject(e){return d().filter((t=>t.projectId===e))}},r=new class{render(e){const t=function(e){return c.find((t=>t.id===e))}(e);if(!t)return;const o=l.getProjectById(t.projectId),d=document.createElement("div"),s=document.createElement("h2");s.textContent=t.title;const i=document.createElement("div"),a=document.createElement("div");a.textContent="Project: ";const r=document.createElement("a");r.href="#",r.textContent=o.name,r.addEventListener("click",(e=>{e.preventDefault(),n("ProjectDetail",o.id)})),a.appendChild(r),i.appendChild(a);const p=document.createElement("div");p.textContent=t.description,i.appendChild(p);const u=document.createElement("div");u.textContent=t.dueDate,i.appendChild(u);const m=document.createElement("div");return m.textContent=t.isComplete,i.appendChild(m),d.appendChild(s),d.appendChild(i),d}},p=new class{render(){const e=i(),t=document.createElement("div");t.classList.add("project-list-container");const n=document.createElement("h2");n.textContent="Projects";const c=document.createElement("ul");c.classList.add("project-list");for(let t of e){const e=document.createElement("li");e.classList.add("project-list-item");const n=document.createElement("a");n.href="#",n.textContent=t.name,n.addEventListener("click",(e=>this.onProjectLinkClick(e,t))),e.appendChild(n),c.appendChild(e)}return t.appendChild(n),t.appendChild(c),t}onProjectLinkClick(e,t){e.preventDefault(),console.log({project:t}),n("ProjectDetail",1)}},u=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),t=document.createElement("nav"),n=document.createElement("ul");n.classList.add("header-links");for(let e of this.pageLinks){const t=document.createElement("li");t.classList.add("header-link-item");const c=document.createElement("a");c.href="#",c.textContent=e.name,c.addEventListener("click",(t=>this.onHeaderLinkClick(t,e))),t.appendChild(c),n.appendChild(t)}return t.appendChild(n),e.appendChild(t),e}onHeaderLinkClick(t,n){t.preventDefault(),e.publish("changePage",{page:n.page})}},m=new class{render(e){const t=a(e),c=l.getTodoItemsForProject(e);console.table(c);const o=document.createElement("div");o.classList.add("project-detail");const d=document.createElement("h2");d.textContent=t.name||"Project Details",o.appendChild(d);const s=document.createElement("div");s.classList.add("todo-items-container");for(let e of c){const t=document.createElement("div");t.classList.add("todo-item");const c=document.createElement("a");c.href="#",c.addEventListener("click",(t=>{t.preventDefault(),n("TodoItemDetail",e.id)}));const o=document.createElement("h3");o.textContent=e.title,c.appendChild(o),t.appendChild(c);const d=document.createElement("div");d.textContent=`Due date: ${e.dueDate}`,t.appendChild(d),s.appendChild(t)}return o.appendChild(s),o}};console.log("TodoList app loaded"),o("Test","Test Description","2022-12-29"),o("Test2","Test Description 2","2022-12-30"),console.table(d());const h={TodoItemDetail:r,ProjectList:p,ProjectDetail:m};e.subscribe("changePage",v),document.body.appendChild(u.render());const C=document.createElement("div");function v(e){console.log(e),e.page&&h[e.page]&&(C.innerHTML="",C.appendChild(h[e.page].render(e.data)))}C.classList.add("main-content"),document.body.appendChild(C),v({page:"ProjectList"})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,