(()=>{var e={110:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}"],sourceRoot:""}]);const s=a},411:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/TodoItemsList.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;IACT,6BAA6B;IAC7B,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,2BAA2B;AAC/B",sourcesContent:[".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n"],sourceRoot:""}]);const s=a},9:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    box-shadow: 0 3px 5px #aaa;\r\n\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/header.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,0BAA0B;;IAE1B,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    box-shadow: 0 3px 5px #aaa;\r\n\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const s=a},464:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n.sidebar-link-item > a {\r\n    display: block;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    display: block;\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/sidebar.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,WAAW;;IAEX,yBAAyB;IACzB,4BAA4B;IAC5B,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:[".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n.sidebar-link-item > a {\r\n    display: block;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    display: block;\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}"],sourceRoot:""}]);const s=a},780:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,iDAAiD;AACrD;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}"],sourceRoot:""}]);const s=a},846:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectList.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sDAAsD;IACtD,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:[".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}"],sourceRoot:""}]);const s=a},528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const s=a},563:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,wCAAwC;AAC5C;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}"],sourceRoot:""}]);const s=a},426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;IACV,WAAW;IACX,aAAa;;IAEb,aAAa;IACb,gCAAgC;IAChC,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,cAAc;AAClB",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var d=e[s],c=r.base?d[0]+r.base:d[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=n(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var u=o(m,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:u,references:1})}a.push(A)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var d=r(e,o),c=0;c<i.length;c++){var l=n(i[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=d}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},586:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";const e=new class{events={};publish(e,t){if(console.log(`publish called for event ${e} with data ${JSON.stringify(t)}`),this.events[e])for(let n of this.events[e])console.log(`calling ${n} for ${e}`),n(t)}subscribe(e,t){console.log(`subscribe: ${e}, ${t}`),this.events[e]||(this.events[e]=[]),this.events[e].push(t),console.log(`${t} subscribed to ${e}`)}unsubscribe(e,t){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===t)))}};class t{constructor(e,t,n,r,o,i){this.id=e,this.title=t,this.priority=n,this.description=r,this.dueDate=o,this.isComplete=!1,this.projectId=i}static priorities={1:"Critical",2:"Important",3:"Default"}}function r(e){return 0===e.length?1:e.reduce(((e,t)=>e.id<t.id?t:e)).id+1}function o(t,n){e.publish("changePage",{page:t,data:n})}function i(e,t){return e.findIndex((e=>e.id===t))}const a=function(){const e=JSON.parse(localStorage.getItem("todoItems"));return!!e&&e.map((e=>new t(e.id,e.title,e.priority,e.description,new Date(e.dueDate),e.projectId)))}()||[];function s(n,o,i,s,d){const c=r(a);if(!(n&&o&&i&&s))return null;if(!Number(o))return null;s=new Date(s);const l=new t(c,n,Number(o),i,s,d||1);return a.push(l),e.publish("TodoItemsChanged"),l}function d(){return a}function c(e){return a.find((t=>t.id===e))}function l(t){c(t.id)&&(a[i(a,t.id)]=t,e.publish("TodoItemsChanged"))}e.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(a))}));class A{constructor(e,t){this.id=e,this.name=t}}const p=JSON.parse(localStorage.getItem("projects"))||[];function m(t){const n=r(p),o=new A(n,t);return p.push(o),e.publish("ProjectChanged"),o}function u(){return p}function C(e){return p.find((t=>t.id===e))}0===p.length&&m("Default"),e.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(p))}));var g=n(379),h=n.n(g),b=n(795),f=n.n(b),I=n(569),x=n.n(I),B=n(565),v=n.n(B),y=n(216),E=n.n(y),k=n(589),w=n.n(k),j=n(563),T={};T.styleTagTransform=w(),T.setAttributes=v(),T.insert=x().bind(null,"head"),T.domAPI=f(),T.insertStyleElement=E(),h()(j.Z,T),j.Z&&j.Z.locals&&j.Z.locals;var D=n(586),S=n.n(D),L=n(110),P={};P.styleTagTransform=w(),P.setAttributes=v(),P.insert=x().bind(null,"head"),P.domAPI=f(),P.insertStyleElement=E(),h()(L.Z,P),L.Z&&L.Z.locals&&L.Z.locals;class Z{constructor(e,t){return this.checked=e,this.callback=t,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){if(this.checked){const e=document.createElement("div");e.innerHTML=S(),this.checkboxDiv.appendChild(e.firstChild)}else this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}function F(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function W(e){F(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===N(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function q(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}function M(e,t){var n,r;F(1,arguments);var o=W(e);if(isNaN(o.getTime()))throw new RangeError("Invalid time value");var i=String(null!==(n=null==t?void 0:t.format)&&void 0!==n?n:"extended"),a=String(null!==(r=null==t?void 0:t.representation)&&void 0!==r?r:"complete");if("extended"!==i&&"basic"!==i)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==a&&"time"!==a&&"complete"!==a)throw new RangeError("representation must be 'date', 'time', or 'complete'");var s="",d="",c="extended"===i?"-":"",l="extended"===i?":":"";if("time"!==a){var A=q(o.getDate(),2),p=q(o.getMonth()+1,2),m=q(o.getFullYear(),4);s="".concat(m).concat(c).concat(p).concat(c).concat(A)}if("date"!==a){var u=o.getTimezoneOffset();if(0!==u){var C=Math.abs(u),g=q(Math.floor(C/60),2),h=q(C%60,2),b=u<0?"+":"-";d="".concat(b).concat(g,":").concat(h)}else d="Z";var f=q(o.getHours(),2),I=q(o.getMinutes(),2),x=q(o.getSeconds(),2),B=""===s?"":"T",v=[f,I,x].join(l);s="".concat(s).concat(B).concat(v).concat(d)}return s}const R=new class{render(n){if(this.todoItem=c(n),!this.todoItem)return;const r=C(this.todoItem.projectId),s=document.createElement("div");s.classList.add("todo-item-container");const d=document.createElement("h2");d.textContent=this.todoItem.title;const l=document.createElement("div");l.classList.add("todoItemContent");const A=document.createElement("span");A.textContent="Project: ",l.appendChild(A);const p=document.createElement("a");p.href="#",p.textContent=r.name,p.addEventListener("click",(e=>{e.preventDefault(),o("ProjectDetail",r.id)})),A.appendChild(p);const m=document.createElement("select");m.name="project";for(let e of u()){const t=document.createElement("option");t.name="project",t.value=e.id,t.text=e.name,m.appendChild(t),e.id===this.todoItem.projectId&&(t.selected=!0)}m.addEventListener("change",(e=>{this.todoItem.projectId=Number(e.target.value),this.onItemChange()})),l.appendChild(m);const g=document.createElement("label");g.setAttribute("for","priority"),g.textContent="Priority",l.appendChild(g);const h=document.createElement("select");h.required=!0,h.name="priority",h.id="priority";for(const e of Object.keys(t.priorities)){const n=Number(e),r=document.createElement("option");r.name="priority",r.value=n,r.text=t.priorities[n],n===this.todoItem.priority&&(r.selected=!0),h.appendChild(r)}h.addEventListener("change",(e=>{this.todoItem.priority=Number(e.target.value),this.onItemChange()})),l.appendChild(h);const b=document.createElement("label");b.setAttribute("for","description"),b.textContent="Description";const f=document.createElement("input");f.value=this.todoItem.description,f.name="description",f.addEventListener("change",(e=>{this.todoItem.description=e.target.value,this.onItemChange()})),l.appendChild(b),l.appendChild(f);const I=document.createElement("label");I.setAttribute("for","dueDate"),I.textContent="Due Date",l.appendChild(I);const x=document.createElement("input");x.type="date",x.name="dueDate",x.value=M(this.todoItem.dueDate,{representation:"date"}),x.addEventListener("change",(e=>{this.todoItem.dueDate=new Date(e.target.value),console.log(this.todoItem.dueDate),this.onItemChange()})),l.appendChild(x);const B=document.createElement("span");B.textContent="Is completed";const v=new Z(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));l.appendChild(B),l.appendChild(v);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-todoitem-button"),y.addEventListener("click",(t=>{!function(t){a.splice(i(a,t),1),e.publish("TodoItemsChanged")}(this.todoItem.id),e.publish("changePage",{page:"ProjectDetail",data:r.id})})),l.appendChild(y),s.appendChild(d),s.appendChild(l),s}onItemChange(){l(this.todoItem),o("TodoItemDetail",this.todoItem.id)}},O=new class{getTodoItemsForProject(e){return d().filter((t=>t.projectId===e))}};var U=n(846),z={};z.styleTagTransform=w(),z.setAttributes=v(),z.insert=x().bind(null,"head"),z.domAPI=f(),z.insertStyleElement=E(),h()(U.Z,z),U.Z&&U.Z.locals&&U.Z.locals;const H=new class{render(){const e=u(),t=document.createElement("div");t.classList.add("project-list-container");const n=document.createElement("h2");n.textContent="Projects",t.appendChild(n);for(let n of e){const e=document.createElement("a");e.href="#",e.addEventListener("click",(e=>this.onProjectLinkClick(e,n)));const r=document.createElement("div");r.classList.add("project-card");const o=document.createElement("h3");o.textContent=n.name;const i=document.createElement("span"),a=O.getTodoItemsForProject(n.id).length;i.textContent=`Todo items: ${a}`,e.appendChild(r),r.appendChild(o),r.appendChild(i),t.appendChild(e)}return t}onProjectLinkClick(e,t){e.preventDefault(),console.log({project:t}),o("ProjectDetail",t.id)}};var Y=n(9),X={};X.styleTagTransform=w(),X.setAttributes=v(),X.insert=x().bind(null,"head"),X.domAPI=f(),X.insertStyleElement=E(),h()(Y.Z,X),Y.Z&&Y.Z.locals&&Y.Z.locals;const $=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),t=document.createElement("nav"),n=document.createElement("ul");n.classList.add("header-links");for(let e of this.pageLinks){const t=document.createElement("li");t.classList.add("header-link-item");const r=document.createElement("a");r.href="#",r.textContent=e.name,r.addEventListener("click",(t=>this.onHeaderLinkClick(t,e))),t.appendChild(r),n.appendChild(t)}t.appendChild(n);const r=document.createElement("div");r.classList.add("buttons-container");const i=document.createElement("button");i.classList.add("add-project-button"),i.textContent="Add Project",i.addEventListener("click",(e=>{o("AddProject")}));const a=document.createElement("button");return a.classList.add("add-todo-button"),a.textContent="Add Todo Item",a.addEventListener("click",(e=>{o("AddTodoItem")})),r.appendChild(i),r.appendChild(a),e.appendChild(t),e.appendChild(r),e}onHeaderLinkClick(t,n){t.preventDefault(),e.publish("changePage",{page:n.page})}};var J=n(411),V={};V.styleTagTransform=w(),V.setAttributes=v(),V.insert=x().bind(null,"head"),V.domAPI=f(),V.insertStyleElement=E(),h()(J.Z,V),J.Z&&J.Z.locals&&J.Z.locals;const _=class{constructor(e){this.todoItems=e}render(){if(!this.todoItems)return;const e=document.createElement("ul");e.className="todo-items-list";for(let t of this.todoItems){const n=document.createElement("li"),r=new Z(t.isComplete,(()=>{t.isComplete=!t.isComplete,l(t)}));n.appendChild(r);const i=document.createElement("div");i.className="todo-items-list-item-content";const a=document.createElement("span");a.textContent=t.title,i.appendChild(a);const s=document.createElement("span");s.textContent=M(t.dueDate,{representation:"date"}),i.appendChild(s),n.addEventListener("click",(e=>{console.log(e.target),(e.target===n||i.contains(e.target))&&o("TodoItemDetail",t.id)})),n.appendChild(i),e.appendChild(n)}return e}};function G(e){F(1,arguments);var t=W(e);return t.setHours(0,0,0,0),t}function K(e,t){F(2,arguments);var n=G(e),r=G(t);return n.getTime()===r.getTime()}const Q=new class{filters={all:{callback:this.allTodoItemsFilter,title:"All Todo Items"},today:{callback:this.todayTodoItemsFilter,title:"Today's Todo Items"},upcoming:{callback:this.upcomingTodoItemsFilter,title:"Upcoming Todo Items"}};allTodoItemsFilter(){return d()}todayTodoItemsFilter(){return d().filter((e=>function(e){return F(1,arguments),K(e,Date.now())}(e.dueDate)))}upcomingTodoItemsFilter(){return d().filter((e=>function(e){return F(1,arguments),W(e).getTime()>Date.now()}(e.dueDate)))}render(e){this.filter=e,this.todoItems=this.filter.callback();const t=document.createElement("div"),n=document.createElement("h2");n.textContent=this.filter.title,t.appendChild(n);const r=new _(this.todoItems).render();return t.appendChild(r),t}};var ee=n(464),te={};te.styleTagTransform=w(),te.setAttributes=v(),te.insert=x().bind(null,"head"),te.domAPI=f(),te.insertStyleElement=E(),h()(ee.Z,te),ee.Z&&ee.Z.locals&&ee.Z.locals;const ne=new class{mainLinks=[{title:"All items",filter:Q.filters.all},{title:"Today",filter:Q.filters.today},{title:"Upcoming",filter:Q.filters.upcoming}];render(){const e=document.createElement("div");e.className="sidebar";const t=document.createElement("ul");t.className="sidebar-link-list";for(let e of this.mainLinks){const n=document.createElement("li");n.className="sidebar-link-item";const r=document.createElement("a");r.href="#",r.text=e.title,n.appendChild(r),n.addEventListener("click",(t=>{t.preventDefault(),o("TodoItemList",e.filter)})),t.appendChild(n)}const n=document.createElement("ul");n.className="sidebar-link-list";const r=document.createElement("li");r.classList.add("sidebar-link-list-header","sidebar-link-item");const i=document.createElement("a");i.href="#",i.text="Projects",r.appendChild(i),n.appendChild(r);for(let e of u()){const t=document.createElement("li");t.className="sidebar-link-item";const r=document.createElement("a");r.href="#",r.text=e.name,r.addEventListener("click",(t=>{t.preventDefault(),o("ProjectDetail",e.id)})),t.appendChild(r),n.appendChild(t)}return e.appendChild(t),e.appendChild(n),e}};var re=n(780),oe={};oe.styleTagTransform=w(),oe.setAttributes=v(),oe.insert=x().bind(null,"head"),oe.domAPI=f(),oe.insertStyleElement=E(),h()(re.Z,oe),re.Z&&re.Z.locals&&re.Z.locals;const ie=new class{render(t){const n=C(t),r=O.getTodoItemsForProject(n.id),a=document.createElement("div");a.classList.add("project-detail");const s=document.createElement("h2");s.textContent=n.name||"Project Details",a.appendChild(s);const d=new _(r);a.appendChild(d.render());const c=document.createElement("button");return c.textContent="Delete Project",c.classList.add("delete-project-button"),("Default"===n.name||u().length<=1)&&(c.disabled=!0),c.addEventListener("click",(t=>{!function(t){p.splice(i(p,t),1),e.publish("ProjectChanged")}(n.id),o("ProjectList")})),a.appendChild(c),a}};var ae=n(528),se={};se.styleTagTransform=w(),se.setAttributes=v(),se.insert=x().bind(null,"head"),se.domAPI=f(),se.insertStyleElement=E(),h()(ae.Z,se),ae.Z&&ae.Z.locals&&ae.Z.locals;const de=new class{render(){const e=u(),n=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const a=document.createElement("input");a.required=!0,a.name="title",a.type="text",a.id="title",o.appendChild(a);const s=document.createElement("label");s.setAttribute("for","priority"),s.textContent="Priority",o.appendChild(s);const d=document.createElement("select");d.required=!0,d.name="priority",d.id="priority";for(let e of Object.keys(t.priorities)){const n=document.createElement("option");n.name="priority",n.value=e,n.text=t.priorities[e],d.appendChild(n)}o.appendChild(d);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const A=document.createElement("label");A.setAttribute("for","dueDate"),A.textContent="Due Date",o.appendChild(A);const p=document.createElement("input");p.required=!0,p.type="date",p.name="dueDate",p.id="dueDate",o.appendChild(p);const m=document.createElement("label");m.setAttribute("for","project"),m.textContent="Project";const C=document.createElement("select");C.required=!0,C.name="project",C.id="project";for(let t of e){const e=document.createElement("option");e.value=t.id,e.textContent=t.name,C.appendChild(e)}o.appendChild(C);const g=document.createElement("button");return g.type="submit",g.textContent="Add",o.appendChild(g),n.appendChild(r),n.appendChild(o),n}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();let n=new FormData(t);s(n.get("title"),n.get("priority"),n.get("description"),n.get("dueDate"),Number(n.get("project")))?t.reset():console.log("Error when creating new todo item")}},ce=new class{render(){const e=document.createElement("div"),t=document.createElement("h2");t.textContent="Add Project";const n=document.createElement("form");n.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",n.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,n.appendChild(o);const i=document.createElement("button");return i.textContent="Add",n.appendChild(i),e.appendChild(t),e.appendChild(n),e}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();const n=new FormData(t);m(n.get("name"))&&o("ProjectList"),console.table(n)}};var le=n(426),Ae={};Ae.styleTagTransform=w(),Ae.setAttributes=v(),Ae.insert=x().bind(null,"head"),Ae.domAPI=f(),Ae.insertStyleElement=E(),h()(le.Z,Ae),le.Z&&le.Z.locals&&le.Z.locals,console.log("TodoList app loaded"),0===d().length&&(s("Test",1,"Test Description","2022-12-29"),s("Test2",1,"Test Description 2","2022-12-30")),console.table(d());const pe={TodoItemDetail:R,ProjectList:H,ProjectDetail:ie,AddTodoItem:de,AddProject:ce,TodoItemList:Q};e.subscribe("changePage",ue),document.body.appendChild($.render()),document.body.appendChild(ne.render());const me=document.createElement("div");function ue(e){console.log(e),e.page&&pe[e.page]&&(me.innerHTML="",me.appendChild(pe[e.page].render(e.data)))}me.classList.add("main-content"),document.body.appendChild(me),ue({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,