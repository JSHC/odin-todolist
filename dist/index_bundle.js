(()=>{var e={110:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;AAChB",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n}"],sourceRoot:""}]);const a=s},953:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FAF9F6;\r\n    box-shadow: 0 3px 5px #aaa;\r\n    padding: 10px 0px;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,0BAA0B;IAC1B,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FAF9F6;\r\n    box-shadow: 0 3px 5px #aaa;\r\n    padding: 10px 0px;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const a=s},780:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: min-content;\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,kCAAkC;AACtC;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C;;AAEA;IACI,cAAc;AAClB",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: min-content;\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}"],sourceRoot:""}]);const a=s},846:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectList.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sDAAsD;IACtD,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:[".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}"],sourceRoot:""}]);const a=s},528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const a=s},563:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;AACxB;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const a=s},426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #E8F0F2;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.main-content {\r\n    padding-left: 40px;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD;;AAEA;IACI,yBAAyB;IACzB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,kBAAkB;AACtB",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #E8F0F2;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.main-content {\r\n    padding-left: 40px;\r\n}"],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(s[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var d=e[a],c=r.base?d[0]+r.base:d[0],l=i[c]||0,p="".concat(c," ").concat(l);i[c]=l+1;var A=n(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=o(u,r);r.byIndex=a,t.splice(a,0,{identifier:p,updater:m,references:1})}s.push(p)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var d=r(e,o),c=0;c<i.length;c++){var l=n(i[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=d}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},586:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";const e=new class{events={};publish(e,t){if(console.log(`publish called for event ${e} with data ${JSON.stringify(t)}`),this.events[e])for(let n of this.events[e])console.log(`calling ${n} for ${e}`),n(t)}subscribe(e,t){console.log(`subscribe: ${e}, ${t}`),this.events[e]||(this.events[e]=[]),this.events[e].push(t),console.log(`${t} subscribed to ${e}`)}unsubscribe(e,t){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===t)))}};class t{constructor(e,t,n,r,o,i){this.id=e,this.title=t,this.priority=n,this.description=r,this.dueDate=o,this.isComplete=!1,this.projectId=i}static priorities={1:"High",2:"Medium",3:"Low"}}function r(e){return 0===e.length?1:e.reduce(((e,t)=>e.id<t.id?t:e)).id+1}function o(t,n){e.publish("changePage",{page:t,data:n})}const i=JSON.parse(localStorage.getItem("todoItems"))||[];function s(n,o,s,a,d){const c=r(i);if(!(n&&o&&s&&a))return null;if(!Number(o))return null;const l=new t(c,n,Number(o),s,a,d||1);return i.push(l),e.publish("TodoItemsChanged"),l}function a(){return i}function d(e){return i.find((t=>t.id===e))}function c(e){return i.findIndex((t=>t.id===e))}e.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(i))}));class l{constructor(e,t){this.id=e,this.name=t}}const p=JSON.parse(localStorage.getItem("projects"))||[];function A(t){const n=r(p),o=new l(n,t);return p.push(o),e.publish("ProjectChanged"),o}function u(){return p}function m(e){return p.find((t=>t.id===e))}0===p.length&&A("Default"),e.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(p))}));var C=n(379),h=n.n(C),g=n(795),f=n.n(g),b=n(569),I=n.n(b),x=n(565),v=n.n(x),B=n(216),y=n.n(B),E=n(589),j=n.n(E),k=n(563),w={};w.styleTagTransform=j(),w.setAttributes=v(),w.insert=I().bind(null,"head"),w.domAPI=f(),w.insertStyleElement=y(),h()(k.Z,w),k.Z&&k.Z.locals&&k.Z.locals;var L=n(586),T=n.n(L),D=n(110),P={};P.styleTagTransform=j(),P.setAttributes=v(),P.insert=I().bind(null,"head"),P.domAPI=f(),P.insertStyleElement=y(),h()(D.Z,P),D.Z&&D.Z.locals&&D.Z.locals;class S{constructor(e,t){return this.checked=e,this.callback=t,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){if(this.checked){const e=document.createElement("div");e.innerHTML=T(),this.checkboxDiv.appendChild(e.firstChild)}else this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}const Z=new class{render(n){if(this.todoItem=d(n),!this.todoItem)return;const r=m(this.todoItem.projectId),s=document.createElement("div"),a=document.createElement("h2");a.textContent=this.todoItem.title;const l=document.createElement("div");l.classList.add("todoItemContent");const p=document.createElement("span");p.textContent="Project: ",l.appendChild(p);const A=document.createElement("a");A.href="#",A.textContent=r.name,A.addEventListener("click",(e=>{e.preventDefault(),o("ProjectDetail",r.id)})),p.appendChild(A);const C=document.createElement("select");C.name="project";for(let e of u()){const t=document.createElement("option");t.name="project",t.value=e.id,t.text=e.name,C.appendChild(t),e.id===this.todoItem.projectId&&(t.selected=!0)}C.addEventListener("change",(e=>{this.todoItem.projectId=Number(e.target.value),this.onItemChange()})),l.appendChild(C);const h=document.createElement("label");h.setAttribute("for","priority"),h.textContent="Priority",l.appendChild(h);const g=document.createElement("select");g.required=!0,g.name="priority",g.id="priority";for(const e of Object.keys(t.priorities)){const n=Number(e),r=document.createElement("option");r.name="priority",r.value=n,r.text=t.priorities[n],n===this.todoItem.priority&&(r.selected=!0),g.appendChild(r)}g.addEventListener("change",(e=>{this.todoItem.priority=Number(e.target.value),this.onItemChange()})),l.appendChild(g);const f=document.createElement("label");f.setAttribute("for","description"),f.textContent="Description";const b=document.createElement("input");b.value=this.todoItem.description,b.name="description",b.addEventListener("change",(e=>{this.todoItem.description=e.target.value,this.onItemChange()})),l.appendChild(f),l.appendChild(b);const I=document.createElement("label");I.setAttribute("for","dueDate"),I.textContent="Due Date",l.appendChild(I);const x=document.createElement("input");x.type="date",x.name="dueDate",x.value=this.todoItem.dueDate,x.addEventListener("change",(e=>{this.todoItem.dueDate=e.target.value,this.onItemChange()})),l.appendChild(x);const v=document.createElement("span");v.textContent="Is completed";const B=new S(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));l.appendChild(v),l.appendChild(B);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-button"),y.addEventListener("click",(t=>{!function(t){i.splice(c(t),1),e.publish("TodoItemsChanged")}(this.todoItem.id),e.publish("changePage",{page:"ProjectDetail",data:r.id})})),l.appendChild(y),s.appendChild(a),s.appendChild(l),s}onItemChange(){var t;d((t=this.todoItem).id)&&(i[c(t.id)]=t,e.publish("TodoItemsChanged")),o("TodoItemDetail",this.todoItem.id)}},F=new class{getTodoItemsForProject(e){return a().filter((t=>t.projectId===e))}};var q=n(846),N={};N.styleTagTransform=j(),N.setAttributes=v(),N.insert=I().bind(null,"head"),N.domAPI=f(),N.insertStyleElement=y(),h()(q.Z,N),q.Z&&q.Z.locals&&q.Z.locals;const W=new class{render(){const e=u(),t=document.createElement("div");t.classList.add("project-list-container");const n=document.createElement("h2");n.textContent="Projects",t.appendChild(n);for(let n of e){const e=document.createElement("a");e.href="#",e.addEventListener("click",(e=>this.onProjectLinkClick(e,n)));const r=document.createElement("div");r.classList.add("project-card");const o=document.createElement("h3");o.textContent=n.name;const i=document.createElement("span"),s=F.getTodoItemsForProject(n.id).length;i.textContent=`Todo items: ${s}`,e.appendChild(r),r.appendChild(o),r.appendChild(i),t.appendChild(e)}return t}onProjectLinkClick(e,t){e.preventDefault(),console.log({project:t}),o("ProjectDetail",t.id)}};var M=n(953),O={};O.styleTagTransform=j(),O.setAttributes=v(),O.insert=I().bind(null,"head"),O.domAPI=f(),O.insertStyleElement=y(),h()(M.Z,O),M.Z&&M.Z.locals&&M.Z.locals;const U=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),t=document.createElement("nav"),n=document.createElement("ul");n.classList.add("header-links");for(let e of this.pageLinks){const t=document.createElement("li");t.classList.add("header-link-item");const r=document.createElement("a");r.href="#",r.textContent=e.name,r.addEventListener("click",(t=>this.onHeaderLinkClick(t,e))),t.appendChild(r),n.appendChild(t)}t.appendChild(n);const r=document.createElement("div");r.classList.add("buttons-container");const i=document.createElement("button");i.classList.add("add-project-button"),i.textContent="Add Project",i.addEventListener("click",(e=>{o("AddProject")}));const s=document.createElement("button");return s.classList.add("add-todo-button"),s.textContent="Add Todo Item",s.addEventListener("click",(e=>{o("AddTodoItem")})),r.appendChild(i),r.appendChild(s),e.appendChild(t),e.appendChild(r),e}onHeaderLinkClick(t,n){t.preventDefault(),e.publish("changePage",{page:n.page})}};var R=n(780),$={};$.styleTagTransform=j(),$.setAttributes=v(),$.insert=I().bind(null,"head"),$.domAPI=f(),$.insertStyleElement=y(),h()(R.Z,$),R.Z&&R.Z.locals&&R.Z.locals;const H=new class{render(e){const n=m(e),r=F.getTodoItemsForProject(n.id),i=document.createElement("div");i.classList.add("project-detail");const s=document.createElement("h2");s.textContent=n.name||"Project Details",i.appendChild(s);const a=document.createElement("div");a.classList.add("todo-items-container");for(let e of r){const n=document.createElement("div");n.classList.add("todo-item"),n.classList.add(`priority-${t.priorities[e.priority].toLowerCase()}`);const r=document.createElement("h3");r.textContent=e.title,n.appendChild(r);const i=document.createElement("div");i.textContent=`Due date: ${e.dueDate}`,n.appendChild(i);const s=document.createElement("div");s.classList.add("checkBoxContainer");const d=document.createElement("span");d.textContent="Finished?";const c=new S(e.isComplete,(()=>{e.isComplete=!e.isComplete}));s.appendChild(d),s.appendChild(c),n.appendChild(s),n.addEventListener("click",(t=>{t.preventDefault(),console.log(t.target),console.log(t.currentTarget),console.log(t.target.tagName),t.target!==c&&"svg"!==t.target.tagName&&o("TodoItemDetail",e.id)})),a.appendChild(n)}return i.appendChild(a),i}};var z=n(528),J={};J.styleTagTransform=j(),J.setAttributes=v(),J.insert=I().bind(null,"head"),J.domAPI=f(),J.insertStyleElement=y(),h()(z.Z,J),z.Z&&z.Z.locals&&z.Z.locals;const V=new class{render(){const e=u(),n=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const s=document.createElement("input");s.required=!0,s.name="title",s.type="text",s.id="title",o.appendChild(s);const a=document.createElement("label");a.setAttribute("for","priority"),a.textContent="Priority",o.appendChild(a);const d=document.createElement("select");d.required=!0,d.name="priority",d.id="priority";for(let e of Object.keys(t.priorities)){const n=document.createElement("option");n.name="priority",n.value=e,n.text=t.priorities[e],d.appendChild(n)}o.appendChild(d);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const p=document.createElement("label");p.setAttribute("for","dueDate"),p.textContent="Due Date",o.appendChild(p);const A=document.createElement("input");A.required=!0,A.type="date",A.name="dueDate",A.id="dueDate",o.appendChild(A);const m=document.createElement("label");m.setAttribute("for","project"),m.textContent="Project";const C=document.createElement("select");C.required=!0,C.name="project",C.id="project";for(let t of e){const e=document.createElement("option");e.value=t.id,e.textContent=t.name,C.appendChild(e)}o.appendChild(C);const h=document.createElement("button");return h.type="submit",h.textContent="Add",o.appendChild(h),n.appendChild(r),n.appendChild(o),n}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();let n=new FormData(t);s(n.get("title"),n.get("priority"),n.get("description"),n.get("dueDate"),Number(n.get("project")))?t.reset():console.log("Error when creating new todo item")}},X=new class{render(){const e=document.createElement("div"),t=document.createElement("h2");t.textContent="Add Project";const n=document.createElement("form");n.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",n.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,n.appendChild(o);const i=document.createElement("button");return i.textContent="Add",n.appendChild(i),e.appendChild(t),e.appendChild(n),e}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();const n=new FormData(t);A(n.get("name"))&&o("ProjectList"),console.table(n)}};var Y=n(426),_={};_.styleTagTransform=j(),_.setAttributes=v(),_.insert=I().bind(null,"head"),_.domAPI=f(),_.insertStyleElement=y(),h()(Y.Z,_),Y.Z&&Y.Z.locals&&Y.Z.locals,console.log("TodoList app loaded"),0===a().length&&(s("Test",1,"Test Description","2022-12-29"),s("Test2",1,"Test Description 2","2022-12-30")),console.table(a());const G={TodoItemDetail:Z,ProjectList:W,ProjectDetail:H,AddTodoItem:V,AddProject:X};e.subscribe("changePage",Q),document.body.appendChild(U.render());const K=document.createElement("div");function Q(e){console.log(e),e.page&&G[e.page]&&(K.innerHTML="",K.appendChild(G[e.page].render(e.data)))}K.classList.add("main-content"),document.body.appendChild(K),Q({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNGLE1BQU0rRCxFQUFPNUssRUFBRVIsT0FDZixJQUFLb0wsRUFBS0MsZ0JBRU4sWUFEQUQsRUFBS0UsaUJBSVQsTUFBTUMsRUFBVyxJQUFJQyxTQUFTSixHQUVYeEYsRUFDZjJGLEVBQVMxSSxJQUFJLFVBR2I2QixFQUFZLGVBRWhCcEIsUUFBUXFJLE1BQU1KLEVBQ2xCLEcsYUN6Q0EsRUFBVSxDQUFDLEVBRWYsRUFBUW5LLGtCQUFvQixJQUM1QixFQUFRTixjQUFnQixJQUVsQixFQUFRaEIsT0FBUyxTQUFjLEtBQU0sUUFFM0MsRUFBUVgsT0FBUyxJQUNqQixFQUFRZ0MsbUJBQXFCLElBRWhCLElBQUksSUFBUyxHQUtKLEtBQVcsWUFBaUIsV0NqQmxEbUMsUUFBUUMsSUFBSSx1QkFDa0IsSUFBMUI2QixJQUFlMUksU0FDZnNJLEVBQVksT0FBUSxFQUFHLG1CQUFvQixjQUMzQ0EsRUFBWSxRQUFTLEVBQUcscUJBQXNCLGVBR2xEMUIsUUFBUXFJLE1BQU12RyxLQUVkLE1BQU13RyxFQUFRLENBQ1YsZUFBa0IsRUFDbEIsWUFBZSxFQUNmLGNBQWdCLEVBQ2hCLFlBQWMsRUFDZCxXQUFhLEdBR2pCLFlBQWlCLGFBQWNDLEdBRS9CM0wsU0FBUzRMLEtBQUtuTCxZQUFZLFlBQzFCLE1BQU1vTCxFQUFjN0wsU0FBU1csY0FBYyxPQUkzQyxTQUFTZ0wsRUFBV2hPLEdBQ2hCeUYsUUFBUUMsSUFBSTFGLEdBQ1BBLEVBQUs4RyxNQUFTaUgsRUFBTS9OLEVBQUs4RyxRQUk5Qm9ILEVBQVlwRixVQUFZLEdBQ3hCb0YsRUFBWXBMLFlBQVlpTCxFQUFNL04sRUFBSzhHLE1BQU1pQyxPQUFPL0ksRUFBS0EsT0FDekQsQ0FYQWtPLEVBQVl6RixVQUFVQyxJQUFJLGdCQUMxQnJHLFNBQVM0TCxLQUFLbkwsWUFBWW9MLEdBWTFCRixFQUFXLENBQ1BsSCxLQUFNLGUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL2NvbXBvbmVudHMvQ2hlY2tib3guY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9MYXlvdXQvc3R5bGUuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3REZXRhaWwuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3RMaXN0LmNzcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vQWRkVG9kb0l0ZW0uY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbURldGFpbC5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9jaGVjay5zdmciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29kaW4tdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHViU3ViLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvdXRpbC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1Db250cm9sbGVyLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3QvUHJvamVjdENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL1RvZG9JdGVtRGV0YWlsLmNzcz8zNzFkIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY29tcG9uZW50cy9DaGVja2JveC5jc3M/YzkyOCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL2NvbXBvbmVudHMvQ2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL1RvZG9JdGVtRGV0YWlsLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0VG9kb0l0ZW1NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdC5jc3M/YjdiNCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvTGF5b3V0L3N0eWxlLmNzcz9mYTg5Iiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9MYXlvdXQvaGVhZGVyLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3REZXRhaWwuY3NzP2E3MWQiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3QvUHJvamVjdERldGFpbC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vQWRkVG9kb0l0ZW0uY3NzP2U4YjciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL0FkZFRvZG9JdGVtLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L0FkZFByb2plY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNoZWNrYm94IHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcXHJcXG4gICAgd2lkdGg6IDI1cHg7XFxyXFxuICAgIGhlaWdodDogMjVweDtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQ2hlY2tib3guY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksc0JBQXNCO0lBQ3RCLFdBQVc7SUFDWCxZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jaGVja2JveCB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxyXFxuICAgIHdpZHRoOiAyNXB4O1xcclxcbiAgICBoZWlnaHQ6IDI1cHg7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImhlYWRlciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRjlGNjtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAzcHggNXB4ICNhYWE7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9ucy1jb250YWluZXIge1xcclxcbiAgICBncmlkLWNvbHVtbjogMjtcXHJcXG4gICAgZ3JpZC1yb3c6IDE7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogNHJlbTtcXHJcXG4gICAgZ2FwOiAyNXB4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbnMtY29udGFpbmVyIGJ1dHRvbiB7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMzBweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxufVxcclxcblxcclxcbi5hZGQtdG9kby1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDA5OWZmO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9ucy1jb250YWluZXIgYnV0dG9uOmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkLXByb2plY3QtYnV0dG9uIHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzJlZWM1NztcXHJcXG59XFxyXFxuXFxyXFxubmF2IHtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBzdGFydDtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDE7XFxyXFxuICAgIGdyaWQtcm93OiAxO1xcclxcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxubmF2IHVsIHtcXHJcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxubmF2IHVsIGxpIGEge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiAjMzMzO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbW9kdWxlcy9MYXlvdXQvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtJQUM5QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLDBCQUEwQjtJQUMxQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztJQUNYLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsU0FBUztJQUNULG1CQUFtQjtJQUNuQixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0kseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixjQUFjO0lBQ2QsV0FBVztJQUNYLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixXQUFXO0FBQ2ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaGVhZGVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGOUY2O1xcclxcbiAgICBib3gtc2hhZG93OiAwIDNweCA1cHggI2FhYTtcXHJcXG4gICAgcGFkZGluZzogMTBweCAwcHg7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiA0cmVtO1xcclxcbiAgICBnYXA6IDI1cHg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9ucy1jb250YWluZXIgYnV0dG9uIHtcXHJcXG4gICAgcGFkZGluZzogMTBweCAzMHB4O1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBjb2xvcjogIzMzMztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG59XFxyXFxuXFxyXFxuLmFkZC10b2RvLWJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDk5ZmY7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciBidXR0b246aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxyXFxufVxcclxcblxcclxcbi5hZGQtcHJvamVjdC1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMmVlYzU3O1xcclxcbn1cXHJcXG5cXHJcXG5uYXYge1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IHN0YXJ0O1xcclxcbiAgICBncmlkLWNvbHVtbjogMTtcXHJcXG4gICAgZ3JpZC1yb3c6IDE7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwgbGkgYSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcclxcbi50b2RvLWl0ZW1zLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdhcDogMjVweDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW4tY29udGVudDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLnRvZG8taXRlbSB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMjAwcHgsIDMwMHB4KSBtaW5tYXgoMjAwcHgsIDMwMHB4KTtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoNjgsIDEyNywgMjU1KTtcXHJcXG5cXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRjlGNjtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbTpob3ZlciB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNik7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbSBoMyB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgYWxpZ24tc2VsZjogZW5kO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtIGgzIGEge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4uY2hlY2tCb3hDb250YWluZXIge1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IGVuZDtcXHJcXG4gICAgZ3JpZC1yb3c6IDEgLyBzcGFuIDI7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzogMHB4IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5jaGVja0JveENvbnRhaW5lciBzcGFuIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucHJpb3JpdHktaGlnaCB7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgcmdiKDI1NSwgODcsIDU4KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByaW9yaXR5LW1lZGl1bSB7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgcmdiKDI1NSwgMjAyLCA1OCk7XFxyXFxufVxcclxcblxcclxcbi5wcmlvcml0eS1sb3cge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMTQwLCAyNTMsIDg4KTtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoMTQwLCAyNTMsIDg4KTtcXHJcXG59XFxyXFxuXFxyXFxuLmNoZWNrYm94OmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOmRlZmF1bHQ7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9tb2R1bGVzL1Byb2plY3QvUHJvamVjdERldGFpbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQUNBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7SUFDVCxrQ0FBa0M7QUFDdEM7Ozs7QUFJQTtJQUNJLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IsZ0VBQWdFO0lBQ2hFLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsd0NBQXdDOztJQUV4QyxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLDJDQUEyQztJQUMzQyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksU0FBUztJQUNULFVBQVU7SUFDVixlQUFlO0FBQ25COztBQUVBO0lBQ0kscUJBQXFCO0lBQ3JCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsY0FBYztJQUNkLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IscUJBQXFCO0lBQ3JCLG1CQUFtQjtJQUNuQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUNBQXVDO0FBQzNDOztBQUVBO0lBQ0ksd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLHdDQUF3QztBQUM1Qzs7QUFFQTtJQUNJLGNBQWM7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxyXFxuLnRvZG8taXRlbXMtY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ2FwOiAyNXB4O1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbi1jb250ZW50O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4udG9kby1pdGVtIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgyMDBweCwgMzAwcHgpIG1pbm1heCgyMDBweCwgMzAwcHgpO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcclxcbiAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHJnYig2OCwgMTI3LCAyNTUpO1xcclxcblxcclxcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGOUY2O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtOmhvdmVyIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAycHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE2KTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtIGgzIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBhbGlnbi1zZWxmOiBlbmQ7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW0gaDMgYSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxufVxcclxcblxcclxcbi5jaGVja0JveENvbnRhaW5lciB7XFxyXFxuICAgIGp1c3RpZnktc2VsZjogZW5kO1xcclxcbiAgICBncmlkLXJvdzogMSAvIHNwYW4gMjtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXHJcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAwcHggMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmNoZWNrQm94Q29udGFpbmVyIHNwYW4ge1xcclxcbiAgICBmb250LXNpemU6IDEycHg7XFxyXFxufVxcclxcblxcclxcbi5wcmlvcml0eS1oaWdoIHtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoMjU1LCA4NywgNTgpO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJpb3JpdHktbWVkaXVtIHtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoMjU1LCAyMDIsIDU4KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByaW9yaXR5LWxvdyB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxNDAsIDI1MywgODgpO1xcclxcbiAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHJnYigxNDAsIDI1MywgODgpO1xcclxcbn1cXHJcXG5cXHJcXG4uY2hlY2tib3g6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6ZGVmYXVsdDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnByb2plY3QtbGlzdC1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCBtaW5tYXgoMjAwcHgsIDMwMHB4KSk7XFxyXFxuICAgIGdhcDogMjVweDtcXHJcXG59XFxyXFxuLnByb2plY3QtbGlzdC1jb250YWluZXIgaDIge1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtbGlzdC1jb250YWluZXIgYSB7XFxyXFxuICAgIGdyaWQtcm93OiAyO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LWNhcmQge1xcclxcbiAgICBjb2xvcjogIzAwMDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGOUY2O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1jYXJkOmhvdmVyIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAycHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE2KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtY2FyZCBoMyB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxhQUFhO0lBQ2Isc0RBQXNEO0lBQ3RELFNBQVM7QUFDYjtBQUNBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztJQUNYLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHlCQUF5QjtJQUN6QixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSwyQ0FBMkM7QUFDL0M7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsVUFBVTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5wcm9qZWN0LWxpc3QtY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgbWlubWF4KDIwMHB4LCAzMDBweCkpO1xcclxcbiAgICBnYXA6IDI1cHg7XFxyXFxufVxcclxcbi5wcm9qZWN0LWxpc3QtY29udGFpbmVyIGgyIHtcXHJcXG4gICAgZ3JpZC1yb3c6IDE7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LWxpc3QtY29udGFpbmVyIGEge1xcclxcbiAgICBncmlkLXJvdzogMjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1jYXJkIHtcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRjlGNjtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtY2FyZDpob3ZlciB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNik7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LWNhcmQgaDMge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImZvcm0ge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgzMCUsIDQwMHB4KTtcXHJcXG4gICAganVzdGlmeS1pdGVtczogc3RhcnQ7XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuZm9ybSBpbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0sIHRleHRhcmVhIHtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBzdHJldGNoO1xcclxcbn1cXHJcXG5cXHJcXG5mb3JtIGJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG4gICAgcGFkZGluZzogOHB4IDMwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAxNDAsIDI1NSk7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL0FkZFRvZG9JdGVtLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYix5Q0FBeUM7SUFDekMsb0JBQW9CO0lBQ3BCLFNBQVM7SUFDVCxhQUFhO0FBQ2pCOztBQUVBO0lBQ0kscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksU0FBUztJQUNULGlCQUFpQjtJQUNqQixrQ0FBa0M7SUFDbEMsWUFBWTtJQUNaLGlCQUFpQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJmb3JtIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMzAlLCA0MDBweCk7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcclxcbiAgICBnYXA6IDEwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxufVxcclxcblxcclxcbmZvcm0gaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdLCB0ZXh0YXJlYSB7XFxyXFxuICAgIGp1c3RpZnktc2VsZjogc3RyZXRjaDtcXHJcXG59XFxyXFxuXFxyXFxuZm9ybSBidXR0b24ge1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIHBhZGRpbmc6IDhweCAzMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMTQwLCAyNTUpO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudG9kb0l0ZW1Db250ZW50IHtcXHJcXG4gICAgd2lkdGg6IDMwJTtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyZnIgM2ZyO1xcclxcbiAgICBqdXN0aWZ5LWl0ZW1zOiBzdGFydDtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3Qgc3BhbiB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAxO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdCBzZWxlY3Qge1xcclxcbiAgICBncmlkLWNvbHVtbjogMjtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1EZXRhaWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksVUFBVTtJQUNWLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksY0FBYzs7QUFFbEI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50b2RvSXRlbUNvbnRlbnQge1xcclxcbiAgICB3aWR0aDogMzAlO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAzZnI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdCBzcGFuIHtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDE7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0IHNlbGVjdCB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0U4RjBGMjtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4ubWFpbi1jb250ZW50IHtcXHJcXG4gICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksNkNBQTZDO0FBQ2pEOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLFNBQVM7SUFDVCxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZjtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNFOEYwRjI7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4tY29udGVudCB7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogNDBweDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0yMSw3TDksMTlMMy41LDEzLjVMNC45MSwxMi4wOUw5LDE2LjE3TDE5LjU5LDUuNTlMMjEsN1pcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImNsYXNzIFB1YlN1YiB7XHJcbiAgICBldmVudHMgPSB7fTtcclxuXHJcbiAgICBwdWJsaXNoKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYHB1Ymxpc2ggY2FsbGVkIGZvciBldmVudCAke2V2ZW50fSB3aXRoIGRhdGEgJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKVxyXG4gICAgICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGxpc3RlbmVyIG9mIHRoaXMuZXZlbnRzW2V2ZW50XSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgY2FsbGluZyAke2xpc3RlbmVyfSBmb3IgJHtldmVudH1gKVxyXG4gICAgICAgICAgICBsaXN0ZW5lcihkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBzdWJzY3JpYmU6ICR7ZXZlbnR9LCAke2NhbGxiYWNrfWApXHJcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7Y2FsbGJhY2t9IHN1YnNjcmliZWQgdG8gJHtldmVudH1gKVxyXG4gICAgfVxyXG5cclxuICAgIHVuc3Vic2NyaWJlKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5yZW1vdmUoXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5maW5kKGxpc3RlbmVyID0+IGxpc3RlbmVyID09PSBjYWxsYmFjaylcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgUHViU3ViKCk7IiwiZXhwb3J0IGNsYXNzIFRvZG9JdGVtIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCB0aXRsZSwgcHJpb3JpdHksIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcm9qZWN0SWQpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eSxcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcclxuICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByb2plY3RJZCA9IHByb2plY3RJZDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcHJpb3JpdGllcyA9IHtcclxuICAgICAgICAxOiBcIkhpZ2hcIixcclxuICAgICAgICAyOiBcIk1lZGl1bVwiLFxyXG4gICAgICAgIDM6IFwiTG93XCJcclxuICAgIH1cclxufSIsImltcG9ydCBQdWJTdWIgZnJvbSBcIi4vUHViU3ViXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dElkKGFycikge1xyXG4gICAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnIucmVkdWNlKChwcmV2aW91cywgaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5pZCA8IGl0ZW0uaWQgPyBpdGVtIDogcHJldmlvdXNcclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgIH0pLmlkICsgMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hMaW5rKHBhZ2UsIGRhdGEpIHtcclxuICAgIFB1YlN1Yi5wdWJsaXNoKCdjaGFuZ2VQYWdlJywge1xyXG4gICAgICAgIHBhZ2UsXHJcbiAgICAgICAgZGF0YVxyXG4gICAgfSk7XHJcbn0iLCJpbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9JdGVtXCI7XHJcbmltcG9ydCB7IGdldE5leHRJZCB9IGZyb20gXCIuLi91dGlsXCI7XHJcbmltcG9ydCBQdWJTdWIgZnJvbSBcIi4uL1B1YlN1YlwiO1xyXG5cclxuY29uc3QgdG9kb0l0ZW1zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0l0ZW1zJykpIHx8IFtdO1xyXG5cclxuZnVuY3Rpb24gYWRkVG9kb0l0ZW0odGl0bGUsIHByaW9yaXR5LCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJvamVjdElkKSB7XHJcbiAgICBjb25zdCBuZXdJZCA9IGdldE5leHRJZCh0b2RvSXRlbXMpO1xyXG4gICAgaWYgKCF0aXRsZSB8fCAhcHJpb3JpdHkgfHwgIWRlc2NyaXB0aW9uIHx8ICFkdWVEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoIU51bWJlcihwcmlvcml0eSkpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuZXdUb2RvSXRlbSA9IG5ldyBUb2RvSXRlbShuZXdJZCwgdGl0bGUsIE51bWJlcihwcmlvcml0eSksIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcm9qZWN0SWQgfHwgMSk7XHJcbiAgICB0b2RvSXRlbXMucHVzaChuZXdUb2RvSXRlbSk7XHJcbiAgICBQdWJTdWIucHVibGlzaCgnVG9kb0l0ZW1zQ2hhbmdlZCcpO1xyXG4gICAgcmV0dXJuIG5ld1RvZG9JdGVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb2RvSXRlbXMoKSB7XHJcbiAgICByZXR1cm4gdG9kb0l0ZW1zO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb2RvSXRlbUJ5SWQoaWQpIHtcclxuICAgIHJldHVybiB0b2RvSXRlbXMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0SW5kZXhGcm9tSWQoaWQpIHtcclxuICAgIHJldHVybiB0b2RvSXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWxldGVUb2RvSXRlbShpZCkge1xyXG4gICAgdG9kb0l0ZW1zLnNwbGljZShnZXRJbmRleEZyb21JZChpZCksIDEpO1xyXG4gICAgUHViU3ViLnB1Ymxpc2goJ1RvZG9JdGVtc0NoYW5nZWQnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVG9kb0l0ZW0oaXRlbSkge1xyXG4gICAgY29uc3Qgb2xkSXRlbSA9IGdldFRvZG9JdGVtQnlJZChpdGVtLmlkKTtcclxuICAgIGlmICghb2xkSXRlbSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0b2RvSXRlbXNbZ2V0SW5kZXhGcm9tSWQoaXRlbS5pZCldID0gaXRlbTtcclxuICAgIFB1YlN1Yi5wdWJsaXNoKCdUb2RvSXRlbXNDaGFuZ2VkJyk7XHJcbn1cclxuXHJcblB1YlN1Yi5zdWJzY3JpYmUoJ1RvZG9JdGVtc0NoYW5nZWQnLCAoKSA9PiB7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb0l0ZW1zJywgSlNPTi5zdHJpbmdpZnkodG9kb0l0ZW1zKSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IHsgYWRkVG9kb0l0ZW0sIGdldFRvZG9JdGVtcywgZ2V0VG9kb0l0ZW1CeUlkLCBkZWxldGVUb2RvSXRlbSwgdXBkYXRlVG9kb0l0ZW0gfTsiLCJleHBvcnQgY2xhc3MgUHJvamVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCwgbmFtZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL1Byb2plY3RcIjtcclxuaW1wb3J0IHsgZ2V0TmV4dElkIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuaW1wb3J0IFB1YlN1YiBmcm9tIFwiLi4vUHViU3ViXCI7XHJcblxyXG5jb25zdCBwcm9qZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RzJykpIHx8IFtdO1xyXG5pZiAocHJvamVjdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICBhZGRQcm9qZWN0KCdEZWZhdWx0Jyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFByb2plY3QobmFtZSkge1xyXG4gICAgY29uc3QgbmV3SWQgPSBnZXROZXh0SWQocHJvamVjdHMpO1xyXG4gICAgY29uc3QgbmV3UHJvamVjdCA9IG5ldyBQcm9qZWN0KG5ld0lkLCBuYW1lKTtcclxuICAgIHByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XHJcbiAgICBQdWJTdWIucHVibGlzaCgnUHJvamVjdENoYW5nZWQnKTtcclxuICAgIHJldHVybiBuZXdQcm9qZWN0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRQcm9qZWN0cygpIHtcclxuICAgIHJldHVybiBwcm9qZWN0cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UHJvamVjdEJ5SWQoaWQpIHtcclxuICAgIHJldHVybiBwcm9qZWN0cy5maW5kKHByb2plY3QgPT4gcHJvamVjdC5pZCA9PT0gaWQpO1xyXG59XHJcblxyXG5QdWJTdWIuc3Vic2NyaWJlKCdQcm9qZWN0Q2hhbmdlZCcsICgpID0+IHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IHsgYWRkUHJvamVjdCwgZ2V0UHJvamVjdHMsIGdldFByb2plY3RCeUlkIH0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9kb0l0ZW1EZXRhaWwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ub2RvSXRlbURldGFpbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2hlY2tib3guY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DaGVja2JveC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY2hlY2tTdmcgZnJvbSAnLi4vLi4vYXNzZXRzL2ljb25zL2NoZWNrLnN2ZydcclxuaW1wb3J0ICcuL0NoZWNrYm94LmNzcyc7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrYm94IHtcclxuICAgIGNvbnN0cnVjdG9yKGNoZWNrZWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jaGVja2JveERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tib3hEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5jaGVja2JveERpdi5jbGFzc0xpc3QuYWRkKCdjaGVja2JveCcpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tNYXJrKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tib3hEaXY7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja01hcmsoKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVDaGVja01hcmsoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wU3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRlbXBTdmcuaW5uZXJIVE1MID0gY2hlY2tTdmc7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hEaXYuYXBwZW5kQ2hpbGQodGVtcFN2Zy5maXJzdENoaWxkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94RGl2LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZGVsZXRlVG9kb0l0ZW0sIGdldFRvZG9JdGVtQnlJZCwgdXBkYXRlVG9kb0l0ZW0gfSBmcm9tIFwiLi9Ub2RvSXRlbUNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgZ2V0UHJvamVjdEJ5SWQsIGdldFByb2plY3RzIH0gZnJvbSBcIi4uL1Byb2plY3QvUHJvamVjdENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9JdGVtXCI7XHJcbmltcG9ydCAnLi9Ub2RvSXRlbURldGFpbC5jc3MnO1xyXG5pbXBvcnQgUHViU3ViIGZyb20gXCIuLi9QdWJTdWJcIjtcclxuaW1wb3J0IENoZWNrYm94IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0NoZWNrYm94XCI7XHJcbmNsYXNzIFRvZG9JdGVtRGV0YWlsIHtcclxuICAgIHJlbmRlcihpZCkge1xyXG4gICAgICAgIHRoaXMudG9kb0l0ZW0gPSBnZXRUb2RvSXRlbUJ5SWQoaWQpO1xyXG4gICAgICAgIGlmICghdGhpcy50b2RvSXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBnZXRQcm9qZWN0QnlJZCh0aGlzLnRvZG9JdGVtLnByb2plY3RJZCk7XHJcbiAgICAgICAgY29uc3QgdG9kb0l0ZW1EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29uc3QgdG9kb0l0ZW1IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gICAgICAgIHRvZG9JdGVtSGVhZGVyLnRleHRDb250ZW50ID0gdGhpcy50b2RvSXRlbS50aXRsZTtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5jbGFzc0xpc3QuYWRkKCd0b2RvSXRlbUNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgcHJvamVjdFNwYW4udGV4dENvbnRlbnQgPSAnUHJvamVjdDogJztcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvamVjdFNwYW4pO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9qZWN0TGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBwcm9qZWN0TGluay5ocmVmID0gJyMnO1xyXG4gICAgICAgIHByb2plY3RMaW5rLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgICAgIHByb2plY3RMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBwdWJsaXNoTGluaygnUHJvamVjdERldGFpbCcsIHByb2plY3QuaWQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcHJvamVjdFNwYW4uYXBwZW5kQ2hpbGQocHJvamVjdExpbmspO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgcHJvamVjdFNlbGVjdC5uYW1lID0gJ3Byb2plY3QnO1xyXG4gICAgICAgIGZvciAobGV0IHByb2plY3Qgb2YgZ2V0UHJvamVjdHMoKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICAgICAgcHJvamVjdE9wdGlvbi5uYW1lID0gJ3Byb2plY3QnO1xyXG4gICAgICAgICAgICBwcm9qZWN0T3B0aW9uLnZhbHVlID0gcHJvamVjdC5pZDtcclxuICAgICAgICAgICAgcHJvamVjdE9wdGlvbi50ZXh0ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgICAgICAgICBwcm9qZWN0U2VsZWN0LmFwcGVuZENoaWxkKHByb2plY3RPcHRpb24pO1xyXG4gICAgICAgICAgICBpZiAocHJvamVjdC5pZCA9PT0gdGhpcy50b2RvSXRlbS5wcm9qZWN0SWQpIHtcclxuICAgICAgICAgICAgICAgIHByb2plY3RPcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2plY3RTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2RvSXRlbS5wcm9qZWN0SWQgPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLm9uSXRlbUNoYW5nZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKHByb2plY3RTZWxlY3QpO1xyXG5cclxuICAgICAgICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBwcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3ByaW9yaXR5Jyk7XHJcbiAgICAgICAgcHJpb3JpdHlMYWJlbC50ZXh0Q29udGVudCA9ICdQcmlvcml0eSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKHByaW9yaXR5TGFiZWwpO1xyXG4gICAgICAgIGNvbnN0IHByaW9yaXR5U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgcHJpb3JpdHlTZWxlY3QucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0Lm5hbWUgPSAncHJpb3JpdHknO1xyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0LmlkID0gJ3ByaW9yaXR5JztcclxuICAgICAgICBmb3IgKGNvbnN0IHByaW9yaXR5IG9mIE9iamVjdC5rZXlzKFRvZG9JdGVtLnByaW9yaXRpZXMpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5TnVtID0gTnVtYmVyKHByaW9yaXR5KTtcclxuICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24ubmFtZSA9ICdwcmlvcml0eSc7XHJcbiAgICAgICAgICAgIHByaW9yaXR5T3B0aW9uLnZhbHVlID0gcHJpb3JpdHlOdW07XHJcbiAgICAgICAgICAgIHByaW9yaXR5T3B0aW9uLnRleHQgPSBUb2RvSXRlbS5wcmlvcml0aWVzW3ByaW9yaXR5TnVtXTtcclxuICAgICAgICAgICAgaWYgKHByaW9yaXR5TnVtID09PSB0aGlzLnRvZG9JdGVtLnByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBwcmlvcml0eU9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJpb3JpdHlTZWxlY3QuYXBwZW5kQ2hpbGQocHJpb3JpdHlPcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcmlvcml0eVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtLnByaW9yaXR5ID0gTnVtYmVyKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5vbkl0ZW1DaGFuZ2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZChwcmlvcml0eVNlbGVjdCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnZGVzY3JpcHRpb24nKTtcclxuICAgICAgICBkZXNjcmlwdGlvbkxhYmVsLnRleHRDb250ZW50ID0gJ0Rlc2NyaXB0aW9uJztcclxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICBkZXNjcmlwdGlvbklucHV0LnZhbHVlID0gdGhpcy50b2RvSXRlbS5kZXNjcmlwdGlvbjtcclxuICAgICAgICBkZXNjcmlwdGlvbklucHV0Lm5hbWUgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2RvSXRlbS5kZXNjcmlwdGlvbiA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLm9uSXRlbUNoYW5nZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkxhYmVsKTtcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb25JbnB1dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGR1ZURhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgICAgZHVlRGF0ZUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ2R1ZURhdGUnKTtcclxuICAgICAgICBkdWVEYXRlTGFiZWwudGV4dENvbnRlbnQgPSAnRHVlIERhdGUnO1xyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZChkdWVEYXRlTGFiZWwpO1xyXG4gICAgICAgIGNvbnN0IGR1ZURhdGVTZWxlY3RvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgZHVlRGF0ZVNlbGVjdG9yLnR5cGUgPSAnZGF0ZSc7XHJcbiAgICAgICAgZHVlRGF0ZVNlbGVjdG9yLm5hbWUgPSAnZHVlRGF0ZSc7XHJcbiAgICAgICAgZHVlRGF0ZVNlbGVjdG9yLnZhbHVlID0gdGhpcy50b2RvSXRlbS5kdWVEYXRlO1xyXG4gICAgICAgIGR1ZURhdGVTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtLmR1ZURhdGUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5vbkl0ZW1DaGFuZ2UoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQoZHVlRGF0ZVNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgY29uc3QgaXNDb21wbGV0ZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgaXNDb21wbGV0ZVNwYW4udGV4dENvbnRlbnQgPSAnSXMgY29tcGxldGVkJztcclxuICAgICAgICBjb25zdCBpc0NvbXBsZXRlQ2hlY2tib3ggPSBuZXcgQ2hlY2tib3godGhpcy50b2RvSXRlbS5pc0NvbXBsZXRlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudG9kb0l0ZW0uaXNDb21wbGV0ZSA9ICF0aGlzLnRvZG9JdGVtLmlzQ29tcGxldGU7XHJcbiAgICAgICAgICAgIHRoaXMub25JdGVtQ2hhbmdlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQoaXNDb21wbGV0ZVNwYW4pO1xyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZChpc0NvbXBsZXRlQ2hlY2tib3gpO1xyXG5cclxuICAgICAgICBjb25zdCBkZWxldGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSAnRGVsZXRlJztcclxuICAgICAgICBkZWxldGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnZGVsZXRlLWJ1dHRvbicpO1xyXG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGRlbGV0ZVRvZG9JdGVtKHRoaXMudG9kb0l0ZW0uaWQpO1xyXG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaCgnY2hhbmdlUGFnZScsIHtwYWdlOiAnUHJvamVjdERldGFpbCcsIGRhdGE6IHByb2plY3QuaWR9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcclxuICAgICAgICBcclxuICAgIFxyXG4gICAgICAgIHRvZG9JdGVtRGl2LmFwcGVuZENoaWxkKHRvZG9JdGVtSGVhZGVyKTtcclxuICAgICAgICB0b2RvSXRlbURpdi5hcHBlbmRDaGlsZCh0b2RvSXRlbUNvbnRlbnQpO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHRvZG9JdGVtRGl2O1xyXG4gICAgfVxyXG5cclxuICAgIG9uSXRlbUNoYW5nZSgpIHtcclxuICAgICAgICB1cGRhdGVUb2RvSXRlbSh0aGlzLnRvZG9JdGVtKTtcclxuICAgICAgICBwdWJsaXNoTGluaygnVG9kb0l0ZW1EZXRhaWwnLCB0aGlzLnRvZG9JdGVtLmlkKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFRvZG9JdGVtRGV0YWlsKCk7IiwiaW1wb3J0IHsgZ2V0VG9kb0l0ZW1zIH0gZnJvbSBcIi4vVG9kb0l0ZW0vVG9kb0l0ZW1Db250cm9sbGVyXCI7XHJcblxyXG5jbGFzcyBQcm9qZWN0VG9kb0l0ZW1NZWRpYXRvciB7XHJcbiAgICBnZXRUb2RvSXRlbXNGb3JQcm9qZWN0KHByb2plY3RJZCkge1xyXG4gICAgICAgIHJldHVybiBnZXRUb2RvSXRlbXMoKS5maWx0ZXIoaXRlbSA9PiBpdGVtLnByb2plY3RJZCA9PT0gcHJvamVjdElkKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFByb2plY3RUb2RvSXRlbU1lZGlhdG9yKCk7XHJcblxyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUHJvamVjdExpc3QuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qcm9qZWN0TGlzdC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBnZXRQcm9qZWN0cyB9IGZyb20gXCIuL1Byb2plY3RDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IHB1Ymxpc2hMaW5rIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuaW1wb3J0IFByb2plY3RUb2RvSXRlbU1lZGlhdG9yIGZyb20gXCIuLi9Qcm9qZWN0VG9kb0l0ZW1NZWRpYXRvclwiO1xyXG5pbXBvcnQgJy4vUHJvamVjdExpc3QuY3NzJztcclxuY2xhc3MgUHJvamVjdExpc3Qge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcclxuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdENvbnRhaW5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHByb2plY3RMaXN0Q29udGFpbmVyRGl2LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtbGlzdC1jb250YWluZXInKTtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHByb2plY3RMaXN0SGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICAgICAgICBwcm9qZWN0TGlzdEhlYWRlci50ZXh0Q29udGVudCA9IFwiUHJvamVjdHNcIjtcclxuICAgICAgICBwcm9qZWN0TGlzdENvbnRhaW5lckRpdi5hcHBlbmRDaGlsZChwcm9qZWN0TGlzdEhlYWRlcik7XHJcbiAgICBcclxuICAgICAgICBmb3IgKGxldCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBwcm9qZWN0TGluay5ocmVmPVwiI1wiO1xyXG4gICAgICAgICAgICBwcm9qZWN0TGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB0aGlzLm9uUHJvamVjdExpbmtDbGljayhlLCBwcm9qZWN0KSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHByb2plY3REaXYuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1jYXJkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcclxuICAgICAgICAgICAgcHJvamVjdE5hbWVIZWFkZXIudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RUb2RvSXRlbXNDb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICBjb25zdCB0b2RvSXRlbXNDb3VudCA9IFByb2plY3RUb2RvSXRlbU1lZGlhdG9yLmdldFRvZG9JdGVtc0ZvclByb2plY3QocHJvamVjdC5pZCkubGVuZ3RoO1xyXG4gICAgICAgICAgICBwcm9qZWN0VG9kb0l0ZW1zQ291bnRlci50ZXh0Q29udGVudCA9IGBUb2RvIGl0ZW1zOiAke3RvZG9JdGVtc0NvdW50fWA7XHJcblxyXG4gICAgICAgICAgICBwcm9qZWN0TGluay5hcHBlbmRDaGlsZChwcm9qZWN0RGl2KTtcclxuXHJcbiAgICAgICAgICAgIHByb2plY3REaXYuYXBwZW5kQ2hpbGQocHJvamVjdE5hbWVIZWFkZXIpO1xyXG4gICAgICAgICAgICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKHByb2plY3RUb2RvSXRlbXNDb3VudGVyKTtcclxuXHJcbiAgICAgICAgICAgIHByb2plY3RMaXN0Q29udGFpbmVyRGl2LmFwcGVuZENoaWxkKHByb2plY3RMaW5rKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gcHJvamVjdExpc3RDb250YWluZXJEaXY7XHJcbiAgICB9XHJcblxyXG4gICAgb25Qcm9qZWN0TGlua0NsaWNrKGUsIHByb2plY3QpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coe3Byb2plY3R9KTtcclxuICAgICAgICBwdWJsaXNoTGluaygnUHJvamVjdERldGFpbCcsIHByb2plY3QuaWQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgUHJvamVjdExpc3QoKTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gXCIuLi9QdWJTdWJcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuXHJcbmNsYXNzIEhlYWRlciB7XHJcbiAgICBwYWdlTGlua3MgPSBbXHJcbiAgICAgICAge25hbWU6ICdQcm9qZWN0cycscGFnZTogJ1Byb2plY3RMaXN0J31cclxuICAgIF1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoZWFkZXInKTtcclxuICAgICAgICBjb25zdCBuYXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCduYXYnKTtcclxuICAgICAgICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XHJcbiAgICAgICAgbGlua3MuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLWxpbmtzJyk7XHJcbiAgICAgICAgZm9yIChsZXQgcGFnZSBvZiB0aGlzLnBhZ2VMaW5rcykge1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgICAgICAgIGxpc3RJdGVtLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1saW5rLWl0ZW0nKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgbGlzdEl0ZW1MaW5rLmhyZWYgPSAnIyc7XHJcbiAgICAgICAgICAgIGxpc3RJdGVtTGluay50ZXh0Q29udGVudCA9IHBhZ2UubmFtZTtcclxuICAgICAgICAgICAgbGlzdEl0ZW1MaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHRoaXMub25IZWFkZXJMaW5rQ2xpY2soZSwgcGFnZSkpO1xyXG4gICAgICAgICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChsaXN0SXRlbUxpbmspO1xyXG5cclxuICAgICAgICAgICAgbGlua3MuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuYXYuYXBwZW5kQ2hpbGQobGlua3MpO1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgYnV0dG9uc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdidXR0b25zLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBjb25zdCBhZGRQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgYWRkUHJvamVjdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhZGQtcHJvamVjdC1idXR0b24nKTtcclxuICAgICAgICBhZGRQcm9qZWN0QnV0dG9uLnRleHRDb250ZW50ID0gJ0FkZCBQcm9qZWN0JztcclxuICAgICAgICBhZGRQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHsgcHVibGlzaExpbmsoJ0FkZFByb2plY3QnKX0pO1xyXG5cclxuICAgICAgICBjb25zdCBhZGRUb2RvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgYWRkVG9kb0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdhZGQtdG9kby1idXR0b24nKTtcclxuICAgICAgICBhZGRUb2RvQnV0dG9uLnRleHRDb250ZW50ID0gXCJBZGQgVG9kbyBJdGVtXCI7XHJcbiAgICAgICAgYWRkVG9kb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7IHB1Ymxpc2hMaW5rKCdBZGRUb2RvSXRlbScpfSk7XHJcblxyXG4gICAgICAgIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYWRkUHJvamVjdEJ1dHRvbik7XHJcbiAgICAgICAgYnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRUb2RvQnV0dG9uKTtcclxuICAgICAgICBcclxuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobmF2KTtcclxuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoYnV0dG9uc0NvbnRhaW5lcik7XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICBvbkhlYWRlckxpbmtDbGljayhlLCBuZXdQYWdlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdjaGFuZ2VQYWdlJywge3BhZ2U6IG5ld1BhZ2UucGFnZX0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgSGVhZGVyKCk7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2plY3REZXRhaWwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qcm9qZWN0RGV0YWlsLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBDaGVja2JveCBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9DaGVja2JveFwiO1xyXG5pbXBvcnQgUHJvamVjdFRvZG9JdGVtTWVkaWF0b3IgZnJvbSBcIi4uL1Byb2plY3RUb2RvSXRlbU1lZGlhdG9yXCI7XHJcbmltcG9ydCB7IFRvZG9JdGVtIH0gZnJvbSBcIi4uL1RvZG9JdGVtL1RvZG9JdGVtXCI7XHJcbmltcG9ydCB7IHB1Ymxpc2hMaW5rIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuaW1wb3J0IHsgZ2V0UHJvamVjdEJ5SWQgfSBmcm9tIFwiLi9Qcm9qZWN0Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgJy4vUHJvamVjdERldGFpbC5jc3MnO1xyXG5cclxuY2xhc3MgUHJvamVjdERldGFpbCB7XHJcbiAgICByZW5kZXIoaWQpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gZ2V0UHJvamVjdEJ5SWQoaWQpO1xyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtcyA9IFByb2plY3RUb2RvSXRlbU1lZGlhdG9yLmdldFRvZG9JdGVtc0ZvclByb2plY3QocHJvamVjdC5pZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3REZXRhaWxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBwcm9qZWN0RGV0YWlsRGl2LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtZGV0YWlsJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcHJvamVjdERldGFpbEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICAgICAgcHJvamVjdERldGFpbEhlYWRlci50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZSB8fCAnUHJvamVjdCBEZXRhaWxzJztcclxuICAgICAgICBwcm9qZWN0RGV0YWlsRGl2LmFwcGVuZENoaWxkKHByb2plY3REZXRhaWxIZWFkZXIpO1xyXG5cclxuICAgICAgICBjb25zdCB0b2RvSXRlbXNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0b2RvSXRlbXNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndG9kby1pdGVtcy1jb250YWluZXInKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgdG9kb0l0ZW0gb2YgdG9kb0l0ZW1zKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b2RvSXRlbURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICB0b2RvSXRlbURpdi5jbGFzc0xpc3QuYWRkKCd0b2RvLWl0ZW0nKTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1EaXYuY2xhc3NMaXN0LmFkZChgcHJpb3JpdHktJHtUb2RvSXRlbS5wcmlvcml0aWVzW3RvZG9JdGVtLnByaW9yaXR5XS50b0xvd2VyQ2FzZSgpfWApO1xyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHRvZG9JdGVtSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1IZWFkZXIudGV4dENvbnRlbnQgPSB0b2RvSXRlbS50aXRsZTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1EaXYuYXBwZW5kQ2hpbGQodG9kb0l0ZW1IZWFkZXIpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9kb0l0ZW1EdWVEYXRlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRvZG9JdGVtRHVlRGF0ZURpdi50ZXh0Q29udGVudCA9IGBEdWUgZGF0ZTogJHt0b2RvSXRlbS5kdWVEYXRlfWA7XHJcbiAgICAgICAgICAgIHRvZG9JdGVtRGl2LmFwcGVuZENoaWxkKHRvZG9JdGVtRHVlRGF0ZURpdik7XHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHdpdGggY29tcG9uZW50XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrQm94Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGNoZWNrQm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NoZWNrQm94Q29udGFpbmVyJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrQm94U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgY2hlY2tCb3hTcGFuLnRleHRDb250ZW50ID0gJ0ZpbmlzaGVkPyc7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gbmV3IENoZWNrYm94KHRvZG9JdGVtLmlzQ29tcGxldGUsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvZG9JdGVtLmlzQ29tcGxldGUgPSAhdG9kb0l0ZW0uaXNDb21wbGV0ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNoZWNrQm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrQm94U3Bhbik7XHJcbiAgICAgICAgICAgIGNoZWNrQm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrYm94KTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1EaXYuYXBwZW5kQ2hpbGQoY2hlY2tCb3hDb250YWluZXIpO1xyXG5cclxuICAgICAgICAgICAgdG9kb0l0ZW1EaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0LnRhZ05hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBjaGVja2JveCB8fCBlLnRhcmdldC50YWdOYW1lID09PSAnc3ZnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHB1Ymxpc2hMaW5rKCdUb2RvSXRlbURldGFpbCcsIHRvZG9JdGVtLmlkKTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIHRvZG9JdGVtc0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2RvSXRlbURpdik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm9qZWN0RGV0YWlsRGl2LmFwcGVuZENoaWxkKHRvZG9JdGVtc0NvbnRhaW5lcik7XHJcbiAgICAgICAgcmV0dXJuIHByb2plY3REZXRhaWxEaXY7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBQcm9qZWN0RGV0YWlsKCk7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FkZFRvZG9JdGVtLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQWRkVG9kb0l0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgZ2V0UHJvamVjdHMgfSBmcm9tIFwiLi4vUHJvamVjdC9Qcm9qZWN0Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgJy4vQWRkVG9kb0l0ZW0uY3NzJztcclxuaW1wb3J0IHsgVG9kb0l0ZW0gfSBmcm9tIFwiLi9Ub2RvSXRlbVwiO1xyXG5pbXBvcnQgeyBhZGRUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9JdGVtQ29udHJvbGxlclwiO1xyXG5cclxuY2xhc3MgQWRkVG9kb0l0ZW0ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkVG9kb0l0ZW1Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkVG9kb0l0ZW1IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gICAgICAgIGFkZFRvZG9JdGVtSGVhZGVyLnRleHRDb250ZW50ID0gJ0FkZCBUb2RvIEl0ZW0nO1xyXG5cclxuICAgICAgICBjb25zdCB0b2RvSXRlbUZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMub25Gb3JtU3VibWl0KTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gICAgICAgIG5hbWVMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICd0aXRsZScpO1xyXG4gICAgICAgIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9ICdUaXRsZSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7XHJcbiAgICAgICAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICBuYW1lSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgIG5hbWVJbnB1dC5uYW1lID0gJ3RpdGxlJztcclxuICAgICAgICBuYW1lSW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICBuYW1lSW5wdXQuaWQgPSAndGl0bGUnO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChuYW1lSW5wdXQpO1xyXG5cclxuICAgICAgICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBwcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3ByaW9yaXR5Jyk7XHJcbiAgICAgICAgcHJpb3JpdHlMYWJlbC50ZXh0Q29udGVudCA9ICdQcmlvcml0eSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFwcGVuZENoaWxkKHByaW9yaXR5TGFiZWwpO1xyXG4gICAgICAgIGNvbnN0IHByaW9yaXR5U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgcHJpb3JpdHlTZWxlY3QucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0Lm5hbWUgPSAncHJpb3JpdHknO1xyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0LmlkID0gJ3ByaW9yaXR5JztcclxuICAgICAgICBmb3IgKGxldCBwcmlvcml0eSBvZiBPYmplY3Qua2V5cyhUb2RvSXRlbS5wcmlvcml0aWVzKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwcmlvcml0eU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgICAgICBwcmlvcml0eU9wdGlvbi5uYW1lID0gJ3ByaW9yaXR5JztcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24udmFsdWUgPSBwcmlvcml0eTtcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24udGV4dCA9IFRvZG9JdGVtLnByaW9yaXRpZXNbcHJpb3JpdHldO1xyXG4gICAgICAgICAgICBwcmlvcml0eVNlbGVjdC5hcHBlbmRDaGlsZChwcmlvcml0eU9wdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChwcmlvcml0eVNlbGVjdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgICAgZGVzY3JpcHRpb25MYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdkZXNjcmlwdGlvbicpO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uTGFiZWwudGV4dENvbnRlbnQgPSAnRGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkxhYmVsKTtcclxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvblRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgICBkZXNjcmlwdGlvblRleHRBcmVhLnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICBkZXNjcmlwdGlvblRleHRBcmVhLm5hbWUgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uVGV4dEFyZWEuaWQgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvblRleHRBcmVhKTtcclxuXHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBkdWVEYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnZHVlRGF0ZScpO1xyXG4gICAgICAgIGR1ZURhdGVMYWJlbC50ZXh0Q29udGVudCA9ICdEdWUgRGF0ZSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFwcGVuZENoaWxkKGR1ZURhdGVMYWJlbCk7XHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZVBpY2tlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgZHVlRGF0ZVBpY2tlci5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgZHVlRGF0ZVBpY2tlci50eXBlID0gJ2RhdGUnO1xyXG4gICAgICAgIGR1ZURhdGVQaWNrZXIubmFtZSA9ICdkdWVEYXRlJztcclxuICAgICAgICBkdWVEYXRlUGlja2VyLmlkID0gJ2R1ZURhdGUnO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChkdWVEYXRlUGlja2VyKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBwcm9qZWN0TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAncHJvamVjdCcpO1xyXG4gICAgICAgIHByb2plY3RMYWJlbC50ZXh0Q29udGVudCA9ICdQcm9qZWN0JztcclxuICAgICAgICBjb25zdCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgcHJvamVjdFNlbGVjdC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgcHJvamVjdFNlbGVjdC5uYW1lID0gJ3Byb2plY3QnO1xyXG4gICAgICAgIHByb2plY3RTZWxlY3QuaWQgPSAncHJvamVjdCc7XHJcbiAgICAgICAgZm9yIChsZXQgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgICAgIHByb2plY3RPcHRpb24udmFsdWUgPSBwcm9qZWN0LmlkO1xyXG4gICAgICAgICAgICBwcm9qZWN0T3B0aW9uLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgICAgICAgICBwcm9qZWN0U2VsZWN0LmFwcGVuZENoaWxkKHByb2plY3RPcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b2RvSXRlbUZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdFNlbGVjdCk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBzdWJtaXRCdXR0b24udHlwZSA9ICdzdWJtaXQnO1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9ICdBZGQnO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xyXG5cclxuICAgICAgICBhZGRUb2RvSXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRUb2RvSXRlbUhlYWRlcik7XHJcbiAgICAgICAgYWRkVG9kb0l0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW1Gb3JtKTtcclxuICAgICAgICByZXR1cm4gYWRkVG9kb0l0ZW1Db250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgb25Gb3JtU3VibWl0KGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGlmKCFmb3JtLmNoZWNrVmFsaWRpdHkoKSkge1xyXG4gICAgICAgICAgICBmb3JtLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcclxuICAgICAgICBjb25zdCBuZXdUb2RvSXRlbSA9IGFkZFRvZG9JdGVtKFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5nZXQoJ3RpdGxlJyksIFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5nZXQoJ3ByaW9yaXR5JyksXHJcbiAgICAgICAgICAgIGZvcm1EYXRhLmdldCgnZGVzY3JpcHRpb24nKSwgXHJcbiAgICAgICAgICAgIGZvcm1EYXRhLmdldCgnZHVlRGF0ZScpLFxyXG4gICAgICAgICAgICBOdW1iZXIoZm9ybURhdGEuZ2V0KCdwcm9qZWN0JykpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAobmV3VG9kb0l0ZW0pIHtcclxuICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciB3aGVuIGNyZWF0aW5nIG5ldyB0b2RvIGl0ZW0nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBBZGRUb2RvSXRlbSgpOyIsImltcG9ydCB7IHB1Ymxpc2hMaW5rIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuaW1wb3J0IHsgYWRkUHJvamVjdCB9IGZyb20gXCIuL1Byb2plY3RDb250cm9sbGVyXCI7XHJcblxyXG5jbGFzcyBBZGRQcm9qZWN0IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBhZGRQcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gJ0FkZCBQcm9qZWN0JztcclxuXHJcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcclxuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMub25Gb3JtU3VibWl0KTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBuYW1lTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnbmFtZScpO1xyXG4gICAgICAgIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9ICdQcm9qZWN0IG5hbWUnO1xyXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICBuYW1lSW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICBuYW1lSW5wdXQubmFtZSA9ICduYW1lJztcclxuICAgICAgICBuYW1lSW5wdXQuaWQgPSAnbmFtZSc7XHJcbiAgICAgICAgbmFtZUlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICBmb3JtLmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9ICdBZGQnO1xyXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0QnV0dG9uKTtcclxuXHJcbiAgICAgICAgYWRkUHJvamVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xyXG4gICAgICAgIGFkZFByb2plY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoZm9ybSk7XHJcblxyXG4gICAgICAgIHJldHVybiBhZGRQcm9qZWN0Q29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRm9ybVN1Ym1pdChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSBlLnRhcmdldDtcclxuICAgICAgICBpZiAoIWZvcm0uY2hlY2tWYWxpZGl0eSgpKSB7XHJcbiAgICAgICAgICAgIGZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBhZGRQcm9qZWN0KFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5nZXQoJ25hbWUnKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGlmIChuZXdQcm9qZWN0KSB7XHJcbiAgICAgICAgICAgIHB1Ymxpc2hMaW5rKCdQcm9qZWN0TGlzdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLnRhYmxlKGZvcm1EYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IEFkZFByb2plY3QoKTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJy4vbW9kdWxlcy9QdWJTdWInO1xyXG5pbXBvcnQgeyBhZGRUb2RvSXRlbSwgZ2V0VG9kb0l0ZW1CeUlkLCBnZXRUb2RvSXRlbXMgfSBmcm9tICcuL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1Db250cm9sbGVyJztcclxuaW1wb3J0IFRvZG9JdGVtRGV0YWlsIGZyb20gJy4vbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbURldGFpbCc7XHJcbmltcG9ydCBQcm9qZWN0TGlzdCBmcm9tICcuL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdCc7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9tb2R1bGVzL0xheW91dC9oZWFkZXInO1xyXG5pbXBvcnQgUHJvamVjdERldGFpbCBmcm9tICcuL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0RGV0YWlsJztcclxuaW1wb3J0IEFkZFRvZG9JdGVtIGZyb20gJy4vbW9kdWxlcy9Ub2RvSXRlbS9BZGRUb2RvSXRlbSc7XHJcbmltcG9ydCBBZGRQcm9qZWN0IGZyb20gJy4vbW9kdWxlcy9Qcm9qZWN0L0FkZFByb2plY3QnO1xyXG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuY29uc29sZS5sb2coJ1RvZG9MaXN0IGFwcCBsb2FkZWQnKTtcclxuaWYgKGdldFRvZG9JdGVtcygpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgYWRkVG9kb0l0ZW0oXCJUZXN0XCIsIDEsIFwiVGVzdCBEZXNjcmlwdGlvblwiLCBcIjIwMjItMTItMjlcIik7XHJcbiAgICBhZGRUb2RvSXRlbShcIlRlc3QyXCIsIDEsIFwiVGVzdCBEZXNjcmlwdGlvbiAyXCIsIFwiMjAyMi0xMi0zMFwiKTtcclxufVxyXG5cclxuY29uc29sZS50YWJsZShnZXRUb2RvSXRlbXMoKSk7XHJcblxyXG5jb25zdCBwYWdlcyA9IHtcclxuICAgIFwiVG9kb0l0ZW1EZXRhaWxcIjogVG9kb0l0ZW1EZXRhaWwsXHJcbiAgICBcIlByb2plY3RMaXN0XCI6IFByb2plY3RMaXN0LFxyXG4gICAgXCJQcm9qZWN0RGV0YWlsXCI6UHJvamVjdERldGFpbCxcclxuICAgIFwiQWRkVG9kb0l0ZW1cIjpBZGRUb2RvSXRlbSxcclxuICAgIFwiQWRkUHJvamVjdFwiOkFkZFByb2plY3RcclxufVxyXG5cclxuUHViU3ViLnN1YnNjcmliZSgnY2hhbmdlUGFnZScsIGNoYW5nZVBhZ2UpO1xyXG5cclxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChIZWFkZXIucmVuZGVyKCkpO1xyXG5jb25zdCBtYWluQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5tYWluQ29udGVudC5jbGFzc0xpc3QuYWRkKCdtYWluLWNvbnRlbnQnKTtcclxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtYWluQ29udGVudCk7XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VQYWdlKGRhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgaWYgKCFkYXRhLnBhZ2UgfHwgIXBhZ2VzW2RhdGEucGFnZV0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbWFpbkNvbnRlbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIG1haW5Db250ZW50LmFwcGVuZENoaWxkKHBhZ2VzW2RhdGEucGFnZV0ucmVuZGVyKGRhdGEuZGF0YSkpO1xyXG59XHJcblxyXG5jaGFuZ2VQYWdlKHtcclxuICAgIHBhZ2U6IFwiUHJvamVjdExpc3RcIlxyXG59KTtcclxuLy9jaGFuZ2VQYWdlKFRvZG9JdGVtRGV0YWlsLCAxKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJldmVudHMiLCJwdWJsaXNoIiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwibGlzdGVuZXIiLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsInVuc3Vic2NyaWJlIiwiZmluZCIsIlRvZG9JdGVtIiwiY29uc3RydWN0b3IiLCJ0aXRsZSIsInByaW9yaXR5IiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJvamVjdElkIiwiaXNDb21wbGV0ZSIsInN0YXRpYyIsImdldE5leHRJZCIsImFyciIsInJlZHVjZSIsInByZXZpb3VzIiwicHVibGlzaExpbmsiLCJwYWdlIiwidG9kb0l0ZW1zIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiYWRkVG9kb0l0ZW0iLCJuZXdJZCIsIk51bWJlciIsIm5ld1RvZG9JdGVtIiwiZ2V0VG9kb0l0ZW1zIiwiZ2V0VG9kb0l0ZW1CeUlkIiwiZ2V0SW5kZXhGcm9tSWQiLCJmaW5kSW5kZXgiLCJzZXRJdGVtIiwiUHJvamVjdCIsIm5hbWUiLCJwcm9qZWN0cyIsImFkZFByb2plY3QiLCJuZXdQcm9qZWN0IiwiZ2V0UHJvamVjdHMiLCJnZXRQcm9qZWN0QnlJZCIsInByb2plY3QiLCJjaGVja2VkIiwiY2hlY2tib3hEaXYiLCJhZGRFdmVudExpc3RlbmVyIiwib25DbGljayIsImJpbmQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ1cGRhdGVDaGVja01hcmsiLCJ0b2dnbGUiLCJ0ZW1wU3ZnIiwiaW5uZXJIVE1MIiwicmVuZGVyIiwidG9kb0l0ZW0iLCJ0b2RvSXRlbURpdiIsInRvZG9JdGVtSGVhZGVyIiwidGV4dENvbnRlbnQiLCJ0b2RvSXRlbUNvbnRlbnQiLCJwcm9qZWN0U3BhbiIsInByb2plY3RMaW5rIiwiaHJlZiIsInByZXZlbnREZWZhdWx0IiwicHJvamVjdFNlbGVjdCIsInByb2plY3RPcHRpb24iLCJ2YWx1ZSIsInRleHQiLCJzZWxlY3RlZCIsIm9uSXRlbUNoYW5nZSIsInByaW9yaXR5TGFiZWwiLCJwcmlvcml0eVNlbGVjdCIsInJlcXVpcmVkIiwia2V5cyIsInByaW9yaXRpZXMiLCJwcmlvcml0eU51bSIsInByaW9yaXR5T3B0aW9uIiwiZGVzY3JpcHRpb25MYWJlbCIsImRlc2NyaXB0aW9uSW5wdXQiLCJkdWVEYXRlTGFiZWwiLCJkdWVEYXRlU2VsZWN0b3IiLCJ0eXBlIiwiaXNDb21wbGV0ZVNwYW4iLCJpc0NvbXBsZXRlQ2hlY2tib3giLCJkZWxldGVCdXR0b24iLCJkZWxldGVUb2RvSXRlbSIsImdldFRvZG9JdGVtc0ZvclByb2plY3QiLCJmaWx0ZXIiLCJwcm9qZWN0TGlzdENvbnRhaW5lckRpdiIsInByb2plY3RMaXN0SGVhZGVyIiwib25Qcm9qZWN0TGlua0NsaWNrIiwicHJvamVjdERpdiIsInByb2plY3ROYW1lSGVhZGVyIiwicHJvamVjdFRvZG9JdGVtc0NvdW50ZXIiLCJ0b2RvSXRlbXNDb3VudCIsInBhZ2VMaW5rcyIsImhlYWRlciIsIm5hdiIsImxpbmtzIiwibGlzdEl0ZW0iLCJsaXN0SXRlbUxpbmsiLCJvbkhlYWRlckxpbmtDbGljayIsImJ1dHRvbnNDb250YWluZXIiLCJhZGRQcm9qZWN0QnV0dG9uIiwiYWRkVG9kb0J1dHRvbiIsIm5ld1BhZ2UiLCJwcm9qZWN0RGV0YWlsRGl2IiwicHJvamVjdERldGFpbEhlYWRlciIsInRvZG9JdGVtc0NvbnRhaW5lciIsInRvTG93ZXJDYXNlIiwidG9kb0l0ZW1EdWVEYXRlRGl2IiwiY2hlY2tCb3hDb250YWluZXIiLCJjaGVja0JveFNwYW4iLCJjaGVja2JveCIsImN1cnJlbnRUYXJnZXQiLCJ0YWdOYW1lIiwiYWRkVG9kb0l0ZW1Db250YWluZXIiLCJhZGRUb2RvSXRlbUhlYWRlciIsInRvZG9JdGVtRm9ybSIsIm9uRm9ybVN1Ym1pdCIsIm5hbWVMYWJlbCIsIm5hbWVJbnB1dCIsImRlc2NyaXB0aW9uVGV4dEFyZWEiLCJkdWVEYXRlUGlja2VyIiwicHJvamVjdExhYmVsIiwic3VibWl0QnV0dG9uIiwiZm9ybSIsImNoZWNrVmFsaWRpdHkiLCJyZXBvcnRWYWxpZGl0eSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJyZXNldCIsImFkZFByb2plY3RDb250YWluZXIiLCJ0YWJsZSIsInBhZ2VzIiwiY2hhbmdlUGFnZSIsImJvZHkiLCJtYWluQ29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=