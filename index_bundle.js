(()=>{var e={110:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}"],sourceRoot:""}]);const a=s},411:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/TodoItemsList.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;IACT,6BAA6B;IAC7B,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,2BAA2B;AAC/B",sourcesContent:[".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n"],sourceRoot:""}]);const a=s},9:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/header.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const a=s},464:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n.sidebar-link-item > a {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}\r\n\r\n.sidebar-link-item-number {\r\n    background-color: #dedede;\r\n    padding: 2px 6px;\r\n    border-radius: 40%;\r\n    justify-self: end;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/sidebar.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,WAAW;;IAEX,yBAAyB;IACzB,4BAA4B;IAC5B,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,kBAAkB;IAClB,iBAAiB;AACrB",sourcesContent:[".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n.sidebar-link-item > a {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}\r\n\r\n.sidebar-link-item-number {\r\n    background-color: #dedede;\r\n    padding: 2px 6px;\r\n    border-radius: 40%;\r\n    justify-self: end;\r\n}"],sourceRoot:""}]);const a=s},780:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,iDAAiD;AACrD;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}"],sourceRoot:""}]);const a=s},846:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectList.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sDAAsD;IACtD,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:[".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}"],sourceRoot:""}]);const a=s},528:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const a=s},563:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,wCAAwC;AAC5C;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}"],sourceRoot:""}]);const a=s},426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([e.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;IACV,WAAW;IACX,aAAa;;IAEb,aAAa;IACb,gCAAgC;IAChC,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,cAAc;AAClB",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const a=s},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(s[d]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var d=e[a],c=r.base?d[0]+r.base:d[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=n(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var u=o(m,r);r.byIndex=a,t.splice(a,0,{identifier:A,updater:u,references:1})}s.push(A)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var d=r(e,o),c=0;c<i.length;c++){var l=n(i[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=d}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},586:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{"use strict";const e=new class{events={};publish(e,t){if(this.events[e])for(let n of this.events[e])n(t)}subscribe(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}unsubscribe(e,t){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===t)))}};class t{constructor(e,t,n,r,o,i,s){this.id=e,this.title=t,this.priority=n,this.description=r,this.dueDate=o,this.isComplete=i||!1,this.projectId=s}static priorities={1:"Critical",2:"Important",3:"Default"}}function r(e){return 0===e.length?1:e.reduce(((e,t)=>e.id<t.id?t:e)).id+1}function o(t,n){e.publish("changePage",{page:t,data:n})}function i(e,t){return e.findIndex((e=>e.id===t))}function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function d(e){s(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function c(e){s(1,arguments);var t=d(e);return t.setHours(0,0,0,0),t}function l(e,t){s(2,arguments);var n=c(e),r=c(t);return n.getTime()===r.getTime()}const A=function(){const e=JSON.parse(localStorage.getItem("todoItems"));return!!e&&e.map((e=>new t(e.id,e.title,e.priority,e.description,new Date(e.dueDate),e.isComplete,e.projectId)))}()||[];function p(n,o,i,s,a){const d=r(A);if(!(n&&o&&i&&s))return null;if(!Number(o))return null;s=new Date(s);const c=new t(d,n,Number(o),i,s,a||1);return A.push(c),e.publish("TodoItemsChanged"),c}function m(){return A}function u(){return m().filter((e=>function(e){return s(1,arguments),l(e,Date.now())}(e.dueDate)))}function C(){return m().filter((e=>function(e){return s(1,arguments),d(e).getTime()>Date.now()}(e.dueDate)))}function g(e){return A.find((t=>t.id===e))}function h(t){g(t.id)&&(A[i(A,t.id)]=t,e.publish("TodoItemsChanged"))}e.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(A))}));class b{constructor(e,t){this.id=e,this.name=t}}const f=JSON.parse(localStorage.getItem("projects"))||[];function I(t){const n=r(f),o=new b(n,t);return f.push(o),e.publish("ProjectChanged"),o}function x(){return f}function B(e){return f.find((t=>t.id===e))}0===f.length&&I("Default"),e.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(f))}));var v=n(379),y=n.n(v),E=n(795),k=n.n(E),w=n(569),j=n.n(w),T=n(565),D=n.n(T),L=n(216),S=n.n(L),P=n(589),Z=n.n(P),F=n(563),N={};N.styleTagTransform=Z(),N.setAttributes=D(),N.insert=j().bind(null,"head"),N.domAPI=k(),N.insertStyleElement=S(),y()(F.Z,N),F.Z&&F.Z.locals&&F.Z.locals;var W=n(586),q=n.n(W),M=n(110),R={};R.styleTagTransform=Z(),R.setAttributes=D(),R.insert=j().bind(null,"head"),R.domAPI=k(),R.insertStyleElement=S(),y()(M.Z,R),M.Z&&M.Z.locals&&M.Z.locals;class O{constructor(e,t){return this.checked=e,this.callback=t,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){if(this.checked){const e=document.createElement("div");e.innerHTML=q(),this.checkboxDiv.appendChild(e.firstChild)}else this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}function z(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}function U(e,t){var n,r;s(1,arguments);var o=d(e);if(isNaN(o.getTime()))throw new RangeError("Invalid time value");var i=String(null!==(n=null==t?void 0:t.format)&&void 0!==n?n:"extended"),a=String(null!==(r=null==t?void 0:t.representation)&&void 0!==r?r:"complete");if("extended"!==i&&"basic"!==i)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==a&&"time"!==a&&"complete"!==a)throw new RangeError("representation must be 'date', 'time', or 'complete'");var c="",l="",A="extended"===i?"-":"",p="extended"===i?":":"";if("time"!==a){var m=z(o.getDate(),2),u=z(o.getMonth()+1,2),C=z(o.getFullYear(),4);c="".concat(C).concat(A).concat(u).concat(A).concat(m)}if("date"!==a){var g=o.getTimezoneOffset();if(0!==g){var h=Math.abs(g),b=z(Math.floor(h/60),2),f=z(h%60,2),I=g<0?"+":"-";l="".concat(I).concat(b,":").concat(f)}else l="Z";var x=z(o.getHours(),2),B=z(o.getMinutes(),2),v=z(o.getSeconds(),2),y=""===c?"":"T",E=[x,B,v].join(p);c="".concat(c).concat(y).concat(E).concat(l)}return c}const H=new class{render(n){if(this.todoItem=g(n),!this.todoItem)return;const r=B(this.todoItem.projectId),s=document.createElement("div");s.classList.add("todo-item-container");const a=document.createElement("h2");a.textContent=this.todoItem.title;const d=document.createElement("div");d.classList.add("todoItemContent");const c=document.createElement("span");c.textContent="Project: ",d.appendChild(c);const l=document.createElement("a");l.href="#",l.textContent=r.name,l.addEventListener("click",(e=>{e.preventDefault(),o("ProjectDetail",r.id)})),c.appendChild(l);const p=document.createElement("select");p.name="project";for(let e of x()){const t=document.createElement("option");t.name="project",t.value=e.id,t.text=e.name,p.appendChild(t),e.id===this.todoItem.projectId&&(t.selected=!0)}p.addEventListener("change",(e=>{this.todoItem.projectId=Number(e.target.value),this.onItemChange()})),d.appendChild(p);const m=document.createElement("label");m.setAttribute("for","priority"),m.textContent="Priority",d.appendChild(m);const u=document.createElement("select");u.required=!0,u.name="priority",u.id="priority";for(const e of Object.keys(t.priorities)){const n=Number(e),r=document.createElement("option");r.name="priority",r.value=n,r.text=t.priorities[n],n===this.todoItem.priority&&(r.selected=!0),u.appendChild(r)}u.addEventListener("change",(e=>{this.todoItem.priority=Number(e.target.value),this.onItemChange()})),d.appendChild(u);const C=document.createElement("label");C.setAttribute("for","description"),C.textContent="Description";const h=document.createElement("input");h.value=this.todoItem.description,h.name="description",h.addEventListener("change",(e=>{this.todoItem.description=e.target.value,this.onItemChange()})),d.appendChild(C),d.appendChild(h);const b=document.createElement("label");b.setAttribute("for","dueDate"),b.textContent="Due Date",d.appendChild(b);const f=document.createElement("input");f.type="date",f.name="dueDate",f.value=U(this.todoItem.dueDate,{representation:"date"}),f.addEventListener("change",(e=>{this.todoItem.dueDate=new Date(e.target.value),console.log(this.todoItem.dueDate),this.onItemChange()})),d.appendChild(f);const I=document.createElement("span");I.textContent="Is completed";const v=new O(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));d.appendChild(I),d.appendChild(v);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-todoitem-button"),y.addEventListener("click",(t=>{!function(t){A.splice(i(A,t),1),e.publish("TodoItemsChanged")}(this.todoItem.id),e.publish("changePage",{page:"ProjectDetail",data:r.id})})),d.appendChild(y),s.appendChild(a),s.appendChild(d),s}onItemChange(){h(this.todoItem),o("TodoItemDetail",this.todoItem.id)}},Y=new class{getTodoItemsForProject(e){return m().filter((t=>t.projectId===e))}};var X=n(846),V={};V.styleTagTransform=Z(),V.setAttributes=D(),V.insert=j().bind(null,"head"),V.domAPI=k(),V.insertStyleElement=S(),y()(X.Z,V),X.Z&&X.Z.locals&&X.Z.locals;const J=new class{render(){const e=x(),t=document.createElement("div");t.classList.add("project-list-container");const n=document.createElement("h2");n.textContent="Projects",t.appendChild(n);for(let n of e){const e=document.createElement("a");e.href="#",e.addEventListener("click",(e=>this.onProjectLinkClick(e,n)));const r=document.createElement("div");r.classList.add("project-card");const o=document.createElement("h3");o.textContent=n.name;const i=document.createElement("span"),s=Y.getTodoItemsForProject(n.id).length;i.textContent=`Todo items: ${s}`,e.appendChild(r),r.appendChild(o),r.appendChild(i),t.appendChild(e)}return t}onProjectLinkClick(e,t){e.preventDefault(),console.log({project:t}),o("ProjectDetail",t.id)}};var _=n(9),G={};G.styleTagTransform=Z(),G.setAttributes=D(),G.insert=j().bind(null,"head"),G.domAPI=k(),G.insertStyleElement=S(),y()(_.Z,G),_.Z&&_.Z.locals&&_.Z.locals;const $=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),t=document.createElement("nav"),n=document.createElement("ul");n.classList.add("header-links");for(let e of this.pageLinks){const t=document.createElement("li");t.classList.add("header-link-item");const r=document.createElement("a");r.href="#",r.textContent=e.name,r.addEventListener("click",(t=>this.onHeaderLinkClick(t,e))),t.appendChild(r),n.appendChild(t)}t.appendChild(n);const r=document.createElement("div");r.classList.add("buttons-container");const i=document.createElement("button");i.classList.add("add-project-button"),i.textContent="Add Project",i.addEventListener("click",(e=>{o("AddProject")}));const s=document.createElement("button");return s.classList.add("add-todo-button"),s.textContent="Add Todo Item",s.addEventListener("click",(e=>{o("AddTodoItem")})),r.appendChild(i),r.appendChild(s),e.appendChild(t),e.appendChild(r),e}onHeaderLinkClick(t,n){t.preventDefault(),e.publish("changePage",{page:n.page})}};var K=n(464),Q={};Q.styleTagTransform=Z(),Q.setAttributes=D(),Q.insert=j().bind(null,"head"),Q.domAPI=k(),Q.insertStyleElement=S(),y()(K.Z,Q),K.Z&&K.Z.locals&&K.Z.locals;const ee=new class{mainLinks=[{title:"All items",callback:m},{title:"Today",callback:u},{title:"Upcoming",callback:C}];render(){const t=document.createElement("div");t.className="sidebar";const n=document.createElement("ul");n.className="sidebar-link-list";for(let t of this.mainLinks){const r=document.createElement("li");r.className="sidebar-link-item";const i=document.createElement("a");i.href="#";const s=document.createElement("span");s.textContent=t.title;const a=document.createElement("span");a.textContent=t.callback().filter((e=>!e.isComplete)).length,a.className="sidebar-link-item-number",e.subscribe("TodoItemsChanged",(()=>{a.textContent=t.callback().filter((e=>!e.isComplete)).length})),i.appendChild(s),i.appendChild(a),r.appendChild(i),r.addEventListener("click",(e=>{e.preventDefault(),o("TodoItemList",{title:t.title,callback:t.callback})})),n.appendChild(r)}const r=document.createElement("ul");r.className="sidebar-link-list";const i=document.createElement("li");i.classList.add("sidebar-link-list-header","sidebar-link-item");const s=document.createElement("a");s.href="#",s.text="Projects",i.appendChild(s),r.appendChild(i);for(let t of x()){const n=document.createElement("li");n.className="sidebar-link-item";const i=document.createElement("a");i.href="#";const s=document.createElement("span");s.textContent=t.name;const a=document.createElement("span");a.className="sidebar-link-item-number",a.textContent=Y.getTodoItemsForProject(t.id).filter((e=>!e.isComplete)).length,e.subscribe("TodoItemsChanged",(()=>{a.textContent=Y.getTodoItemsForProject(t.id).filter((e=>!e.isComplete)).length})),i.appendChild(s),i.appendChild(a),i.addEventListener("click",(e=>{e.preventDefault(),o("ProjectDetail",t.id)})),n.appendChild(i),r.appendChild(n)}return t.appendChild(n),t.appendChild(r),t}};var te=n(411),ne={};ne.styleTagTransform=Z(),ne.setAttributes=D(),ne.insert=j().bind(null,"head"),ne.domAPI=k(),ne.insertStyleElement=S(),y()(te.Z,ne),te.Z&&te.Z.locals&&te.Z.locals;const re=class{constructor(e){this.todoItems=e}render(){if(this.todoItems)return this.todoItemsList=document.createElement("ul"),this.todoItemsList.className="todo-items-list",this.renderListItems(),this.todoItemsList}renderListItems(){this.todoItems.sort(((e,t)=>{if(e.isComplete===t.isComplete){if(function(e,t){s(2,arguments);var n=d(e),r=d(t);return n.getTime()<r.getTime()}(e.dueDate,t.dueDate))return 1}else if(e.isComplete&&!t.isComplete)return 1}));for(let e of this.todoItems){const t=document.createElement("li"),n=new O(e.isComplete,(()=>{e.isComplete=!e.isComplete,h(e),this.todoItemsList.innerHTML="",this.renderListItems()}));t.appendChild(n);const r=document.createElement("div");r.className="todo-items-list-item-content";const i=document.createElement("span");i.textContent=e.title,r.appendChild(i);const s=document.createElement("span");s.textContent=U(e.dueDate,{representation:"date"}),r.appendChild(s),t.addEventListener("click",(n=>{console.log(n.target),(n.target===t||r.contains(n.target))&&o("TodoItemDetail",e.id)})),t.appendChild(r),this.todoItemsList.appendChild(t)}}};var oe=n(780),ie={};ie.styleTagTransform=Z(),ie.setAttributes=D(),ie.insert=j().bind(null,"head"),ie.domAPI=k(),ie.insertStyleElement=S(),y()(oe.Z,ie),oe.Z&&oe.Z.locals&&oe.Z.locals;const se=new class{render(t){const n=B(t),r=Y.getTodoItemsForProject(n.id),s=document.createElement("div");s.classList.add("project-detail");const a=document.createElement("h2");a.textContent=n.name||"Project Details",s.appendChild(a);const d=new re(r);s.appendChild(d.render());const c=document.createElement("button");return c.textContent="Delete Project",c.classList.add("delete-project-button"),("Default"===n.name||x().length<=1)&&(c.disabled=!0),c.addEventListener("click",(t=>{!function(t){f.splice(i(f,t),1),e.publish("ProjectChanged")}(n.id),o("ProjectList")})),s.appendChild(c),s}};var ae=n(528),de={};de.styleTagTransform=Z(),de.setAttributes=D(),de.insert=j().bind(null,"head"),de.domAPI=k(),de.insertStyleElement=S(),y()(ae.Z,de),ae.Z&&ae.Z.locals&&ae.Z.locals;const ce=new class{render(){const e=x(),n=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const s=document.createElement("input");s.required=!0,s.name="title",s.type="text",s.id="title",o.appendChild(s);const a=document.createElement("label");a.setAttribute("for","priority"),a.textContent="Priority",o.appendChild(a);const d=document.createElement("select");d.required=!0,d.name="priority",d.id="priority";for(let e of Object.keys(t.priorities)){const n=document.createElement("option");n.name="priority",n.value=e,n.text=t.priorities[e],d.appendChild(n)}o.appendChild(d);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const A=document.createElement("label");A.setAttribute("for","dueDate"),A.textContent="Due Date",o.appendChild(A);const p=document.createElement("input");p.required=!0,p.type="date",p.name="dueDate",p.id="dueDate",o.appendChild(p);const m=document.createElement("label");m.setAttribute("for","project"),m.textContent="Project";const u=document.createElement("select");u.required=!0,u.name="project",u.id="project";for(let t of e){const e=document.createElement("option");e.value=t.id,e.textContent=t.name,u.appendChild(e)}o.appendChild(u);const C=document.createElement("button");return C.type="submit",C.textContent="Add",o.appendChild(C),n.appendChild(r),n.appendChild(o),n}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();let n=new FormData(t);p(n.get("title"),n.get("priority"),n.get("description"),n.get("dueDate"),Number(n.get("project")))?t.reset():console.log("Error when creating new todo item")}},le=new class{render(){const e=document.createElement("div"),t=document.createElement("h2");t.textContent="Add Project";const n=document.createElement("form");n.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",n.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,n.appendChild(o);const i=document.createElement("button");return i.textContent="Add",n.appendChild(i),e.appendChild(t),e.appendChild(n),e}onFormSubmit(e){e.preventDefault();const t=e.target;if(!t.checkValidity())return void t.reportValidity();const n=new FormData(t);I(n.get("name"))&&o("ProjectList"),console.table(n)}},Ae=new class{render({title:e,callback:t}){console.log(e,t),this.todoItems=t();const n=document.createElement("div"),r=document.createElement("h2");r.textContent=e,n.appendChild(r);const o=new re(this.todoItems).render();return n.appendChild(o),n}};var pe=n(426),me={};me.styleTagTransform=Z(),me.setAttributes=D(),me.insert=j().bind(null,"head"),me.domAPI=k(),me.insertStyleElement=S(),y()(pe.Z,me),pe.Z&&pe.Z.locals&&pe.Z.locals,console.log("TodoList app loaded"),0===m().length&&(p("Test",1,"Test Description","2022-12-29"),p("Test2",1,"Test Description 2","2022-12-30")),console.table(m());const ue={TodoItemDetail:H,ProjectList:J,ProjectDetail:se,AddTodoItem:ce,AddProject:le,TodoItemList:Ae};e.subscribe("changePage",ge),document.body.appendChild($.render()),document.body.appendChild(ee.render());const Ce=document.createElement("div");function ge(e){console.log(e),e.page&&ue[e.page]&&(Ce.innerHTML="",Ce.appendChild(ue[e.page].render(e.data)))}Ce.classList.add("main-content"),document.body.appendChild(Ce),ge({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,