(()=>{var n={454:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".add-container {\r\n    position: relative;\r\n}\r\n\r\n.icon-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr min-content;\r\n}\r\n\r\n.add-icon {\r\n    height: 20px;\r\n    width: 20px;\r\n    align-self: center;\r\n    fill: #333;\r\n}\r\n\r\n.icon-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.chevron-icon {\r\n    height: 14px;\r\n    width: 14px;\r\n    align-self: end;\r\n    fill: #333;\r\n}\r\n\r\n.add-dropdown {\r\n    position: absolute;\r\n    top: 100%;\r\n    right: 25%;\r\n    width: max-content;\r\n    background-color: #fff;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.add-dropdown-list {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    margin: 0;\r\n    flex: 1;\r\n}\r\n\r\n.add-dropdown-list li {\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n}\r\n\r\n.add-dropdown-list li:hover {\r\n    background-color: #eee;\r\n}\r\n\r\n.add-dropdown-list a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/components/AddComponent.css"],names:[],mappings:"AAAA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,eAAe;IACf,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,kBAAkB;IAClB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,OAAO;AACX;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:[".add-container {\r\n    position: relative;\r\n}\r\n\r\n.icon-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr min-content;\r\n}\r\n\r\n.add-icon {\r\n    height: 20px;\r\n    width: 20px;\r\n    align-self: center;\r\n    fill: #333;\r\n}\r\n\r\n.icon-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.chevron-icon {\r\n    height: 14px;\r\n    width: 14px;\r\n    align-self: end;\r\n    fill: #333;\r\n}\r\n\r\n.add-dropdown {\r\n    position: absolute;\r\n    top: 100%;\r\n    right: 25%;\r\n    width: max-content;\r\n    background-color: #fff;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.add-dropdown-list {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    margin: 0;\r\n    flex: 1;\r\n}\r\n\r\n.add-dropdown-list li {\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n}\r\n\r\n.add-dropdown-list li:hover {\r\n    background-color: #eee;\r\n}\r\n\r\n.add-dropdown-list a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const d=s},110:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}\r\n\r\n.checkbox.critical {\r\n    background-color: rgb(253, 246, 246);\r\n    border: 1px solid rgb(255, 58, 58);\r\n}\r\n\r\n.checkbox.important {\r\n    background-color: rgb(253, 250, 245);\r\n    border: 1px solid rgb(255, 182, 25);\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B;;AAEA;IACI,oCAAoC;IACpC,kCAAkC;AACtC;;AAEA;IACI,oCAAoC;IACpC,mCAAmC;AACvC",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}\r\n\r\n.checkbox.critical {\r\n    background-color: rgb(253, 246, 246);\r\n    border: 1px solid rgb(255, 58, 58);\r\n}\r\n\r\n.checkbox.important {\r\n    background-color: rgb(253, 250, 245);\r\n    border: 1px solid rgb(255, 182, 25);\r\n}"],sourceRoot:""}]);const d=s},938:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".sidebar-link-item > a {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr 1fr;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n    align-items: center;\r\n    gap: 5px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}\r\n\r\n.sidebar-link-item-number {\r\n    background-color: #dedede;\r\n    padding: 2px 6px;\r\n    border-radius: 40%;\r\n    justify-self: end;\r\n    grid-column: 3;\r\n}\r\n\r\n.sidebar-link-item i {\r\n    height: 18px;\r\n    width: 18px;\r\n}\r\n\r\n.sidebar-link-item i > svg {\r\n    fill: #333;\r\n}","",{version:3,sources:["webpack://./src/components/SidebarLinkItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,0CAA0C;IAC1C,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,eAAe;IACf,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,kBAAkB;IAClB,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,UAAU;AACd",sourcesContent:[".sidebar-link-item > a {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr 1fr;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n    align-items: center;\r\n    gap: 5px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}\r\n\r\n.sidebar-link-item-number {\r\n    background-color: #dedede;\r\n    padding: 2px 6px;\r\n    border-radius: 40%;\r\n    justify-self: end;\r\n    grid-column: 3;\r\n}\r\n\r\n.sidebar-link-item i {\r\n    height: 18px;\r\n    width: 18px;\r\n}\r\n\r\n.sidebar-link-item i > svg {\r\n    fill: #333;\r\n}"],sourceRoot:""}]);const d=s},411:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li.checked {\r\n    background-color: #eee;\r\n    color: #555;\r\n}\r\n\r\n.todo-items-list li.checked .checkbox{\r\n    background-color: #eee;\r\n    border: 1px solid #777;\r\n    fill: #777;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/components/TodoItemsList.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;IACT,6BAA6B;IAC7B,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;IACtB,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,2BAA2B;AAC/B",sourcesContent:[".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li.checked {\r\n    background-color: #eee;\r\n    color: #555;\r\n}\r\n\r\n.todo-items-list li.checked .checkbox{\r\n    background-color: #eee;\r\n    border: 1px solid #777;\r\n    fill: #777;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n\r\n\r\n"],sourceRoot:""}]);const d=s},9:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}\r\n\r\n.logo-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    margin-left: 20px;\r\n}\r\n\r\n.logo-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.logo-text {\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n    color: #222;\r\n}\r\n\r\n.logo-icon {\r\n    width: 32px;\r\n    height: 32px;\r\n    fill: #222;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/header.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,UAAU;AACd",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}\r\n\r\n.logo-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    margin-left: 20px;\r\n}\r\n\r\n.logo-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.logo-text {\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n    color: #222;\r\n}\r\n\r\n.logo-icon {\r\n    width: 32px;\r\n    height: 32px;\r\n    fill: #222;\r\n}"],sourceRoot:""}]);const d=s},464:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./src/modules/Layout/sidebar.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,WAAW;;IAEX,yBAAyB;IACzB,4BAA4B;IAC5B,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB",sourcesContent:[".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n"],sourceRoot:""}]);const d=s},780:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,iDAAiD;AACrD;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}"],sourceRoot:""}]);const d=s},528:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const d=s},563:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,wCAAwC;AAC5C;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}"],sourceRoot:""}]);const d=s},426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;IACV,WAAW;IACX,aAAa;;IAEb,aAAa;IACb,gCAAgC;IAChC,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,cAAc;AAClB",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const d=s},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var d=0;d<this.length;d++){var a=this[d][0];null!=a&&(s[a]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},s=[],d=0;d<n.length;d++){var a=n[d],c=r.base?a[0]+r.base:a[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=t(A),m={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var u=o(m,r);r.byIndex=d,e.splice(d,0,{identifier:A,updater:u,references:1})}s.push(A)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<i.length;s++){var d=t(i[s]);e[d].references--}for(var a=r(n,o),c=0;c<i.length;c++){var l=t(i[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=a}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},428:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1"></path></svg>'},646:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z"></path></svg>'},586:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'},168:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"></path></svg>'},718:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 3H14.82C14.4 1.84 13.3 1 12 1S9.6 1.84 9.18 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M12 3C12.55 3 13 3.45 13 4S12.55 5 12 5 11 4.55 11 4 11.45 3 12 3M7 7H17V5H19V19H5V5H7V7M12 17V15H17V17H12M12 11V9H17V11H12M8 12V9H7V8H9V12H8M9.25 14C9.66 14 10 14.34 10 14.75C10 14.95 9.92 15.14 9.79 15.27L8.12 17H10V18H7V17.08L9 15H7V14H9.25"></path></svg>'},27:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M7 7H9V9H7V7M7 11H9V13H7V11M7 15H9V17H7V15M17 17H11V15H17V17M17 13H11V11H17V13M17 9H11V7H17V9Z"></path></svg>'},697:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"></path></svg>'}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";const n=new class{events={};publish(n,e){if(this.events[n])for(let t of this.events[n])t(e)}subscribe(n,e){this.events[n]||(this.events[n]=[]),this.events[n].push(e)}unsubscribe(n,e){this.events[n]&&this.events[n].remove(this.events[n].find((n=>n===e)))}};class e{constructor(n,e,t,r,o,i,s){this.id=n,this.title=e,this.priority=t,this.description=r,this.dueDate=o,this.isComplete=i||!1,this.projectId=s}static priorities={1:"Critical",2:"Important",3:"Default"}}function r(n){return 0===n.length?1:n.reduce(((n,e)=>n.id<e.id?e:n)).id+1}function o(e,t){n.publish("changePage",{page:e,data:t})}function i(n,e){return n.findIndex((n=>n.id===e))}function s(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function d(n){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},d(n)}function a(n){s(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===d(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function c(n){s(1,arguments);var e=a(n);return e.setHours(0,0,0,0),e}function l(n,e){s(2,arguments);var t=c(n),r=c(e);return t.getTime()===r.getTime()}const A=function(){const n=JSON.parse(localStorage.getItem("todoItems"));return!!n&&n.map((n=>new e(n.id,n.title,n.priority,n.description,new Date(n.dueDate),n.isComplete,Number(n.projectId))))}()||[];function p(t,o,i,s,d){const a=r(A);if(!(t&&o&&i&&s))return null;if(!Number(o))return null;s=new Date(s);const c=new e(a,t,Number(o),i,s,!1,d||1);return A.push(c),n.publish("TodoItemsChanged"),c}function m(){return A}function u(){return m().filter((n=>function(n){return s(1,arguments),l(n,Date.now())}(n.dueDate)))}function C(){return m().filter((n=>function(n){return s(1,arguments),a(n).getTime()>Date.now()}(n.dueDate)))}function g(n){return A.find((e=>e.id===n))}function h(e){g(e.id)&&(A[i(A,e.id)]=e,n.publish("TodoItemsChanged"))}n.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(A))}));class b{constructor(n,e){this.id=n,this.name=e}}const f=JSON.parse(localStorage.getItem("projects"))||[];function I(e){const t=r(f),o=new b(t,e);return f.push(o),n.publish("ProjectChanged"),o}function x(){return f}function B(n){return f.find((e=>e.id===n))}0===f.length&&I("Default"),n.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(f))}));var v=t(379),y=t.n(v),k=t(795),w=t.n(k),E=t(569),j=t.n(E),T=t(565),L=t.n(T),S=t(216),D=t.n(S),H=t(589),Z=t.n(H),V=t(563),M={};M.styleTagTransform=Z(),M.setAttributes=L(),M.insert=j().bind(null,"head"),M.domAPI=w(),M.insertStyleElement=D(),y()(V.Z,M),V.Z&&V.Z.locals&&V.Z.locals;var P=t(586),N=t.n(P),W=t(110),F={};F.styleTagTransform=Z(),F.setAttributes=L(),F.insert=j().bind(null,"head"),F.domAPI=w(),F.insertStyleElement=D(),y()(W.Z,F),W.Z&&W.Z.locals&&W.Z.locals;class U{constructor(n,e){return this.checked=n,this.callback=e,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){if(this.checked){const n=document.createElement("div");n.innerHTML=N(),this.checkboxDiv.appendChild(n.firstChild)}else this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}function q(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}function Y(n,e){var t,r;s(1,arguments);var o=a(n);if(isNaN(o.getTime()))throw new RangeError("Invalid time value");var i=String(null!==(t=null==e?void 0:e.format)&&void 0!==t?t:"extended"),d=String(null!==(r=null==e?void 0:e.representation)&&void 0!==r?r:"complete");if("extended"!==i&&"basic"!==i)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==d&&"time"!==d&&"complete"!==d)throw new RangeError("representation must be 'date', 'time', or 'complete'");var c="",l="",A="extended"===i?"-":"",p="extended"===i?":":"";if("time"!==d){var m=q(o.getDate(),2),u=q(o.getMonth()+1,2),C=q(o.getFullYear(),4);c="".concat(C).concat(A).concat(u).concat(A).concat(m)}if("date"!==d){var g=o.getTimezoneOffset();if(0!==g){var h=Math.abs(g),b=q(Math.floor(h/60),2),f=q(h%60,2),I=g<0?"+":"-";l="".concat(I).concat(b,":").concat(f)}else l="Z";var x=q(o.getHours(),2),B=q(o.getMinutes(),2),v=q(o.getSeconds(),2),y=""===c?"":"T",k=[x,B,v].join(p);c="".concat(c).concat(y).concat(k).concat(l)}return c}const R=new class{render(t){if(this.todoItem=g(t),!this.todoItem)return;const r=B(this.todoItem.projectId),s=document.createElement("div");s.classList.add("todo-item-container");const d=document.createElement("h2");d.textContent=this.todoItem.title;const a=document.createElement("div");a.classList.add("todoItemContent");const c=document.createElement("span");c.textContent="Project: ",a.appendChild(c);const l=document.createElement("a");l.href="#",l.textContent=r.name,l.addEventListener("click",(n=>{n.preventDefault(),o("ProjectDetail",r.id)})),c.appendChild(l);const p=document.createElement("select");p.name="project";for(let n of x()){const e=document.createElement("option");e.name="project",e.value=n.id,e.text=n.name,p.appendChild(e),n.id===this.todoItem.projectId&&(e.selected=!0)}p.addEventListener("change",(n=>{this.todoItem.projectId=Number(n.target.value),this.onItemChange()})),a.appendChild(p);const m=document.createElement("label");m.setAttribute("for","priority"),m.textContent="Priority",a.appendChild(m);const u=document.createElement("select");u.required=!0,u.name="priority",u.id="priority";for(const n of Object.keys(e.priorities)){const t=Number(n),r=document.createElement("option");r.name="priority",r.value=t,r.text=e.priorities[t],t===this.todoItem.priority&&(r.selected=!0),u.appendChild(r)}u.addEventListener("change",(n=>{this.todoItem.priority=Number(n.target.value),this.onItemChange()})),a.appendChild(u);const C=document.createElement("label");C.setAttribute("for","description"),C.textContent="Description";const h=document.createElement("input");h.value=this.todoItem.description,h.name="description",h.addEventListener("change",(n=>{this.todoItem.description=n.target.value,this.onItemChange()})),a.appendChild(C),a.appendChild(h);const b=document.createElement("label");b.setAttribute("for","dueDate"),b.textContent="Due Date",a.appendChild(b);const f=document.createElement("input");f.type="date",f.name="dueDate",f.value=Y(this.todoItem.dueDate,{representation:"date"}),f.addEventListener("change",(n=>{this.todoItem.dueDate=new Date(n.target.value),console.log(this.todoItem.dueDate),this.onItemChange()})),a.appendChild(f);const I=document.createElement("span");I.textContent="Is completed";const v=new U(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));a.appendChild(I),a.appendChild(v);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-todoitem-button"),y.addEventListener("click",(e=>{!function(e){A.splice(i(A,e),1),n.publish("TodoItemsChanged")}(this.todoItem.id),n.publish("changePage",{page:"ProjectDetail",data:r.id})})),a.appendChild(y),s.appendChild(d),s.appendChild(a),s}onItemChange(){h(this.todoItem),o("TodoItemDetail",this.todoItem.id)}};var O=t(454),z={};z.styleTagTransform=Z(),z.setAttributes=L(),z.insert=j().bind(null,"head"),z.domAPI=w(),z.insertStyleElement=D(),y()(O.Z,z),O.Z&&O.Z.locals&&O.Z.locals;var X=t(697),J=t.n(X),Q=t(168),_=t.n(Q);class G{links=[{name:"Add Todo Item",link:"AddTodoItem"},{name:"Add Project",link:"AddProject"}];render(){const n=document.createElement("div");n.className="add-container";const e=document.createElement("div");e.className="icon-container";const t=document.createElement("i");t.innerHTML=J(),t.className="add-icon";const r=document.createElement("i");r.innerHTML=_(),r.className="chevron-icon",e.appendChild(t),e.appendChild(r),n.appendChild(e);const i=document.createElement("div");i.className="add-dropdown",i.style.display="none";const s=document.createElement("ul");s.className="add-dropdown-list";for(let n of this.links){const e=document.createElement("li"),t=document.createElement("a");t.href="",t.text=n.name,t.addEventListener("click",(e=>{e.preventDefault(),o(n.link),i.style.display="none"})),e.appendChild(t),s.appendChild(e)}return i.appendChild(s),document.addEventListener("click",(e=>{n.contains(e.target)||"none"===i.style.display||(i.style.display="none")})),e.addEventListener("click",(n=>{"none"===i.style.display?i.style.display="block":i.style.display="none"})),n.appendChild(i),n}}var $=t(718),K=t.n($),nn=t(9),en={};en.styleTagTransform=Z(),en.setAttributes=L(),en.insert=j().bind(null,"head"),en.domAPI=w(),en.insertStyleElement=D(),y()(nn.Z,en),nn.Z&&nn.Z.locals&&nn.Z.locals;const tn=new class{render(){const n=document.createElement("header"),e=document.createElement("div");e.className="logo-container";const t=document.createElement("i");t.className="logo-icon",t.innerHTML=K(),e.appendChild(t);const r=document.createElement("span");r.textContent="Odin Todo-List",r.className="logo-text",e.appendChild(r),e.addEventListener("click",(n=>{o("TodoItemList",{title:"All items",callback:m})})),n.appendChild(e);const i=document.createElement("div");i.classList.add("buttons-container");const s=new G;return i.appendChild(s.render()),n.appendChild(i),n}onHeaderLinkClick(e,t){e.preventDefault(),n.publish("changePage",{page:t.page})}},rn=new class{getTodoItemsForProject(n){return m().filter((e=>e.projectId===n))}};var on=t(464),sn={};sn.styleTagTransform=Z(),sn.setAttributes=L(),sn.insert=j().bind(null,"head"),sn.domAPI=w(),sn.insertStyleElement=D(),y()(on.Z,sn),on.Z&&on.Z.locals&&on.Z.locals;var dn=t(938),an={};an.styleTagTransform=Z(),an.setAttributes=L(),an.insert=j().bind(null,"head"),an.domAPI=w(),an.insertStyleElement=D(),y()(dn.Z,an),dn.Z&&dn.Z.locals&&dn.Z.locals;class cn{constructor(n,e,t,r){this.title=n,this.callback=e,this.icon=t,this.projectId=r}render(){const e=document.createElement("li");e.className="sidebar-link-item";const t=document.createElement("a");t.href="#";const r=document.createElement("span");if(r.textContent=this.title,this.icon){const n=document.createElement("i");n.innerHTML=this.icon,t.appendChild(n)}const i=document.createElement("span");return i.className="sidebar-link-item-number",i.textContent=this.callback().filter((n=>!n.isComplete)).length,n.subscribe("TodoItemsChanged",(()=>{i.textContent=this.callback().filter((n=>!n.isComplete)).length})),t.append(r,i),e.appendChild(t),e.addEventListener("click",(n=>{n.preventDefault(),this.projectId?o("ProjectDetail",this.projectId):o("TodoItemList",{title:this.title,callback:this.callback})})),e}}var ln=t(27),An=t.n(ln),pn=t(428),mn=t.n(pn),un=t(646),Cn=t.n(un);const gn=new class{mainLinks=[{title:"All items",callback:m,icon:An()},{title:"Today",callback:u,icon:mn()},{title:"Upcoming",callback:C,icon:Cn()}];render(){const e=document.createElement("div");e.className="sidebar";const t=document.createElement("ul");t.className="sidebar-link-list";for(let n of this.mainLinks){const e=new cn(n.title,n.callback,n.icon||null).render();t.appendChild(e)}const r=document.createElement("ul");return r.className="sidebar-link-list",this.createProjectList(r),n.subscribe("ProjectChanged",(()=>{r.innerHTML="",this.createProjectList(r)})),e.appendChild(t),e.appendChild(r),e}createProjectList(n){const e=document.createElement("li");e.classList.add("sidebar-link-list-header","sidebar-link-item");const t=document.createElement("a");t.href="#",t.text="Projects",e.appendChild(t),n.appendChild(e),this.addProjectLinks(n)}addProjectLinks(n){for(let e of x()){const t=new cn(e.name,(()=>rn.getTodoItemsForProject(e.id)),null,e.id).render();n.appendChild(t)}}};var hn=t(411),bn={};function fn(n,e){s(2,arguments);var t=a(n),r=a(e);return t.getTime()<r.getTime()}bn.styleTagTransform=Z(),bn.setAttributes=L(),bn.insert=j().bind(null,"head"),bn.domAPI=w(),bn.insertStyleElement=D(),y()(hn.Z,bn),hn.Z&&hn.Z.locals&&hn.Z.locals;const In=class{constructor(n){this.todoItems=n}render(){if(this.todoItems)return this.todoItemsList=document.createElement("ul"),this.todoItemsList.className="todo-items-list",this.renderListItems(),this.todoItemsList}renderListItems(){this.todoItems.sort(((n,e)=>{if(n.isComplete===e.isComplete&&!1===n.isComplete){if(n.priority!==e.priority)return n.priority-e.priority;if(fn(n.dueDate,e.dueDate))return 1}else if(n.isComplete===e.isComplete&&!0===n.isComplete){if(fn(n.dueDate,e.dueDate))return 1}else if(n.isComplete&&!e.isComplete)return 1}));for(let n of this.todoItems){const t=document.createElement("li");n.isComplete&&t.classList.add("checked");const r=new U(n.isComplete,(()=>{n.isComplete=!n.isComplete,h(n),this.todoItemsList.innerHTML="",this.renderListItems()}));r.classList.add(`${e.priorities[n.priority].toLowerCase()}`),t.appendChild(r);const i=document.createElement("div");i.className="todo-items-list-item-content";const s=document.createElement("span");s.textContent=n.title,i.appendChild(s);const d=document.createElement("span");d.textContent=Y(n.dueDate,{representation:"date"}),i.appendChild(d),t.addEventListener("click",(e=>{console.log(e.target),(e.target===t||i.contains(e.target))&&o("TodoItemDetail",n.id)})),t.appendChild(i),this.todoItemsList.appendChild(t)}}};var xn=t(780),Bn={};Bn.styleTagTransform=Z(),Bn.setAttributes=L(),Bn.insert=j().bind(null,"head"),Bn.domAPI=w(),Bn.insertStyleElement=D(),y()(xn.Z,Bn),xn.Z&&xn.Z.locals&&xn.Z.locals;const vn=new class{render(e){const t=B(e),r=rn.getTodoItemsForProject(t.id),s=document.createElement("div");s.classList.add("project-detail");const d=document.createElement("h2");d.textContent=t.name||"Project Details",s.appendChild(d);const a=new In(r);s.appendChild(a.render());const c=document.createElement("button");return c.textContent="Delete Project",c.classList.add("delete-project-button"),("Default"===t.name||x().length<=1)&&(c.disabled=!0),c.addEventListener("click",(e=>{!function(e){f.splice(i(f,e),1),n.publish("ProjectChanged")}(t.id),o("TodoItemList",{title:"All items",callback:m})})),s.appendChild(c),s}};var yn=t(528),kn={};kn.styleTagTransform=Z(),kn.setAttributes=L(),kn.insert=j().bind(null,"head"),kn.domAPI=w(),kn.insertStyleElement=D(),y()(yn.Z,kn),yn.Z&&yn.Z.locals&&yn.Z.locals;const wn=new class{render(){const n=x(),t=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const s=document.createElement("input");s.required=!0,s.name="title",s.type="text",s.id="title",o.appendChild(s);const d=document.createElement("label");d.setAttribute("for","priority"),d.textContent="Priority",o.appendChild(d);const a=document.createElement("select");a.required=!0,a.name="priority",a.id="priority";for(let n of Object.keys(e.priorities)){const t=document.createElement("option");t.name="priority",t.value=n,t.text=e.priorities[n],a.appendChild(t)}o.appendChild(a);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const A=document.createElement("label");A.setAttribute("for","dueDate"),A.textContent="Due Date",o.appendChild(A);const p=document.createElement("input");p.required=!0,p.type="date",p.name="dueDate",p.id="dueDate",o.appendChild(p);const m=document.createElement("label");m.setAttribute("for","project"),m.textContent="Project";const u=document.createElement("select");u.required=!0,u.name="project",u.id="project";for(let e of n){const n=document.createElement("option");n.value=e.id,n.textContent=e.name,u.appendChild(n)}o.appendChild(u);const C=document.createElement("button");return C.type="submit",C.textContent="Add",o.appendChild(C),t.appendChild(r),t.appendChild(o),t}onFormSubmit(n){n.preventDefault();const e=n.target;if(!e.checkValidity())return void e.reportValidity();let t=new FormData(e);p(t.get("title"),t.get("priority"),t.get("description"),t.get("dueDate"),Number(t.get("project")))?e.reset():console.log("Error when creating new todo item")}},En=new class{render(){const n=document.createElement("div"),e=document.createElement("h2");e.textContent="Add Project";const t=document.createElement("form");t.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",t.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,t.appendChild(o);const i=document.createElement("button");return i.textContent="Add",t.appendChild(i),n.appendChild(e),n.appendChild(t),n}onFormSubmit(n){n.preventDefault();const e=n.target;if(!e.checkValidity())return void e.reportValidity();const t=new FormData(e),r=I(t.get("name"));r&&o("ProjectDetail",r.id),console.table(t)}},jn=new class{render({title:n,callback:e}){this.todoItems=e();const t=document.createElement("div"),r=document.createElement("h2");r.textContent=n,t.appendChild(r);const o=new In(this.todoItems).render();return t.appendChild(o),t}};var Tn=t(426),Ln={};Ln.styleTagTransform=Z(),Ln.setAttributes=L(),Ln.insert=j().bind(null,"head"),Ln.domAPI=w(),Ln.insertStyleElement=D(),y()(Tn.Z,Ln),Tn.Z&&Tn.Z.locals&&Tn.Z.locals,console.log("TodoList app loaded"),0===m().length&&(p("Test",1,"Test Description","2022-12-29"),p("Test2",1,"Test Description 2","2022-12-30")),console.table(m());const Sn={TodoItemDetail:R,ProjectDetail:vn,AddTodoItem:wn,AddProject:En,TodoItemList:jn};n.subscribe("changePage",Hn),document.body.appendChild(tn.render()),document.body.appendChild(gn.render());const Dn=document.createElement("div");function Hn(n){console.log(n),n.page&&Sn[n.page]&&(Dn.innerHTML="",Dn.appendChild(Sn[n.page].render(n.data)))}Dn.classList.add("main-content"),document.body.appendChild(Dn),Hn({page:"TodoItemList",data:{title:"All items",callback:m}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,