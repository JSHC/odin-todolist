(()=>{var e={110:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}"],sourceRoot:""}]);const d=s},411:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./src/components/TodoItemsList.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;IACT,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,2BAA2B;IAC3B,eAAe;AACnB",sourcesContent:[".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const d=s},9:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    box-shadow: 0 3px 5px #aaa;\r\n\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/header.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,0BAA0B;;IAE1B,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    box-shadow: 0 3px 5px #aaa;\r\n\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const d=s},464:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n.sidebar-link-item > a {\r\n    display: block;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    display: block;\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/sidebar.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,WAAW;;IAEX,yBAAyB;IACzB,4BAA4B;IAC5B,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:[".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n.sidebar-link-item > a {\r\n    display: block;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    display: block;\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}"],sourceRoot:""}]);const d=s},780:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,iDAAiD;AACrD;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}"],sourceRoot:""}]);const d=s},846:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectList.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sDAAsD;IACtD,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:[".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}"],sourceRoot:""}]);const d=s},528:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const d=s},563:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,wCAAwC;AAC5C;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}"],sourceRoot:""}]);const d=s},426:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([e.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #E8F0F2;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD;;AAEA;IACI,yBAAyB;IACzB,SAAS;IACT,UAAU;IACV,WAAW;IACX,aAAa;;IAEb,aAAa;IACb,gCAAgC;IAChC,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,cAAc;AAClB",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #E8F0F2;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const d=s},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var d=0;d<this.length;d++){var a=this[d][0];null!=a&&(s[a]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},s=[],d=0;d<e.length;d++){var a=e[d],c=r.base?a[0]+r.base:a[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=t(A),m={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var u=o(m,r);r.byIndex=d,n.splice(d,0,{identifier:A,updater:u,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var d=t(i[s]);n[d].references--}for(var a=r(e,o),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=a}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},586:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{"use strict";const e=new class{events={};publish(e,n){if(console.log(`publish called for event ${e} with data ${JSON.stringify(n)}`),this.events[e])for(let t of this.events[e])console.log(`calling ${t} for ${e}`),t(n)}subscribe(e,n){console.log(`subscribe: ${e}, ${n}`),this.events[e]||(this.events[e]=[]),this.events[e].push(n),console.log(`${n} subscribed to ${e}`)}unsubscribe(e,n){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===n)))}};class n{constructor(e,n,t,r,o,i){this.id=e,this.title=n,this.priority=t,this.description=r,this.dueDate=o,this.isComplete=!1,this.projectId=i}static priorities={1:"Critical",2:"Important",3:"Default"}}function r(e){return 0===e.length?1:e.reduce(((e,n)=>e.id<n.id?n:e)).id+1}function o(n,t){e.publish("changePage",{page:n,data:t})}function i(e,n){return e.findIndex((e=>e.id===n))}const s=JSON.parse(localStorage.getItem("todoItems"))||[];function d(t,o,i,d,a){const c=r(s);if(!(t&&o&&i&&d))return null;if(!Number(o))return null;const l=new n(c,t,Number(o),i,d,a||1);return s.push(l),e.publish("TodoItemsChanged"),l}function a(){return s}function c(e){return s.find((n=>n.id===e))}function l(n){c(n.id)&&(s[i(s,n.id)]=n,e.publish("TodoItemsChanged"))}e.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(s))}));class A{constructor(e,n){this.id=e,this.name=n}}const p=JSON.parse(localStorage.getItem("projects"))||[];function m(n){const t=r(p),o=new A(t,n);return p.push(o),e.publish("ProjectChanged"),o}function u(){return p}function C(e){return p.find((n=>n.id===e))}0===p.length&&m("Default"),e.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(p))}));var g=t(379),h=t.n(g),b=t(795),I=t.n(b),f=t(569),x=t.n(f),B=t(565),v=t.n(B),y=t(216),E=t.n(y),k=t(589),j=t.n(k),w=t(563),T={};T.styleTagTransform=j(),T.setAttributes=v(),T.insert=x().bind(null,"head"),T.domAPI=I(),T.insertStyleElement=E(),h()(w.Z,T),w.Z&&w.Z.locals&&w.Z.locals;var L=t(586),S=t.n(L),D=t(110),P={};P.styleTagTransform=j(),P.setAttributes=v(),P.insert=x().bind(null,"head"),P.domAPI=I(),P.insertStyleElement=E(),h()(D.Z,P),D.Z&&D.Z.locals&&D.Z.locals;class Z{constructor(e,n){return this.checked=e,this.callback=n,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){if(this.checked){const e=document.createElement("div");e.innerHTML=S(),this.checkboxDiv.appendChild(e.firstChild)}else this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}const F=new class{render(t){if(this.todoItem=c(t),!this.todoItem)return;const r=C(this.todoItem.projectId),d=document.createElement("div");d.classList.add("todo-item-container");const a=document.createElement("h2");a.textContent=this.todoItem.title;const l=document.createElement("div");l.classList.add("todoItemContent");const A=document.createElement("span");A.textContent="Project: ",l.appendChild(A);const p=document.createElement("a");p.href="#",p.textContent=r.name,p.addEventListener("click",(e=>{e.preventDefault(),o("ProjectDetail",r.id)})),A.appendChild(p);const m=document.createElement("select");m.name="project";for(let e of u()){const n=document.createElement("option");n.name="project",n.value=e.id,n.text=e.name,m.appendChild(n),e.id===this.todoItem.projectId&&(n.selected=!0)}m.addEventListener("change",(e=>{this.todoItem.projectId=Number(e.target.value),this.onItemChange()})),l.appendChild(m);const g=document.createElement("label");g.setAttribute("for","priority"),g.textContent="Priority",l.appendChild(g);const h=document.createElement("select");h.required=!0,h.name="priority",h.id="priority";for(const e of Object.keys(n.priorities)){const t=Number(e),r=document.createElement("option");r.name="priority",r.value=t,r.text=n.priorities[t],t===this.todoItem.priority&&(r.selected=!0),h.appendChild(r)}h.addEventListener("change",(e=>{this.todoItem.priority=Number(e.target.value),this.onItemChange()})),l.appendChild(h);const b=document.createElement("label");b.setAttribute("for","description"),b.textContent="Description";const I=document.createElement("input");I.value=this.todoItem.description,I.name="description",I.addEventListener("change",(e=>{this.todoItem.description=e.target.value,this.onItemChange()})),l.appendChild(b),l.appendChild(I);const f=document.createElement("label");f.setAttribute("for","dueDate"),f.textContent="Due Date",l.appendChild(f);const x=document.createElement("input");x.type="date",x.name="dueDate",x.value=this.todoItem.dueDate,x.addEventListener("change",(e=>{this.todoItem.dueDate=e.target.value,this.onItemChange()})),l.appendChild(x);const B=document.createElement("span");B.textContent="Is completed";const v=new Z(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));l.appendChild(B),l.appendChild(v);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-todoitem-button"),y.addEventListener("click",(n=>{!function(n){s.splice(i(s,n),1),e.publish("TodoItemsChanged")}(this.todoItem.id),e.publish("changePage",{page:"ProjectDetail",data:r.id})})),l.appendChild(y),d.appendChild(a),d.appendChild(l),d}onItemChange(){l(this.todoItem),o("TodoItemDetail",this.todoItem.id)}},W=new class{getTodoItemsForProject(e){return a().filter((n=>n.projectId===e))}};var N=t(846),q={};q.styleTagTransform=j(),q.setAttributes=v(),q.insert=x().bind(null,"head"),q.domAPI=I(),q.insertStyleElement=E(),h()(N.Z,q),N.Z&&N.Z.locals&&N.Z.locals;const M=new class{render(){const e=u(),n=document.createElement("div");n.classList.add("project-list-container");const t=document.createElement("h2");t.textContent="Projects",n.appendChild(t);for(let t of e){const e=document.createElement("a");e.href="#",e.addEventListener("click",(e=>this.onProjectLinkClick(e,t)));const r=document.createElement("div");r.classList.add("project-card");const o=document.createElement("h3");o.textContent=t.name;const i=document.createElement("span"),s=W.getTodoItemsForProject(t.id).length;i.textContent=`Todo items: ${s}`,e.appendChild(r),r.appendChild(o),r.appendChild(i),n.appendChild(e)}return n}onProjectLinkClick(e,n){e.preventDefault(),console.log({project:n}),o("ProjectDetail",n.id)}};var R=t(9),U={};U.styleTagTransform=j(),U.setAttributes=v(),U.insert=x().bind(null,"head"),U.domAPI=I(),U.insertStyleElement=E(),h()(R.Z,U),R.Z&&R.Z.locals&&R.Z.locals;const z=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),n=document.createElement("nav"),t=document.createElement("ul");t.classList.add("header-links");for(let e of this.pageLinks){const n=document.createElement("li");n.classList.add("header-link-item");const r=document.createElement("a");r.href="#",r.textContent=e.name,r.addEventListener("click",(n=>this.onHeaderLinkClick(n,e))),n.appendChild(r),t.appendChild(n)}n.appendChild(t);const r=document.createElement("div");r.classList.add("buttons-container");const i=document.createElement("button");i.classList.add("add-project-button"),i.textContent="Add Project",i.addEventListener("click",(e=>{o("AddProject")}));const s=document.createElement("button");return s.classList.add("add-todo-button"),s.textContent="Add Todo Item",s.addEventListener("click",(e=>{o("AddTodoItem")})),r.appendChild(i),r.appendChild(s),e.appendChild(n),e.appendChild(r),e}onHeaderLinkClick(n,t){n.preventDefault(),e.publish("changePage",{page:t.page})}};var O=t(464),X={};X.styleTagTransform=j(),X.setAttributes=v(),X.insert=x().bind(null,"head"),X.domAPI=I(),X.insertStyleElement=E(),h()(O.Z,X),O.Z&&O.Z.locals&&O.Z.locals;const Y=new class{mainLinks=["All items","Today","Upcoming"];render(){const e=document.createElement("div");e.className="sidebar";const n=document.createElement("ul");n.className="sidebar-link-list";for(let e of this.mainLinks){const t=document.createElement("li");t.className="sidebar-link-item";const r=document.createElement("a");r.href="#",r.text=e,t.appendChild(r),n.appendChild(t)}const t=document.createElement("ul");t.className="sidebar-link-list";const r=document.createElement("li");r.classList.add("sidebar-link-list-header","sidebar-link-item");const i=document.createElement("a");i.href="#",i.text="Projects",r.appendChild(i),t.appendChild(r);for(let e of u()){const n=document.createElement("li");n.className="sidebar-link-item";const r=document.createElement("a");r.href="#",r.text=e.name,r.addEventListener("click",(n=>{n.preventDefault(),o("ProjectDetail",e.id)})),n.appendChild(r),t.appendChild(n)}return e.appendChild(n),e.appendChild(t),e}};var H=t(411),$={};$.styleTagTransform=j(),$.setAttributes=v(),$.insert=x().bind(null,"head"),$.domAPI=I(),$.insertStyleElement=E(),h()(H.Z,$),H.Z&&H.Z.locals&&H.Z.locals;var J=t(780),V={};V.styleTagTransform=j(),V.setAttributes=v(),V.insert=x().bind(null,"head"),V.domAPI=I(),V.insertStyleElement=E(),h()(J.Z,V),J.Z&&J.Z.locals&&J.Z.locals;const _=new class{render(n){const t=C(n),r=W.getTodoItemsForProject(t.id),s=document.createElement("div");s.classList.add("project-detail");const d=document.createElement("h2");d.textContent=t.name||"Project Details",s.appendChild(d);const a=new class{constructor(e){this.todoItems=e}render(){if(!this.todoItems)return;const e=document.createElement("ul");e.className="todo-items-list";for(let n of this.todoItems){const t=document.createElement("li"),r=new Z(n.isComplete,(()=>{n.isComplete=!n.isComplete,l(n)}));t.appendChild(r);const i=document.createElement("div");i.className="todo-items-list-item-content",i.addEventListener("click",(()=>{o("TodoItemDetail",n.id)}));const s=document.createElement("span");s.textContent=n.title,i.appendChild(s);const d=document.createElement("span");d.textContent=n.dueDate,i.appendChild(d),t.appendChild(i),e.appendChild(t)}return e}}(r);s.appendChild(a.render());const c=document.createElement("button");return c.textContent="Delete Project",c.classList.add("delete-project-button"),("Default"===t.name||u().length<=1)&&(c.disabled=!0),c.addEventListener("click",(n=>{!function(n){p.splice(i(p,n),1),e.publish("ProjectChanged")}(t.id),o("ProjectList")})),s.appendChild(c),s}};var G=t(528),K={};K.styleTagTransform=j(),K.setAttributes=v(),K.insert=x().bind(null,"head"),K.domAPI=I(),K.insertStyleElement=E(),h()(G.Z,K),G.Z&&G.Z.locals&&G.Z.locals;const Q=new class{render(){const e=u(),t=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const s=document.createElement("input");s.required=!0,s.name="title",s.type="text",s.id="title",o.appendChild(s);const d=document.createElement("label");d.setAttribute("for","priority"),d.textContent="Priority",o.appendChild(d);const a=document.createElement("select");a.required=!0,a.name="priority",a.id="priority";for(let e of Object.keys(n.priorities)){const t=document.createElement("option");t.name="priority",t.value=e,t.text=n.priorities[e],a.appendChild(t)}o.appendChild(a);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const A=document.createElement("label");A.setAttribute("for","dueDate"),A.textContent="Due Date",o.appendChild(A);const p=document.createElement("input");p.required=!0,p.type="date",p.name="dueDate",p.id="dueDate",o.appendChild(p);const m=document.createElement("label");m.setAttribute("for","project"),m.textContent="Project";const C=document.createElement("select");C.required=!0,C.name="project",C.id="project";for(let n of e){const e=document.createElement("option");e.value=n.id,e.textContent=n.name,C.appendChild(e)}o.appendChild(C);const g=document.createElement("button");return g.type="submit",g.textContent="Add",o.appendChild(g),t.appendChild(r),t.appendChild(o),t}onFormSubmit(e){e.preventDefault();const n=e.target;if(!n.checkValidity())return void n.reportValidity();let t=new FormData(n);d(t.get("title"),t.get("priority"),t.get("description"),t.get("dueDate"),Number(t.get("project")))?n.reset():console.log("Error when creating new todo item")}},ee=new class{render(){const e=document.createElement("div"),n=document.createElement("h2");n.textContent="Add Project";const t=document.createElement("form");t.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",t.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,t.appendChild(o);const i=document.createElement("button");return i.textContent="Add",t.appendChild(i),e.appendChild(n),e.appendChild(t),e}onFormSubmit(e){e.preventDefault();const n=e.target;if(!n.checkValidity())return void n.reportValidity();const t=new FormData(n);m(t.get("name"))&&o("ProjectList"),console.table(t)}};var ne=t(426),te={};te.styleTagTransform=j(),te.setAttributes=v(),te.insert=x().bind(null,"head"),te.domAPI=I(),te.insertStyleElement=E(),h()(ne.Z,te),ne.Z&&ne.Z.locals&&ne.Z.locals,console.log("TodoList app loaded"),0===a().length&&(d("Test",1,"Test Description","2022-12-29"),d("Test2",1,"Test Description 2","2022-12-30")),console.table(a());const re={TodoItemDetail:F,ProjectList:M,ProjectDetail:_,AddTodoItem:Q,AddProject:ee};e.subscribe("changePage",ie),document.body.appendChild(z.render()),document.body.appendChild(Y.render());const oe=document.createElement("div");function ie(e){console.log(e),e.page&&re[e.page]&&(oe.innerHTML="",oe.appendChild(re[e.page].render(e.data)))}oe.classList.add("main-content"),document.body.appendChild(oe),ie({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,