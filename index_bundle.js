(()=>{"use strict";var e={953:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n}\r\n\r\n.add-todo-button {\r\n    justify-self: end;\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    margin-right: 4rem;\r\n    border: none;\r\n    padding: 10px 30px;\r\n    background-color: #0099ff;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n}\r\n\r\n.add-todo-button:hover {\r\n    cursor: pointer;\r\n    background-color: #37afff;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/style.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;IACzB,WAAW;IACX,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n}\r\n\r\n.add-todo-button {\r\n    justify-self: end;\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    margin-right: 4rem;\r\n    border: none;\r\n    padding: 10px 30px;\r\n    background-color: #0099ff;\r\n    color: #fff;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n}\r\n\r\n.add-todo-button:hover {\r\n    cursor: pointer;\r\n    background-color: #37afff;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],d=r.base?s[0]+r.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var p=n(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var f=o(m,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:f,references:1})}c.push(u)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=new class{events={};publish(e,t){if(console.log(`publish called for event ${e} with data ${JSON.stringify(t)}`),this.events[e])for(let n of this.events[e])console.log(`calling ${n} for ${e}`),n(t)}subscribe(e,t){console.log(`subscribe: ${e}, ${t}`),this.events[e]||(this.events[e]=[]),this.events[e].push(t),console.log(`${t} subscribed to ${e}`)}unsubscribe(e,t){this.events[e]&&this.events[e].remove(this.events[e].find((e=>e===t)))}};class t{constructor(e,t,n,r,o){this.id=e,this.title=t,this.description=n,this.dueDate=r,this.isComplete=!1,this.projectId=o||1}}function r(t,n){e.publish("changePage",{page:t,data:n})}const o=[];function a(e,n,r){const a=0===(c=o).length?1:c.reduce(((e,t)=>e.id<t.value?t:e)).id+1;var c;const i=new t(a,e,n,r);return o.push(i),i}function c(){return o}const i=[new class{constructor(e,t){this.id=e,this.name=t}}(1,"Default")];function s(){return i}function d(e){return i.find((t=>t.id===e))}const l=new class{getProjectById(e){return d(e)}getTodoItemsForProject(e){return c().filter((t=>t.projectId===e))}},u=new class{render(t){const n=function(e){return o.find((t=>t.id===e))}(t);if(!n)return;const a=l.getProjectById(n.projectId),c=document.createElement("div"),i=document.createElement("h2");i.textContent=n.title;const s=document.createElement("div"),d=document.createElement("div");d.textContent="Project: ";const u=document.createElement("a");u.href="#",u.textContent=a.name,u.addEventListener("click",(e=>{e.preventDefault(),r("ProjectDetail",a.id)})),d.appendChild(u),s.appendChild(d);const p=document.createElement("div");p.textContent=n.description,s.appendChild(p);const m=document.createElement("div");m.textContent=n.dueDate,s.appendChild(m);const f=document.createElement("div");f.textContent=n.isComplete,s.appendChild(f);const h=document.createElement("button");return h.textContent="Delete",h.classList.add("delete-button"),h.addEventListener("click",(t=>{(function(e){o.splice(function(e){return o.findIndex((t=>t.id===e))}(e),1)})(n.id),e.publish("changePage",{page:"ProjectDetail",data:a.id})})),s.appendChild(h),c.appendChild(i),c.appendChild(s),c}},p=new class{render(){const e=s(),t=document.createElement("div");t.classList.add("project-list-container");const n=document.createElement("h2");n.textContent="Projects";const r=document.createElement("ul");r.classList.add("project-list");for(let t of e){const e=document.createElement("li");e.classList.add("project-list-item");const n=document.createElement("a");n.href="#",n.textContent=t.name,n.addEventListener("click",(e=>this.onProjectLinkClick(e,t))),e.appendChild(n),r.appendChild(e)}return t.appendChild(n),t.appendChild(r),t}onProjectLinkClick(e,t){e.preventDefault(),console.log({project:t}),r("ProjectDetail",1)}};var m=n(379),f=n.n(m),h=n(795),A=n.n(h),v=n(569),C=n.n(v),g=n(565),b=n.n(g),y=n(216),I=n.n(y),E=n(589),B=n.n(E),j=n(953),x={};x.styleTagTransform=B(),x.setAttributes=b(),x.insert=C().bind(null,"head"),x.domAPI=A(),x.insertStyleElement=I(),f()(j.Z,x),j.Z&&j.Z.locals&&j.Z.locals;const L=new class{pageLinks=[{name:"Projects",page:"ProjectList"}];render(){const e=document.createElement("header"),t=document.createElement("nav"),n=document.createElement("ul");n.classList.add("header-links");for(let e of this.pageLinks){const t=document.createElement("li");t.classList.add("header-link-item");const r=document.createElement("a");r.href="#",r.textContent=e.name,r.addEventListener("click",(t=>this.onHeaderLinkClick(t,e))),t.appendChild(r),n.appendChild(t)}t.appendChild(n);const o=document.createElement("button");return o.classList.add("add-todo-button"),o.textContent="Add Todo Item",o.addEventListener("click",r("AddTodoItem")),e.appendChild(t),e.appendChild(o),e}onHeaderLinkClick(t,n){t.preventDefault(),e.publish("changePage",{page:n.page})}},k=new class{render(e){const t=d(e),n=l.getTodoItemsForProject(e);console.table(n);const o=document.createElement("div");o.classList.add("project-detail");const a=document.createElement("h2");a.textContent=t.name||"Project Details",o.appendChild(a);const c=document.createElement("div");c.classList.add("todo-items-container");for(let e of n){const t=document.createElement("div");t.classList.add("todo-item");const n=document.createElement("a");n.href="#",n.addEventListener("click",(t=>{t.preventDefault(),r("TodoItemDetail",e.id)}));const o=document.createElement("h3");o.textContent=e.title,n.appendChild(o),t.appendChild(n);const a=document.createElement("div");a.textContent=`Due date: ${e.dueDate}`,t.appendChild(a),c.appendChild(t)}return o.appendChild(c),o}};console.log("TodoList app loaded"),a("Test","Test Description","2022-12-29"),a("Test2","Test Description 2","2022-12-30"),console.table(c());const P={TodoItemDetail:u,ProjectList:p,ProjectDetail:k};e.subscribe("changePage",T),document.body.appendChild(L.render());const w=document.createElement("div");function T(e){console.log(e),e.page&&P[e.page]&&(w.innerHTML="",w.appendChild(P[e.page].render(e.data)))}w.classList.add("main-content"),document.body.appendChild(w),T({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,