(()=>{var n={454:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".add-container {\r\n    position: relative;\r\n}\r\n\r\n.icon-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr min-content;\r\n}\r\n\r\n.add-icon {\r\n    height: 20px;\r\n    width: 20px;\r\n    align-self: center;\r\n    fill: #333;\r\n}\r\n\r\n.icon-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.chevron-icon {\r\n    height: 14px;\r\n    width: 14px;\r\n    align-self: end;\r\n    fill: #333;\r\n}\r\n\r\n.add-dropdown {\r\n    position: absolute;\r\n    top: 100%;\r\n    right: 25%;\r\n    width: max-content;\r\n    background-color: #fff;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.add-dropdown-list {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    margin: 0;\r\n    flex: 1;\r\n}\r\n\r\n.add-dropdown-list li {\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n}\r\n\r\n.add-dropdown-list li:hover {\r\n    background-color: #eee;\r\n}\r\n\r\n.add-dropdown-list a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}","",{version:3,sources:["webpack://./src/components/AddComponent.css"],names:[],mappings:"AAAA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,eAAe;IACf,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,UAAU;IACV,kBAAkB;IAClB,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,OAAO;AACX;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf",sourcesContent:[".add-container {\r\n    position: relative;\r\n}\r\n\r\n.icon-container {\r\n    display: grid;\r\n    grid-template-columns: 1fr min-content;\r\n}\r\n\r\n.add-icon {\r\n    height: 20px;\r\n    width: 20px;\r\n    align-self: center;\r\n    fill: #333;\r\n}\r\n\r\n.icon-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.chevron-icon {\r\n    height: 14px;\r\n    width: 14px;\r\n    align-self: end;\r\n    fill: #333;\r\n}\r\n\r\n.add-dropdown {\r\n    position: absolute;\r\n    top: 100%;\r\n    right: 25%;\r\n    width: max-content;\r\n    background-color: #fff;\r\n    border: 1px solid #000;\r\n}\r\n\r\n.add-dropdown-list {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    margin: 0;\r\n    flex: 1;\r\n}\r\n\r\n.add-dropdown-list li {\r\n    padding: 10px 20px;\r\n    font-size: 14px;\r\n}\r\n\r\n.add-dropdown-list li:hover {\r\n    background-color: #eee;\r\n}\r\n\r\n.add-dropdown-list a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}"],sourceRoot:""}]);const d=s},110:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}","",{version:3,sources:["webpack://./src/components/Checkbox.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,sBAAsB;AAC1B",sourcesContent:[".checkbox {\r\n    border: 1px solid #333;\r\n    width: 25px;\r\n    height: 25px;\r\n    background-color: #fff;\r\n}"],sourceRoot:""}]);const d=s},938:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".sidebar-link-item > a {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr 1fr;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n    align-items: center;\r\n    gap: 5px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}\r\n\r\n.sidebar-link-item-number {\r\n    background-color: #dedede;\r\n    padding: 2px 6px;\r\n    border-radius: 40%;\r\n    justify-self: end;\r\n    grid-column: 3;\r\n}\r\n\r\n.sidebar-link-item i {\r\n    height: 18px;\r\n    width: 18px;\r\n}\r\n\r\n.sidebar-link-item i > svg {\r\n    fill: #333;\r\n}","",{version:3,sources:["webpack://./src/components/SidebarLinkItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,0CAA0C;IAC1C,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,eAAe;IACf,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,kBAAkB;IAClB,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,UAAU;AACd",sourcesContent:[".sidebar-link-item > a {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr 1fr;\r\n    text-decoration: none;\r\n    color: #000;\r\n    padding: 5px;\r\n    font-size: 14px;\r\n    align-items: center;\r\n    gap: 5px;\r\n}\r\n\r\n.sidebar-link-item > a:hover {\r\n    text-decoration: none;\r\n    background-color: #eee;\r\n}\r\n\r\n.sidebar-link-list-header > a {\r\n    font-weight: bold;\r\n}\r\n\r\n.sidebar-link-item-number {\r\n    background-color: #dedede;\r\n    padding: 2px 6px;\r\n    border-radius: 40%;\r\n    justify-self: end;\r\n    grid-column: 3;\r\n}\r\n\r\n.sidebar-link-item i {\r\n    height: 18px;\r\n    width: 18px;\r\n}\r\n\r\n.sidebar-link-item i > svg {\r\n    fill: #333;\r\n}"],sourceRoot:""}]);const d=s},411:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li.checked {\r\n    background-color: #eee;\r\n    color: #555;\r\n}\r\n\r\n.todo-items-list li.checked .checkbox{\r\n    background-color: #eee;\r\n    border: 1px solid #777;\r\n    fill: #777;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/components/TodoItemsList.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,2BAA2B;IAC3B,mBAAmB;IACnB,SAAS;IACT,6BAA6B;IAC7B,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;IACtB,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,oBAAoB;IACpB,aAAa;IACb,2BAA2B;AAC/B",sourcesContent:[".todo-items-list {\r\n    list-style: none;\r\n}\r\n\r\n.todo-items-list li {\r\n    display: grid;\r\n    grid-template-columns: min-content 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-items-list li.checked {\r\n    background-color: #eee;\r\n    color: #555;\r\n}\r\n\r\n.todo-items-list li.checked .checkbox{\r\n    background-color: #eee;\r\n    border: 1px solid #777;\r\n    fill: #777;\r\n}\r\n\r\n.todo-items-list li:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.todo-items-list .checkbox {\r\n    grid-row: 1 / span 2;\r\n}\r\n\r\n.todo-items-list-item-content {\r\n    grid-row: 1 / span 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n\r\n\r\n"],sourceRoot:""}]);const d=s},9:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,"header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}\r\n\r\n.logo-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    margin-left: 20px;\r\n}\r\n\r\n.logo-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.logo-text {\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n    color: #222;\r\n}\r\n\r\n.logo-icon {\r\n    width: 32px;\r\n    height: 32px;\r\n    fill: #222;\r\n}","",{version:3,sources:["webpack://./src/modules/Layout/header.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,yBAAyB;IACzB,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,SAAS;IACT,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,UAAU;AACd",sourcesContent:["header {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    background-color: #FC8621;\r\n    grid-row: 1;\r\n    grid-column: 1 / span 2;\r\n}\r\n\r\n.buttons-container {\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: flex;\r\n    margin-right: 4rem;\r\n    gap: 25px;\r\n    align-items: center;\r\n    justify-content: end;\r\n}\r\n\r\n.buttons-container button {\r\n    padding: 10px 30px;\r\n    font-weight: bold;\r\n    border-radius: 8px;\r\n    color: #333;\r\n    background-color: #fff;\r\n}\r\n\r\n.add-todo-button {\r\n    border: 1px solid #0099ff;\r\n}\r\n\r\n.buttons-container button:hover {\r\n    cursor: pointer;\r\n    background-color: #eee;\r\n}\r\n\r\n.add-project-button {\r\n    border: 1px solid #2eec57;\r\n}\r\n\r\nnav {\r\n    justify-self: start;\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    margin-left: 2rem;\r\n}\r\n\r\nnav ul {\r\n    list-style: none;\r\n}\r\n\r\nnav ul li a {\r\n    text-decoration: none;\r\n    color: #333;\r\n}\r\n\r\n.logo-container {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    margin-left: 20px;\r\n}\r\n\r\n.logo-container:hover {\r\n    cursor: pointer;\r\n}\r\n\r\n.logo-text {\r\n    font-weight: bold;\r\n    font-size: 18px;\r\n    color: #222;\r\n}\r\n\r\n.logo-icon {\r\n    width: 32px;\r\n    height: 32px;\r\n    fill: #222;\r\n}"],sourceRoot:""}]);const d=s},464:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./src/modules/Layout/sidebar.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,WAAW;;IAEX,yBAAyB;IACzB,4BAA4B;IAC5B,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB",sourcesContent:[".sidebar {\r\n    grid-column: 1;\r\n    grid-row: 2;\r\n\r\n    background-color: #FAF9F6;\r\n    padding: 10px 20px 10px 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 30px;\r\n}\r\n\r\n.sidebar-link-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style: none;\r\n}\r\n\r\n"],sourceRoot:""}]);const d=s},780:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,"\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectDetail.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,SAAS;IACT,iDAAiD;AACrD;;;;AAIA;IACI,aAAa;IACb,2BAA2B;IAC3B,gEAAgE;IAChE,mBAAmB;IACnB,sBAAsB;IACtB,wCAAwC;;IAExC,kBAAkB;IAClB,iBAAiB;IACjB,yBAAyB;AAC7B;;AAEA;IACI,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,SAAS;IACT,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,WAAW;AACf;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,cAAc;IACd,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,mCAAmC;IACnC,wCAAwC;AAC5C;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["\r\n.todo-items-container {\r\n    display: grid;\r\n    gap: 25px;\r\n    grid-template-columns: minmax(300px, min-content);\r\n}\r\n\r\n\r\n\r\n.todo-item {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: minmax(200px, 300px) minmax(200px, 300px);\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    border-left: 8px solid rgb(68, 127, 255);\r\n\r\n    border-radius: 4px;\r\n    padding: 5px 10px;\r\n    background-color: #FAF9F6;\r\n}\r\n\r\n.todo-item:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n    align-self: end;\r\n}\r\n\r\n.todo-item h3 a {\r\n    text-decoration: none;\r\n    color: #000;\r\n}\r\n\r\n.checkBoxContainer {\r\n    justify-self: end;\r\n    grid-row: 1 / span 2;\r\n    grid-column: 2;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    justify-items: center;\r\n    align-items: center;\r\n    padding: 0px 10px;\r\n}\r\n\r\n.checkBoxContainer span {\r\n    font-size: 12px;\r\n}\r\n\r\n.priority-high {\r\n    border-left: 8px solid rgb(255, 87, 58);\r\n}\r\n\r\n.priority-medium {\r\n    border-left: 8px solid rgb(255, 202, 58);\r\n}\r\n\r\n.priority-low {\r\n    border: 1px solid rgb(140, 253, 88);\r\n    border-left: 8px solid rgb(140, 253, 88);\r\n}\r\n\r\n.checkbox:hover {\r\n    cursor:default;\r\n}\r\n\r\n.delete-project-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    justify-self: start;\r\n}\r\n\r\n.delete-project-button:disabled {\r\n    background-color: #bbb;\r\n    cursor: not-allowed;\r\n}"],sourceRoot:""}]);const d=s},846:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}","",{version:3,sources:["webpack://./src/modules/Project/ProjectList.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sDAAsD;IACtD,SAAS;AACb;AACA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,yBAAyB;IACzB,sBAAsB;AAC1B;;AAEA;IACI,2CAA2C;AAC/C;;AAEA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:[".project-list-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, minmax(200px, 300px));\r\n    gap: 25px;\r\n}\r\n.project-list-container h2 {\r\n    grid-row: 1;\r\n}\r\n\r\n.project-list-container a {\r\n    grid-row: 2;\r\n    text-decoration: none;\r\n}\r\n\r\n.project-card {\r\n    color: #000;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    background-color: #FAF9F6;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n.project-card:hover {\r\n    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n.project-card h3 {\r\n    margin: 0;\r\n    padding: 0;\r\n}"],sourceRoot:""}]);const d=s},528:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,'form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}',"",{version:3,sources:["webpack://./src/modules/TodoItem/AddTodoItem.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,yCAAyC;IACzC,oBAAoB;IACpB,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;AACrB",sourcesContent:['form {\r\n    display: grid;\r\n    grid-template-columns: minmax(30%, 400px);\r\n    justify-items: start;\r\n    gap: 10px;\r\n    padding: 20px;\r\n}\r\n\r\nform input[type="text"], textarea {\r\n    justify-self: stretch;\r\n}\r\n\r\nform button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(0, 140, 255);\r\n    color: white;\r\n    font-weight: bold;\r\n}'],sourceRoot:""}]);const d=s},563:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}","",{version:3,sources:["webpack://./src/modules/TodoItem/TodoItemDetail.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,8BAA8B;IAC9B,oBAAoB;IACpB,SAAS;AACb;;AAEA;IACI,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,wCAAwC;AAC5C;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,SAAS;IACT,iBAAiB;IACjB,kCAAkC;IAClC,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".todoItemContent {\r\n    width: 30%;\r\n    display: grid;\r\n    grid-template-columns: 2fr 3fr;\r\n    justify-items: start;\r\n    gap: 10px;\r\n}\r\n\r\n.todo-item-container h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.todo-item-container {\r\n    background-color: #FAF9F6;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.17);\r\n}\r\n\r\n.project span {\r\n    grid-column: 1;\r\n\r\n}\r\n\r\n.project select {\r\n    grid-column: 2;\r\n}\r\n\r\n.delete-todoitem-button {\r\n    border: 0;\r\n    padding: 8px 30px;\r\n    background-color: rgb(255, 66, 66);\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n.delete-todoitem-button button:hover {\r\n    background-color: rgb(255, 87, 87);\r\n}"],sourceRoot:""}]);const d=s},426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>d});var r=t(537),o=t.n(r),i=t(645),s=t.n(i)()(o());s.push([n.id,"* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,6CAA6C;AACjD;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;IACV,WAAW;IACX,aAAa;;IAEb,aAAa;IACb,gCAAgC;IAChC,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,cAAc;AAClB",sourcesContent:["* {\r\n    font-family: 'Helvetica', 'Arial', sans-serif;\r\n}\r\n\r\nbody {\r\n    background-color: #fff;\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-rows: 60px 1fr;\r\n}\r\n\r\n.main-content {\r\n    padding: 20px 40px;\r\n    grid-column: 2;\r\n}"],sourceRoot:""}]);const d=s},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var d=0;d<this.length;d++){var a=this[d][0];null!=a&&(s[a]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},s=[],d=0;d<n.length;d++){var a=n[d],c=r.base?a[0]+r.base:a[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var p=t(A),m={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var u=o(m,r);r.byIndex=d,e.splice(d,0,{identifier:A,updater:u,references:1})}s.push(A)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<i.length;s++){var d=t(i[s]);e[d].references--}for(var a=r(n,o),c=0;c<i.length;c++){var l=t(i[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=a}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},428:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1"></path></svg>'},646:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z"></path></svg>'},586:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg>'},168:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"></path></svg>'},718:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 3H14.82C14.4 1.84 13.3 1 12 1S9.6 1.84 9.18 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M12 3C12.55 3 13 3.45 13 4S12.55 5 12 5 11 4.55 11 4 11.45 3 12 3M7 7H17V5H19V19H5V5H7V7M12 17V15H17V17H12M12 11V9H17V11H12M8 12V9H7V8H9V12H8M9.25 14C9.66 14 10 14.34 10 14.75C10 14.95 9.92 15.14 9.79 15.27L8.12 17H10V18H7V17.08L9 15H7V14H9.25"></path></svg>'},27:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3M7 7H9V9H7V7M7 11H9V13H7V11M7 15H9V17H7V15M17 17H11V15H17V17M17 13H11V11H17V13M17 9H11V7H17V9Z"></path></svg>'},697:n=>{n.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"></path></svg>'}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";const n=new class{events={};publish(n,e){if(this.events[n])for(let t of this.events[n])t(e)}subscribe(n,e){this.events[n]||(this.events[n]=[]),this.events[n].push(e)}unsubscribe(n,e){this.events[n]&&this.events[n].remove(this.events[n].find((n=>n===e)))}};class e{constructor(n,e,t,r,o,i,s){this.id=n,this.title=e,this.priority=t,this.description=r,this.dueDate=o,this.isComplete=i||!1,this.projectId=s}static priorities={1:"Critical",2:"Important",3:"Default"}}function r(n){return 0===n.length?1:n.reduce(((n,e)=>n.id<e.id?e:n)).id+1}function o(e,t){n.publish("changePage",{page:e,data:t})}function i(n,e){return n.findIndex((n=>n.id===e))}function s(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function d(n){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},d(n)}function a(n){s(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===d(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function c(n){s(1,arguments);var e=a(n);return e.setHours(0,0,0,0),e}function l(n,e){s(2,arguments);var t=c(n),r=c(e);return t.getTime()===r.getTime()}const A=function(){const n=JSON.parse(localStorage.getItem("todoItems"));return!!n&&n.map((n=>new e(n.id,n.title,n.priority,n.description,new Date(n.dueDate),n.isComplete,n.projectId)))}()||[];function p(t,o,i,s,d){const a=r(A);if(!(t&&o&&i&&s))return null;if(!Number(o))return null;s=new Date(s);const c=new e(a,t,Number(o),i,s,d||1);return A.push(c),n.publish("TodoItemsChanged"),c}function m(){return A}function u(){return m().filter((n=>function(n){return s(1,arguments),l(n,Date.now())}(n.dueDate)))}function C(){return m().filter((n=>function(n){return s(1,arguments),a(n).getTime()>Date.now()}(n.dueDate)))}function g(n){return A.find((e=>e.id===n))}function h(e){g(e.id)&&(A[i(A,e.id)]=e,n.publish("TodoItemsChanged"))}n.subscribe("TodoItemsChanged",(()=>{localStorage.setItem("todoItems",JSON.stringify(A))}));class b{constructor(n,e){this.id=n,this.name=e}}const I=JSON.parse(localStorage.getItem("projects"))||[];function f(e){const t=r(I),o=new b(t,e);return I.push(o),n.publish("ProjectChanged"),o}function x(){return I}function B(n){return I.find((e=>e.id===n))}0===I.length&&f("Default"),n.subscribe("ProjectChanged",(()=>{localStorage.setItem("projects",JSON.stringify(I))}));var v=t(379),y=t.n(v),w=t(795),k=t.n(w),E=t(569),j=t.n(E),T=t(565),L=t.n(T),S=t(216),D=t.n(S),Z=t(589),H=t.n(Z),V=t(563),P={};P.styleTagTransform=H(),P.setAttributes=L(),P.insert=j().bind(null,"head"),P.domAPI=k(),P.insertStyleElement=D(),y()(V.Z,P),V.Z&&V.Z.locals&&V.Z.locals;var M=t(586),W=t.n(M),F=t(110),N={};N.styleTagTransform=H(),N.setAttributes=L(),N.insert=j().bind(null,"head"),N.domAPI=k(),N.insertStyleElement=D(),y()(F.Z,N),F.Z&&F.Z.locals&&F.Z.locals;class U{constructor(n,e){return this.checked=n,this.callback=e,this.checkboxDiv=document.createElement("div"),this.checkboxDiv.addEventListener("click",this.onClick.bind(this)),this.checkboxDiv.classList.add("checkbox"),this.updateCheckMark(),this.checkboxDiv}toggle(){this.checked?this.checked=!1:this.checked=!0,this.updateCheckMark()}updateCheckMark(){if(this.checked){const n=document.createElement("div");n.innerHTML=W(),this.checkboxDiv.appendChild(n.firstChild)}else this.checkboxDiv.innerHTML=""}onClick(){this.toggle(),this.callback()}}function q(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}function R(n,e){var t,r;s(1,arguments);var o=a(n);if(isNaN(o.getTime()))throw new RangeError("Invalid time value");var i=String(null!==(t=null==e?void 0:e.format)&&void 0!==t?t:"extended"),d=String(null!==(r=null==e?void 0:e.representation)&&void 0!==r?r:"complete");if("extended"!==i&&"basic"!==i)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==d&&"time"!==d&&"complete"!==d)throw new RangeError("representation must be 'date', 'time', or 'complete'");var c="",l="",A="extended"===i?"-":"",p="extended"===i?":":"";if("time"!==d){var m=q(o.getDate(),2),u=q(o.getMonth()+1,2),C=q(o.getFullYear(),4);c="".concat(C).concat(A).concat(u).concat(A).concat(m)}if("date"!==d){var g=o.getTimezoneOffset();if(0!==g){var h=Math.abs(g),b=q(Math.floor(h/60),2),I=q(h%60,2),f=g<0?"+":"-";l="".concat(f).concat(b,":").concat(I)}else l="Z";var x=q(o.getHours(),2),B=q(o.getMinutes(),2),v=q(o.getSeconds(),2),y=""===c?"":"T",w=[x,B,v].join(p);c="".concat(c).concat(y).concat(w).concat(l)}return c}const Y=new class{render(t){if(this.todoItem=g(t),!this.todoItem)return;const r=B(this.todoItem.projectId),s=document.createElement("div");s.classList.add("todo-item-container");const d=document.createElement("h2");d.textContent=this.todoItem.title;const a=document.createElement("div");a.classList.add("todoItemContent");const c=document.createElement("span");c.textContent="Project: ",a.appendChild(c);const l=document.createElement("a");l.href="#",l.textContent=r.name,l.addEventListener("click",(n=>{n.preventDefault(),o("ProjectDetail",r.id)})),c.appendChild(l);const p=document.createElement("select");p.name="project";for(let n of x()){const e=document.createElement("option");e.name="project",e.value=n.id,e.text=n.name,p.appendChild(e),n.id===this.todoItem.projectId&&(e.selected=!0)}p.addEventListener("change",(n=>{this.todoItem.projectId=Number(n.target.value),this.onItemChange()})),a.appendChild(p);const m=document.createElement("label");m.setAttribute("for","priority"),m.textContent="Priority",a.appendChild(m);const u=document.createElement("select");u.required=!0,u.name="priority",u.id="priority";for(const n of Object.keys(e.priorities)){const t=Number(n),r=document.createElement("option");r.name="priority",r.value=t,r.text=e.priorities[t],t===this.todoItem.priority&&(r.selected=!0),u.appendChild(r)}u.addEventListener("change",(n=>{this.todoItem.priority=Number(n.target.value),this.onItemChange()})),a.appendChild(u);const C=document.createElement("label");C.setAttribute("for","description"),C.textContent="Description";const h=document.createElement("input");h.value=this.todoItem.description,h.name="description",h.addEventListener("change",(n=>{this.todoItem.description=n.target.value,this.onItemChange()})),a.appendChild(C),a.appendChild(h);const b=document.createElement("label");b.setAttribute("for","dueDate"),b.textContent="Due Date",a.appendChild(b);const I=document.createElement("input");I.type="date",I.name="dueDate",I.value=R(this.todoItem.dueDate,{representation:"date"}),I.addEventListener("change",(n=>{this.todoItem.dueDate=new Date(n.target.value),console.log(this.todoItem.dueDate),this.onItemChange()})),a.appendChild(I);const f=document.createElement("span");f.textContent="Is completed";const v=new U(this.todoItem.isComplete,(()=>{this.todoItem.isComplete=!this.todoItem.isComplete,this.onItemChange()}));a.appendChild(f),a.appendChild(v);const y=document.createElement("button");return y.textContent="Delete",y.classList.add("delete-todoitem-button"),y.addEventListener("click",(e=>{!function(e){A.splice(i(A,e),1),n.publish("TodoItemsChanged")}(this.todoItem.id),n.publish("changePage",{page:"ProjectDetail",data:r.id})})),a.appendChild(y),s.appendChild(d),s.appendChild(a),s}onItemChange(){h(this.todoItem),o("TodoItemDetail",this.todoItem.id)}},z=new class{getTodoItemsForProject(n){return m().filter((e=>e.projectId===n))}};var O=t(846),X={};X.styleTagTransform=H(),X.setAttributes=L(),X.insert=j().bind(null,"head"),X.domAPI=k(),X.insertStyleElement=D(),y()(O.Z,X),O.Z&&O.Z.locals&&O.Z.locals;const J=new class{render(){const n=x(),e=document.createElement("div");e.classList.add("project-list-container");const t=document.createElement("h2");t.textContent="Projects",e.appendChild(t);for(let t of n){const n=document.createElement("a");n.href="#",n.addEventListener("click",(n=>this.onProjectLinkClick(n,t)));const r=document.createElement("div");r.classList.add("project-card");const o=document.createElement("h3");o.textContent=t.name;const i=document.createElement("span"),s=z.getTodoItemsForProject(t.id).length;i.textContent=`Todo items: ${s}`,n.appendChild(r),r.appendChild(o),r.appendChild(i),e.appendChild(n)}return e}onProjectLinkClick(n,e){n.preventDefault(),console.log({project:e}),o("ProjectDetail",e.id)}};var Q=t(454),_={};_.styleTagTransform=H(),_.setAttributes=L(),_.insert=j().bind(null,"head"),_.domAPI=k(),_.insertStyleElement=D(),y()(Q.Z,_),Q.Z&&Q.Z.locals&&Q.Z.locals;var G=t(697),$=t.n(G),K=t(168),nn=t.n(K);class en{links=[{name:"Add Todo Item",link:"AddTodoItem"},{name:"Add Project",link:"AddProject"}];render(){const n=document.createElement("div");n.className="add-container";const e=document.createElement("div");e.className="icon-container";const t=document.createElement("i");t.innerHTML=$(),t.className="add-icon";const r=document.createElement("i");r.innerHTML=nn(),r.className="chevron-icon",e.appendChild(t),e.appendChild(r),n.appendChild(e);const i=document.createElement("div");i.className="add-dropdown",i.style.display="none";const s=document.createElement("ul");s.className="add-dropdown-list";for(let n of this.links){const e=document.createElement("li"),t=document.createElement("a");t.href="",t.text=n.name,t.addEventListener("click",(e=>{e.preventDefault(),o(n.link),i.style.display="none"})),e.appendChild(t),s.appendChild(e)}return i.appendChild(s),document.addEventListener("click",(e=>{n.contains(e.target)||"none"===i.style.display||(i.style.display="none")})),e.addEventListener("click",(n=>{"none"===i.style.display?i.style.display="block":i.style.display="none"})),n.appendChild(i),n}}var tn=t(718),rn=t.n(tn),on=t(9),sn={};sn.styleTagTransform=H(),sn.setAttributes=L(),sn.insert=j().bind(null,"head"),sn.domAPI=k(),sn.insertStyleElement=D(),y()(on.Z,sn),on.Z&&on.Z.locals&&on.Z.locals;const dn=new class{render(){const n=document.createElement("header"),e=document.createElement("div");e.className="logo-container";const t=document.createElement("i");t.className="logo-icon",t.innerHTML=rn(),e.appendChild(t);const r=document.createElement("span");r.textContent="Odin Todo-List",r.className="logo-text",e.appendChild(r),e.addEventListener("click",(n=>{o("TodoItemList",{title:"All items",callback:m})})),n.appendChild(e);const i=document.createElement("div");i.classList.add("buttons-container");const s=new en;return i.appendChild(s.render()),n.appendChild(i),n}onHeaderLinkClick(e,t){e.preventDefault(),n.publish("changePage",{page:t.page})}};var an=t(464),cn={};cn.styleTagTransform=H(),cn.setAttributes=L(),cn.insert=j().bind(null,"head"),cn.domAPI=k(),cn.insertStyleElement=D(),y()(an.Z,cn),an.Z&&an.Z.locals&&an.Z.locals;var ln=t(938),An={};An.styleTagTransform=H(),An.setAttributes=L(),An.insert=j().bind(null,"head"),An.domAPI=k(),An.insertStyleElement=D(),y()(ln.Z,An),ln.Z&&ln.Z.locals&&ln.Z.locals;class pn{constructor(n,e,t){this.title=n,this.callback=e,this.icon=t}render(){const e=document.createElement("li");e.className="sidebar-link-item";const t=document.createElement("a");t.href="#";const r=document.createElement("span");if(r.textContent=this.title,this.icon){const n=document.createElement("i");n.innerHTML=this.icon,t.appendChild(n)}const i=document.createElement("span");return i.className="sidebar-link-item-number",i.textContent=this.callback().filter((n=>!n.isComplete)).length,n.subscribe("TodoItemsChanged",(()=>{i.textContent=this.callback().filter((n=>!n.isComplete)).length})),t.append(r,i),e.appendChild(t),e.addEventListener("click",(n=>{n.preventDefault(),o("TodoItemList",{title:this.title,callback:this.callback})})),e}}var mn=t(27),un=t.n(mn),Cn=t(428),gn=t.n(Cn),hn=t(646),bn=t.n(hn);const In=new class{mainLinks=[{title:"All items",callback:m,icon:un()},{title:"Today",callback:u,icon:gn()},{title:"Upcoming",callback:C,icon:bn()}];render(){const n=document.createElement("div");n.className="sidebar";const e=document.createElement("ul");e.className="sidebar-link-list";for(let n of this.mainLinks){const t=new pn(n.title,n.callback,n.icon||null).render();e.appendChild(t)}const t=document.createElement("ul");t.className="sidebar-link-list";const r=document.createElement("li");r.classList.add("sidebar-link-list-header","sidebar-link-item");const o=document.createElement("a");o.href="#",o.text="Projects",r.appendChild(o),t.appendChild(r);for(let n of x()){const e=new pn(n.name,(()=>z.getTodoItemsForProject(n.id))).render();t.appendChild(e)}return n.appendChild(e),n.appendChild(t),n}};var fn=t(411),xn={};xn.styleTagTransform=H(),xn.setAttributes=L(),xn.insert=j().bind(null,"head"),xn.domAPI=k(),xn.insertStyleElement=D(),y()(fn.Z,xn),fn.Z&&fn.Z.locals&&fn.Z.locals;const Bn=class{constructor(n){this.todoItems=n}render(){if(this.todoItems)return this.todoItemsList=document.createElement("ul"),this.todoItemsList.className="todo-items-list",this.renderListItems(),this.todoItemsList}renderListItems(){this.todoItems.sort(((n,e)=>{if(n.isComplete===e.isComplete){if(function(n,e){s(2,arguments);var t=a(n),r=a(e);return t.getTime()<r.getTime()}(n.dueDate,e.dueDate))return 1}else if(n.isComplete&&!e.isComplete)return 1}));for(let n of this.todoItems){const e=document.createElement("li");n.isComplete&&e.classList.add("checked");const t=new U(n.isComplete,(()=>{n.isComplete=!n.isComplete,h(n),this.todoItemsList.innerHTML="",this.renderListItems()}));e.appendChild(t);const r=document.createElement("div");r.className="todo-items-list-item-content";const i=document.createElement("span");i.textContent=n.title,r.appendChild(i);const s=document.createElement("span");s.textContent=R(n.dueDate,{representation:"date"}),r.appendChild(s),e.addEventListener("click",(t=>{console.log(t.target),(t.target===e||r.contains(t.target))&&o("TodoItemDetail",n.id)})),e.appendChild(r),this.todoItemsList.appendChild(e)}}};var vn=t(780),yn={};yn.styleTagTransform=H(),yn.setAttributes=L(),yn.insert=j().bind(null,"head"),yn.domAPI=k(),yn.insertStyleElement=D(),y()(vn.Z,yn),vn.Z&&vn.Z.locals&&vn.Z.locals;const wn=new class{render(e){const t=B(e),r=z.getTodoItemsForProject(t.id),s=document.createElement("div");s.classList.add("project-detail");const d=document.createElement("h2");d.textContent=t.name||"Project Details",s.appendChild(d);const a=new Bn(r);s.appendChild(a.render());const c=document.createElement("button");return c.textContent="Delete Project",c.classList.add("delete-project-button"),("Default"===t.name||x().length<=1)&&(c.disabled=!0),c.addEventListener("click",(e=>{!function(e){I.splice(i(I,e),1),n.publish("ProjectChanged")}(t.id),o("ProjectList")})),s.appendChild(c),s}};var kn=t(528),En={};En.styleTagTransform=H(),En.setAttributes=L(),En.insert=j().bind(null,"head"),En.domAPI=k(),En.insertStyleElement=D(),y()(kn.Z,En),kn.Z&&kn.Z.locals&&kn.Z.locals;const jn=new class{render(){const n=x(),t=document.createElement("div"),r=document.createElement("h2");r.textContent="Add Todo Item";const o=document.createElement("form");o.addEventListener("submit",this.onFormSubmit);const i=document.createElement("label");i.setAttribute("for","title"),i.textContent="Title",o.appendChild(i);const s=document.createElement("input");s.required=!0,s.name="title",s.type="text",s.id="title",o.appendChild(s);const d=document.createElement("label");d.setAttribute("for","priority"),d.textContent="Priority",o.appendChild(d);const a=document.createElement("select");a.required=!0,a.name="priority",a.id="priority";for(let n of Object.keys(e.priorities)){const t=document.createElement("option");t.name="priority",t.value=n,t.text=e.priorities[n],a.appendChild(t)}o.appendChild(a);const c=document.createElement("label");c.setAttribute("for","description"),c.textContent="Description",o.appendChild(c);const l=document.createElement("textarea");l.required=!0,l.name="description",l.id="description",o.appendChild(l);const A=document.createElement("label");A.setAttribute("for","dueDate"),A.textContent="Due Date",o.appendChild(A);const p=document.createElement("input");p.required=!0,p.type="date",p.name="dueDate",p.id="dueDate",o.appendChild(p);const m=document.createElement("label");m.setAttribute("for","project"),m.textContent="Project";const u=document.createElement("select");u.required=!0,u.name="project",u.id="project";for(let e of n){const n=document.createElement("option");n.value=e.id,n.textContent=e.name,u.appendChild(n)}o.appendChild(u);const C=document.createElement("button");return C.type="submit",C.textContent="Add",o.appendChild(C),t.appendChild(r),t.appendChild(o),t}onFormSubmit(n){n.preventDefault();const e=n.target;if(!e.checkValidity())return void e.reportValidity();let t=new FormData(e);p(t.get("title"),t.get("priority"),t.get("description"),t.get("dueDate"),Number(t.get("project")))?e.reset():console.log("Error when creating new todo item")}},Tn=new class{render(){const n=document.createElement("div"),e=document.createElement("h2");e.textContent="Add Project";const t=document.createElement("form");t.addEventListener("submit",this.onFormSubmit);const r=document.createElement("label");r.setAttribute("for","name"),r.textContent="Project name",t.appendChild(r);const o=document.createElement("input");o.type="text",o.name="name",o.id="name",o.required=!0,t.appendChild(o);const i=document.createElement("button");return i.textContent="Add",t.appendChild(i),n.appendChild(e),n.appendChild(t),n}onFormSubmit(n){n.preventDefault();const e=n.target;if(!e.checkValidity())return void e.reportValidity();const t=new FormData(e);f(t.get("name"))&&o("ProjectList"),console.table(t)}},Ln=new class{render({title:n,callback:e}){console.log(n,e),this.todoItems=e();const t=document.createElement("div"),r=document.createElement("h2");r.textContent=n,t.appendChild(r);const o=new Bn(this.todoItems).render();return t.appendChild(o),t}};var Sn=t(426),Dn={};Dn.styleTagTransform=H(),Dn.setAttributes=L(),Dn.insert=j().bind(null,"head"),Dn.domAPI=k(),Dn.insertStyleElement=D(),y()(Sn.Z,Dn),Sn.Z&&Sn.Z.locals&&Sn.Z.locals,console.log("TodoList app loaded"),0===m().length&&(p("Test",1,"Test Description","2022-12-29"),p("Test2",1,"Test Description 2","2022-12-30")),console.table(m());const Zn={TodoItemDetail:Y,ProjectList:J,ProjectDetail:wn,AddTodoItem:jn,AddProject:Tn,TodoItemList:Ln};n.subscribe("changePage",Vn),document.body.appendChild(dn.render()),document.body.appendChild(In.render());const Hn=document.createElement("div");function Vn(n){console.log(n),n.page&&Zn[n.page]&&(Hn.innerHTML="",Hn.appendChild(Zn[n.page].render(n.data)))}Hn.classList.add("main-content"),document.body.appendChild(Hn),Vn({page:"ProjectList"})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGNBQWMsT0FJM0MsU0FBU3VSLEdBQVd2VSxHQUNoQjRILFFBQVFzSCxJQUFJbFAsR0FDUEEsRUFBSzRHLE1BQVMwTixHQUFNdFUsRUFBSzRHLFFBSTlCNk4sR0FBWTFKLFVBQVksR0FDeEIwSixHQUFZM1IsWUFBWXdSLEdBQU10VSxFQUFLNEcsTUFBTTJHLE9BQU92TixFQUFLQSxPQUN6RCxDQVhBeVUsR0FBWS9KLFVBQVVDLElBQUksZ0JBQzFCdEksU0FBU21TLEtBQUsxUixZQUFZMlIsSUFZMUJGLEdBQVcsQ0FDUDNOLEtBQU0sZSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY29tcG9uZW50cy9BZGRDb21wb25lbnQuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY29tcG9uZW50cy9DaGVja2JveC5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9jb21wb25lbnRzL1NpZGViYXJMaW5rSXRlbS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9jb21wb25lbnRzL1RvZG9JdGVtc0xpc3QuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9MYXlvdXQvaGVhZGVyLmNzcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvTGF5b3V0L3NpZGViYXIuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3REZXRhaWwuY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3RMaXN0LmNzcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vQWRkVG9kb0l0ZW0uY3NzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbURldGFpbC5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9jYWxlbmRhci1ibGFuay5zdmciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9jYWxlbmRhci1jbG9jay5zdmciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9jaGVjay5zdmciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9jaGV2cm9uLWRvd24uc3ZnIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9hc3NldHMvaWNvbnMvY2xpcGJvYXJkLWxpc3Qtb3V0bGluZS5zdmciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9saXN0LWJveC5zdmciLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL2Fzc2V0cy9pY29ucy9wbHVzLnN2ZyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29kaW4tdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL29kaW4tdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9QdWJTdWIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL1RvZG9JdGVtLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy91dGlsLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mRGF5L2luZGV4LmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZURheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1Db250cm9sbGVyLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVG9kYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNGdXR1cmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3QvUHJvamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1EZXRhaWwuY3NzPzM3MWQiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9jb21wb25lbnRzL0NoZWNrYm94LmNzcz9jOTI4Iiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY29tcG9uZW50cy9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXRJU08vaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL1RvZG9JdGVtRGV0YWlsLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0VG9kb0l0ZW1NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdC5jc3M/YjdiNCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL2NvbXBvbmVudHMvQWRkQ29tcG9uZW50LmNzcz9jMWI3Iiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY29tcG9uZW50cy9BZGRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL0xheW91dC9oZWFkZXIuY3NzPzQ5NzgiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL0xheW91dC9oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL0xheW91dC9zaWRlYmFyLmNzcz80NWEzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvY29tcG9uZW50cy9TaWRlYmFyTGlua0l0ZW0uY3NzP2I4YjYiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9jb21wb25lbnRzL1NpZGViYXJMaW5rSXRlbS5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvTGF5b3V0L3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9jb21wb25lbnRzL1RvZG9JdGVtc0xpc3QuY3NzPzM0NzMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9jb21wb25lbnRzL1RvZG9JdGVtc0xpc3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNCZWZvcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3QvUHJvamVjdERldGFpbC5jc3M/YTcxZCIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0RGV0YWlsLmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvbW9kdWxlcy9Ub2RvSXRlbS9BZGRUb2RvSXRlbS5jc3M/ZThiNyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vQWRkVG9kb0l0ZW0uanMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3QvQWRkUHJvamVjdC5qcyIsIndlYnBhY2s6Ly9vZGluLXRvZG9saXN0Ly4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1MaXN0LmpzIiwid2VicGFjazovL29kaW4tdG9kb2xpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vb2Rpbi10b2RvbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5hZGQtY29udGFpbmVyIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4uaWNvbi1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBtaW4tY29udGVudDtcXHJcXG59XFxyXFxuXFxyXFxuLmFkZC1pY29uIHtcXHJcXG4gICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcclxcbiAgICBmaWxsOiAjMzMzO1xcclxcbn1cXHJcXG5cXHJcXG4uaWNvbi1jb250YWluZXI6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5jaGV2cm9uLWljb24ge1xcclxcbiAgICBoZWlnaHQ6IDE0cHg7XFxyXFxuICAgIHdpZHRoOiAxNHB4O1xcclxcbiAgICBhbGlnbi1zZWxmOiBlbmQ7XFxyXFxuICAgIGZpbGw6ICMzMzM7XFxyXFxufVxcclxcblxcclxcbi5hZGQtZHJvcGRvd24ge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMTAwJTtcXHJcXG4gICAgcmlnaHQ6IDI1JTtcXHJcXG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkLWRyb3Bkb3duLWxpc3Qge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIGZsZXg6IDE7XFxyXFxufVxcclxcblxcclxcbi5hZGQtZHJvcGRvd24tbGlzdCBsaSB7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXHJcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkLWRyb3Bkb3duLWxpc3QgbGk6aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkLWRyb3Bkb3duLWxpc3QgYSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0FkZENvbXBvbmVudC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0NBQXNDO0FBQzFDOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsVUFBVTtBQUNkOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixXQUFXO0lBQ1gsZUFBZTtJQUNmLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsVUFBVTtJQUNWLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0FBQ1g7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixXQUFXO0FBQ2ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmFkZC1jb250YWluZXIge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcblxcclxcbi5pY29uLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIG1pbi1jb250ZW50O1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkLWljb24ge1xcclxcbiAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgIHdpZHRoOiAyMHB4O1xcclxcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxyXFxuICAgIGZpbGw6ICMzMzM7XFxyXFxufVxcclxcblxcclxcbi5pY29uLWNvbnRhaW5lcjpob3ZlciB7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmNoZXZyb24taWNvbiB7XFxyXFxuICAgIGhlaWdodDogMTRweDtcXHJcXG4gICAgd2lkdGg6IDE0cHg7XFxyXFxuICAgIGFsaWduLXNlbGY6IGVuZDtcXHJcXG4gICAgZmlsbDogIzMzMztcXHJcXG59XFxyXFxuXFxyXFxuLmFkZC1kcm9wZG93biB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdG9wOiAxMDAlO1xcclxcbiAgICByaWdodDogMjUlO1xcclxcbiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7XFxyXFxufVxcclxcblxcclxcbi5hZGQtZHJvcGRvd24tbGlzdCB7XFxyXFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgZmxleDogMTtcXHJcXG59XFxyXFxuXFxyXFxuLmFkZC1kcm9wZG93bi1saXN0IGxpIHtcXHJcXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xcclxcbiAgICBmb250LXNpemU6IDE0cHg7XFxyXFxufVxcclxcblxcclxcbi5hZGQtZHJvcGRvd24tbGlzdCBsaTpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxyXFxufVxcclxcblxcclxcbi5hZGQtZHJvcGRvd24tbGlzdCBhIHtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBjb2xvcjogIzMzMztcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNoZWNrYm94IHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcXHJcXG4gICAgd2lkdGg6IDI1cHg7XFxyXFxuICAgIGhlaWdodDogMjVweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvQ2hlY2tib3guY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksc0JBQXNCO0lBQ3RCLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0FBQzFCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jaGVja2JveCB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxyXFxuICAgIHdpZHRoOiAyNXB4O1xcclxcbiAgICBoZWlnaHQ6IDI1cHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zaWRlYmFyLWxpbmstaXRlbSA+IGEge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbi1jb250ZW50IDFmciAxZnI7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxuICAgIHBhZGRpbmc6IDVweDtcXHJcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBnYXA6IDVweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1pdGVtID4gYTpob3ZlciB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1saXN0LWhlYWRlciA+IGEge1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1pdGVtLW51bWJlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZWRlZGU7XFxyXFxuICAgIHBhZGRpbmc6IDJweCA2cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDQwJTtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAzO1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZWJhci1saW5rLWl0ZW0gaSB7XFxyXFxuICAgIGhlaWdodDogMThweDtcXHJcXG4gICAgd2lkdGg6IDE4cHg7XFxyXFxufVxcclxcblxcclxcbi5zaWRlYmFyLWxpbmstaXRlbSBpID4gc3ZnIHtcXHJcXG4gICAgZmlsbDogIzMzMztcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvU2lkZWJhckxpbmtJdGVtLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYiwwQ0FBMEM7SUFDMUMscUJBQXFCO0lBQ3JCLFdBQVc7SUFDWCxZQUFZO0lBQ1osZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixRQUFRO0FBQ1o7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBO0lBQ0ksVUFBVTtBQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zaWRlYmFyLWxpbmstaXRlbSA+IGEge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbi1jb250ZW50IDFmciAxZnI7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxuICAgIHBhZGRpbmc6IDVweDtcXHJcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBnYXA6IDVweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1pdGVtID4gYTpob3ZlciB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1saXN0LWhlYWRlciA+IGEge1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1pdGVtLW51bWJlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZWRlZGU7XFxyXFxuICAgIHBhZGRpbmc6IDJweCA2cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDQwJTtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAzO1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZWJhci1saW5rLWl0ZW0gaSB7XFxyXFxuICAgIGhlaWdodDogMThweDtcXHJcXG4gICAgd2lkdGg6IDE4cHg7XFxyXFxufVxcclxcblxcclxcbi5zaWRlYmFyLWxpbmstaXRlbSBpID4gc3ZnIHtcXHJcXG4gICAgZmlsbDogIzMzMztcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvZG8taXRlbXMtbGlzdCB7XFxyXFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1zLWxpc3QgbGkge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbi1jb250ZW50IDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBnYXA6IDEwcHg7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1zLWxpc3QgbGkuY2hlY2tlZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxyXFxuICAgIGNvbG9yOiAjNTU1O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtcy1saXN0IGxpLmNoZWNrZWQgLmNoZWNrYm94e1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNzc3O1xcclxcbiAgICBmaWxsOiAjNzc3O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtcy1saXN0IGxpOmxhc3QtY2hpbGQge1xcclxcbiAgICBib3JkZXItYm90dG9tOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtcy1saXN0IC5jaGVja2JveCB7XFxyXFxuICAgIGdyaWQtcm93OiAxIC8gc3BhbiAyO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtcy1saXN0LWl0ZW0tY29udGVudCB7XFxyXFxuICAgIGdyaWQtcm93OiAxIC8gc3BhbiAyO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxyXFxufVxcclxcblxcclxcblxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1RvZG9JdGVtc0xpc3QuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNDQUFzQztJQUN0QywyQkFBMkI7SUFDM0IsbUJBQW1CO0lBQ25CLFNBQVM7SUFDVCw2QkFBNkI7SUFDN0IsYUFBYTtJQUNiLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsV0FBVztBQUNmOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLHNCQUFzQjtJQUN0QixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsYUFBYTtJQUNiLDJCQUEyQjtBQUMvQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudG9kby1pdGVtcy1saXN0IHtcXHJcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbXMtbGlzdCBsaSB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWluLWNvbnRlbnQgMWZyO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2M7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbXMtbGlzdCBsaS5jaGVja2VkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXHJcXG4gICAgY29sb3I6ICM1NTU7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1zLWxpc3QgbGkuY2hlY2tlZCAuY2hlY2tib3h7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM3Nzc7XFxyXFxuICAgIGZpbGw6ICM3Nzc7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1zLWxpc3QgbGk6bGFzdC1jaGlsZCB7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1zLWxpc3QgLmNoZWNrYm94IHtcXHJcXG4gICAgZ3JpZC1yb3c6IDEgLyBzcGFuIDI7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1zLWxpc3QtaXRlbS1jb250ZW50IHtcXHJcXG4gICAgZ3JpZC1yb3c6IDEgLyBzcGFuIDI7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaGVhZGVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkM4NjIxO1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiA0cmVtO1xcclxcbiAgICBnYXA6IDI1cHg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9ucy1jb250YWluZXIgYnV0dG9uIHtcXHJcXG4gICAgcGFkZGluZzogMTBweCAzMHB4O1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBjb2xvcjogIzMzMztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG59XFxyXFxuXFxyXFxuLmFkZC10b2RvLWJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDk5ZmY7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciBidXR0b246aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxyXFxufVxcclxcblxcclxcbi5hZGQtcHJvamVjdC1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMmVlYzU3O1xcclxcbn1cXHJcXG5cXHJcXG5uYXYge1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IHN0YXJ0O1xcclxcbiAgICBncmlkLWNvbHVtbjogMTtcXHJcXG4gICAgZ3JpZC1yb3c6IDE7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwgbGkgYSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxufVxcclxcblxcclxcbi5sb2dvLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogNXB4O1xcclxcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmxvZ28tY29udGFpbmVyOmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubG9nby10ZXh0IHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgY29sb3I6ICMyMjI7XFxyXFxufVxcclxcblxcclxcbi5sb2dvLWljb24ge1xcclxcbiAgICB3aWR0aDogMzJweDtcXHJcXG4gICAgaGVpZ2h0OiAzMnB4O1xcclxcbiAgICBmaWxsOiAjMjIyO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbW9kdWxlcy9MYXlvdXQvaGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYiw4QkFBOEI7SUFDOUIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QixXQUFXO0lBQ1gsdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksY0FBYztJQUNkLFdBQVc7SUFDWCxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLFNBQVM7SUFDVCxtQkFBbUI7SUFDbkIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsY0FBYztJQUNkLFdBQVc7SUFDWCxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsV0FBVztBQUNmOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixRQUFRO0lBQ1IsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixlQUFlO0lBQ2YsV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixVQUFVO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaGVhZGVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkM4NjIxO1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiA0cmVtO1xcclxcbiAgICBnYXA6IDI1cHg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcclxcbn1cXHJcXG5cXHJcXG4uYnV0dG9ucy1jb250YWluZXIgYnV0dG9uIHtcXHJcXG4gICAgcGFkZGluZzogMTBweCAzMHB4O1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBjb2xvcjogIzMzMztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG59XFxyXFxuXFxyXFxuLmFkZC10b2RvLWJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMwMDk5ZmY7XFxyXFxufVxcclxcblxcclxcbi5idXR0b25zLWNvbnRhaW5lciBidXR0b246aG92ZXIge1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxyXFxufVxcclxcblxcclxcbi5hZGQtcHJvamVjdC1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMmVlYzU3O1xcclxcbn1cXHJcXG5cXHJcXG5uYXYge1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IHN0YXJ0O1xcclxcbiAgICBncmlkLWNvbHVtbjogMTtcXHJcXG4gICAgZ3JpZC1yb3c6IDE7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5uYXYgdWwgbGkgYSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMzMzM7XFxyXFxufVxcclxcblxcclxcbi5sb2dvLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIGdhcDogNXB4O1xcclxcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmxvZ28tY29udGFpbmVyOmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubG9nby10ZXh0IHtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgY29sb3I6ICMyMjI7XFxyXFxufVxcclxcblxcclxcbi5sb2dvLWljb24ge1xcclxcbiAgICB3aWR0aDogMzJweDtcXHJcXG4gICAgaGVpZ2h0OiAzMnB4O1xcclxcbiAgICBmaWxsOiAjMjIyO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2lkZWJhciB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAxO1xcclxcbiAgICBncmlkLXJvdzogMjtcXHJcXG5cXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRjlGNjtcXHJcXG4gICAgcGFkZGluZzogMTBweCAyMHB4IDEwcHggMTBweDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZ2FwOiAzMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uc2lkZWJhci1saW5rLWxpc3Qge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbW9kdWxlcy9MYXlvdXQvc2lkZWJhci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVzs7SUFFWCx5QkFBeUI7SUFDekIsNEJBQTRCO0lBQzVCLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsU0FBUztBQUNiOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixnQkFBZ0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnNpZGViYXIge1xcclxcbiAgICBncmlkLWNvbHVtbjogMTtcXHJcXG4gICAgZ3JpZC1yb3c6IDI7XFxyXFxuXFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGQUY5RjY7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweCAxMHB4IDEwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGdhcDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnNpZGViYXItbGluay1saXN0IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxyXFxuLnRvZG8taXRlbXMtY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ2FwOiAyNXB4O1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgzMDBweCwgbWluLWNvbnRlbnQpO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4udG9kby1pdGVtIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgyMDBweCwgMzAwcHgpIG1pbm1heCgyMDBweCwgMzAwcHgpO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcclxcbiAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHJnYig2OCwgMTI3LCAyNTUpO1xcclxcblxcclxcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGOUY2O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtOmhvdmVyIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAycHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE2KTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtIGgzIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBhbGlnbi1zZWxmOiBlbmQ7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW0gaDMgYSB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxufVxcclxcblxcclxcbi5jaGVja0JveENvbnRhaW5lciB7XFxyXFxuICAgIGp1c3RpZnktc2VsZjogZW5kO1xcclxcbiAgICBncmlkLXJvdzogMSAvIHNwYW4gMjtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXHJcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAwcHggMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmNoZWNrQm94Q29udGFpbmVyIHNwYW4ge1xcclxcbiAgICBmb250LXNpemU6IDEycHg7XFxyXFxufVxcclxcblxcclxcbi5wcmlvcml0eS1oaWdoIHtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoMjU1LCA4NywgNTgpO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJpb3JpdHktbWVkaXVtIHtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoMjU1LCAyMDIsIDU4KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByaW9yaXR5LWxvdyB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxNDAsIDI1MywgODgpO1xcclxcbiAgICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHJnYigxNDAsIDI1MywgODgpO1xcclxcbn1cXHJcXG5cXHJcXG4uY2hlY2tib3g6aG92ZXIge1xcclxcbiAgICBjdXJzb3I6ZGVmYXVsdDtcXHJcXG59XFxyXFxuXFxyXFxuLmRlbGV0ZS1wcm9qZWN0LWJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG4gICAgcGFkZGluZzogOHB4IDMwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDY2LCA2Nik7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBzdGFydDtcXHJcXG59XFxyXFxuXFxyXFxuLmRlbGV0ZS1wcm9qZWN0LWJ1dHRvbjpkaXNhYmxlZCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmI7XFxyXFxuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9tb2R1bGVzL1Byb2plY3QvUHJvamVjdERldGFpbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQUNBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7SUFDVCxpREFBaUQ7QUFDckQ7Ozs7QUFJQTtJQUNJLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IsZ0VBQWdFO0lBQ2hFLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsd0NBQXdDOztJQUV4QyxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLDJDQUEyQztJQUMzQyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksU0FBUztJQUNULFVBQVU7SUFDVixlQUFlO0FBQ25COztBQUVBO0lBQ0kscUJBQXFCO0lBQ3JCLFdBQVc7QUFDZjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsY0FBYztJQUNkLGFBQWE7SUFDYiwyQkFBMkI7SUFDM0IscUJBQXFCO0lBQ3JCLG1CQUFtQjtJQUNuQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksdUNBQXVDO0FBQzNDOztBQUVBO0lBQ0ksd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksbUNBQW1DO0lBQ25DLHdDQUF3QztBQUM1Qzs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsaUJBQWlCO0lBQ2pCLGtDQUFrQztJQUNsQyxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsbUJBQW1CO0FBQ3ZCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcclxcbi50b2RvLWl0ZW1zLWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdhcDogMjVweDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMzAwcHgsIG1pbi1jb250ZW50KTtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLnRvZG8taXRlbSB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtaW5tYXgoMjAwcHgsIDMwMHB4KSBtaW5tYXgoMjAwcHgsIDMwMHB4KTtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoNjgsIDEyNywgMjU1KTtcXHJcXG5cXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRjlGNjtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbTpob3ZlciB7XFxyXFxuICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNik7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbSBoMyB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgYWxpZ24tc2VsZjogZW5kO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtIGgzIGEge1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIGNvbG9yOiAjMDAwO1xcclxcbn1cXHJcXG5cXHJcXG4uY2hlY2tCb3hDb250YWluZXIge1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IGVuZDtcXHJcXG4gICAgZ3JpZC1yb3c6IDEgLyBzcGFuIDI7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAyO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzogMHB4IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi5jaGVja0JveENvbnRhaW5lciBzcGFuIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucHJpb3JpdHktaGlnaCB7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgcmdiKDI1NSwgODcsIDU4KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByaW9yaXR5LW1lZGl1bSB7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA4cHggc29saWQgcmdiKDI1NSwgMjAyLCA1OCk7XFxyXFxufVxcclxcblxcclxcbi5wcmlvcml0eS1sb3cge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMTQwLCAyNTMsIDg4KTtcXHJcXG4gICAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2IoMTQwLCAyNTMsIDg4KTtcXHJcXG59XFxyXFxuXFxyXFxuLmNoZWNrYm94OmhvdmVyIHtcXHJcXG4gICAgY3Vyc29yOmRlZmF1bHQ7XFxyXFxufVxcclxcblxcclxcbi5kZWxldGUtcHJvamVjdC1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIHBhZGRpbmc6IDhweCAzMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCA2NiwgNjYpO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGp1c3RpZnktc2VsZjogc3RhcnQ7XFxyXFxufVxcclxcblxcclxcbi5kZWxldGUtcHJvamVjdC1idXR0b246ZGlzYWJsZWQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiO1xcclxcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucHJvamVjdC1saXN0LWNvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIG1pbm1heCgyMDBweCwgMzAwcHgpKTtcXHJcXG4gICAgZ2FwOiAyNXB4O1xcclxcbn1cXHJcXG4ucHJvamVjdC1saXN0LWNvbnRhaW5lciBoMiB7XFxyXFxuICAgIGdyaWQtcm93OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1saXN0LWNvbnRhaW5lciBhIHtcXHJcXG4gICAgZ3JpZC1yb3c6IDI7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtY2FyZCB7XFxyXFxuICAgIGNvbG9yOiAjMDAwO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGQUY5RjY7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LWNhcmQ6aG92ZXIge1xcclxcbiAgICBib3gtc2hhZG93OiAwIDJweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTYpO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1jYXJkIGgzIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbW9kdWxlcy9Qcm9qZWN0L1Byb2plY3RMaXN0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGFBQWE7SUFDYixzREFBc0Q7SUFDdEQsU0FBUztBQUNiO0FBQ0E7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxXQUFXO0lBQ1gscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLDJDQUEyQztBQUMvQzs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnByb2plY3QtbGlzdC1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCBtaW5tYXgoMjAwcHgsIDMwMHB4KSk7XFxyXFxuICAgIGdhcDogMjVweDtcXHJcXG59XFxyXFxuLnByb2plY3QtbGlzdC1jb250YWluZXIgaDIge1xcclxcbiAgICBncmlkLXJvdzogMTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtbGlzdC1jb250YWluZXIgYSB7XFxyXFxuICAgIGdyaWQtcm93OiAyO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0LWNhcmQge1xcclxcbiAgICBjb2xvcjogIzAwMDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGOUY2O1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1jYXJkOmhvdmVyIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAycHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE2KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtY2FyZCBoMyB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiZm9ybSB7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWlubWF4KDMwJSwgNDAwcHgpO1xcclxcbiAgICBqdXN0aWZ5LWl0ZW1zOiBzdGFydDtcXHJcXG4gICAgZ2FwOiAxMHB4O1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5mb3JtIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSwgdGV4dGFyZWEge1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IHN0cmV0Y2g7XFxyXFxufVxcclxcblxcclxcbmZvcm0gYnV0dG9uIHtcXHJcXG4gICAgYm9yZGVyOiAwO1xcclxcbiAgICBwYWRkaW5nOiA4cHggMzBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsIDE0MCwgMjU1KTtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL21vZHVsZXMvVG9kb0l0ZW0vQWRkVG9kb0l0ZW0uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtJQUNiLHlDQUF5QztJQUN6QyxvQkFBb0I7SUFDcEIsU0FBUztJQUNULGFBQWE7QUFDakI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsaUJBQWlCO0lBQ2pCLGtDQUFrQztJQUNsQyxZQUFZO0lBQ1osaUJBQWlCO0FBQ3JCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImZvcm0ge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgzMCUsIDQwMHB4KTtcXHJcXG4gICAganVzdGlmeS1pdGVtczogc3RhcnQ7XFxyXFxuICAgIGdhcDogMTBweDtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuZm9ybSBpbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0sIHRleHRhcmVhIHtcXHJcXG4gICAganVzdGlmeS1zZWxmOiBzdHJldGNoO1xcclxcbn1cXHJcXG5cXHJcXG5mb3JtIGJ1dHRvbiB7XFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG4gICAgcGFkZGluZzogOHB4IDMwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigwLCAxNDAsIDI1NSk7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi50b2RvSXRlbUNvbnRlbnQge1xcclxcbiAgICB3aWR0aDogMzAlO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAzZnI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcclxcbiAgICBnYXA6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW0tY29udGFpbmVyIGgyIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtLWNvbnRhaW5lciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGQUY5RjY7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgcGFkZGluZzogMXJlbTtcXHJcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggcmdiYSgwLDAsMCwwLjE3KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3Qgc3BhbiB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAxO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdCBzZWxlY3Qge1xcclxcbiAgICBncmlkLWNvbHVtbjogMjtcXHJcXG59XFxyXFxuXFxyXFxuLmRlbGV0ZS10b2RvaXRlbS1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIHBhZGRpbmc6IDhweCAzMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCA2NiwgNjYpO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5kZWxldGUtdG9kb2l0ZW0tYnV0dG9uIGJ1dHRvbjpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDg3LCA4Nyk7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9tb2R1bGVzL1RvZG9JdGVtL1RvZG9JdGVtRGV0YWlsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFVBQVU7SUFDVixhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG9CQUFvQjtJQUNwQixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2Isd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksY0FBYzs7QUFFbEI7O0FBRUE7SUFDSSxjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksU0FBUztJQUNULGlCQUFpQjtJQUNqQixrQ0FBa0M7SUFDbEMsWUFBWTtJQUNaLGlCQUFpQjtJQUNqQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksa0NBQWtDO0FBQ3RDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50b2RvSXRlbUNvbnRlbnQge1xcclxcbiAgICB3aWR0aDogMzAlO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAzZnI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcclxcbiAgICBnYXA6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW0tY29udGFpbmVyIGgyIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtLWNvbnRhaW5lciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGQUY5RjY7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgcGFkZGluZzogMXJlbTtcXHJcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggcmdiYSgwLDAsMCwwLjE3KTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3Qgc3BhbiB7XFxyXFxuICAgIGdyaWQtY29sdW1uOiAxO1xcclxcblxcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdCBzZWxlY3Qge1xcclxcbiAgICBncmlkLWNvbHVtbjogMjtcXHJcXG59XFxyXFxuXFxyXFxuLmRlbGV0ZS10b2RvaXRlbS1idXR0b24ge1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIHBhZGRpbmc6IDhweCAzMHB4O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCA2NiwgNjYpO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5kZWxldGUtdG9kb2l0ZW0tYnV0dG9uIGJ1dHRvbjpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDg3LCA4Nyk7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcclxcbiAgICBmb250LWZhbWlseTogJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMHZoO1xcclxcblxcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwMHB4IDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2MHB4IDFmcjtcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4tY29udGVudCB7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHggNDBweDtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSw2Q0FBNkM7QUFDakQ7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsYUFBYTs7SUFFYixhQUFhO0lBQ2IsZ0NBQWdDO0lBQ2hDLDRCQUE0QjtBQUNoQzs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixjQUFjO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcclxcbiAgICBmb250LWZhbWlseTogJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMHZoO1xcclxcblxcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwMHB4IDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiA2MHB4IDFmcjtcXHJcXG59XFxyXFxuXFxyXFxuLm1haW4tY29udGVudCB7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHggNDBweDtcXHJcXG4gICAgZ3JpZC1jb2x1bW46IDI7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNMTksMTlINVY4SDE5TTE2LDFWM0g4VjFINlYzSDVDMy44OSwzIDMsMy44OSAzLDVWMTlBMiwyIDAgMCwwIDUsMjFIMTlBMiwyIDAgMCwwIDIxLDE5VjVDMjEsMy44OSAyMC4xLDMgMTksM0gxOFYxXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTE1LDEzSDE2LjVWMTUuODJMMTguOTQsMTcuMjNMMTguMTksMTguNTNMMTUsMTYuNjlWMTNNMTksOEg1VjE5SDkuNjdDOS4yNCwxOC4wOSA5LDE3LjA3IDksMTZBNyw3IDAgMCwxIDE2LDlDMTcuMDcsOSAxOC4wOSw5LjI0IDE5LDkuNjdWOE01LDIxQzMuODksMjEgMywyMC4xIDMsMTlWNUMzLDMuODkgMy44OSwzIDUsM0g2VjFIOFYzSDE2VjFIMThWM0gxOUEyLDIgMCAwLDEgMjEsNVYxMS4xQzIyLjI0LDEyLjM2IDIzLDE0LjA5IDIzLDE2QTcsNyAwIDAsMSAxNiwyM0MxNC4wOSwyMyAxMi4zNiwyMi4yNCAxMS4xLDIxSDVNMTYsMTEuMTVBNC44NSw0Ljg1IDAgMCwwIDExLjE1LDE2QzExLjE1LDE4LjY4IDEzLjMyLDIwLjg1IDE2LDIwLjg1QTQuODUsNC44NSAwIDAsMCAyMC44NSwxNkMyMC44NSwxMy4zMiAxOC42OCwxMS4xNSAxNiwxMS4xNVpcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDI0IDI0XFxcIj48cGF0aCBkPVxcXCJNMjEsN0w5LDE5TDMuNSwxMy41TDQuOTEsMTIuMDlMOSwxNi4xN0wxOS41OSw1LjU5TDIxLDdaXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTcuNDEsOC41OEwxMiwxMy4xN0wxNi41OSw4LjU4TDE4LDEwTDEyLDE2TDYsMTBMNy40MSw4LjU4WlxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0xOSAzSDE0LjgyQzE0LjQgMS44NCAxMy4zIDEgMTIgMVM5LjYgMS44NCA5LjE4IDNINUMzLjkgMyAzIDMuOSAzIDVWMTlDMyAyMC4xIDMuOSAyMSA1IDIxSDE5QzIwLjEgMjEgMjEgMjAuMSAyMSAxOVY1QzIxIDMuOSAyMC4xIDMgMTkgM00xMiAzQzEyLjU1IDMgMTMgMy40NSAxMyA0UzEyLjU1IDUgMTIgNSAxMSA0LjU1IDExIDQgMTEuNDUgMyAxMiAzTTcgN0gxN1Y1SDE5VjE5SDVWNUg3VjdNMTIgMTdWMTVIMTdWMTdIMTJNMTIgMTFWOUgxN1YxMUgxMk04IDEyVjlIN1Y4SDlWMTJIOE05LjI1IDE0QzkuNjYgMTQgMTAgMTQuMzQgMTAgMTQuNzVDMTAgMTQuOTUgOS45MiAxNS4xNCA5Ljc5IDE1LjI3TDguMTIgMTdIMTBWMThIN1YxNy4wOEw5IDE1SDdWMTRIOS4yNVxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0xOSAzSDVDMy45IDMgMyAzLjkgMyA1VjE5QzMgMjAuMSAzLjkgMjEgNSAyMUgxOUMyMC4xIDIxIDIxIDIwLjEgMjEgMTlWNUMyMSAzLjkgMjAuMSAzIDE5IDNNNyA3SDlWOUg3VjdNNyAxMUg5VjEzSDdWMTFNNyAxNUg5VjE3SDdWMTVNMTcgMTdIMTFWMTVIMTdWMTdNMTcgMTNIMTFWMTFIMTdWMTNNMTcgOUgxMVY3SDE3VjlaXFxcIj48L3BhdGg+PC9zdmc+XCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTE5LDEzSDEzVjE5SDExVjEzSDVWMTFIMTFWNUgxM1YxMUgxOVYxM1pcXFwiPjwvcGF0aD48L3N2Zz5cIiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImNsYXNzIFB1YlN1YiB7XHJcbiAgICBldmVudHMgPSB7fTtcclxuXHJcbiAgICBwdWJsaXNoKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgbGlzdGVuZXIgb2YgdGhpcy5ldmVudHNbZXZlbnRdKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdWJzY3JpYmUoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5zdWJzY3JpYmUoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLnJlbW92ZShcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLmZpbmQobGlzdGVuZXIgPT4gbGlzdGVuZXIgPT09IGNhbGxiYWNrKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBQdWJTdWIoKTsiLCJleHBvcnQgY2xhc3MgVG9kb0l0ZW0ge1xyXG4gICAgY29uc3RydWN0b3IoaWQsIHRpdGxlLCBwcmlvcml0eSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIGlzQ29tcGxldGUsIHByb2plY3RJZCkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5LFxyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xyXG4gICAgICAgIHRoaXMuaXNDb21wbGV0ZSA9IGlzQ29tcGxldGUgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByaW9yaXRpZXMgPSB7XHJcbiAgICAgICAgMTogXCJDcml0aWNhbFwiLFxyXG4gICAgICAgIDI6IFwiSW1wb3J0YW50XCIsXHJcbiAgICAgICAgMzogXCJEZWZhdWx0XCJcclxuICAgIH1cclxufSIsImltcG9ydCBQdWJTdWIgZnJvbSBcIi4vUHViU3ViXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dElkKGFycikge1xyXG4gICAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnIucmVkdWNlKChwcmV2aW91cywgaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5pZCA8IGl0ZW0uaWQgPyBpdGVtIDogcHJldmlvdXNcclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgIH0pLmlkICsgMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hMaW5rKHBhZ2UsIGRhdGEpIHtcclxuICAgIFB1YlN1Yi5wdWJsaXNoKCdjaGFuZ2VQYWdlJywge1xyXG4gICAgICAgIHBhZ2UsXHJcbiAgICAgICAgZGF0YVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmRleEZyb21JZChhcnIsIGlkKSB7XHJcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcclxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzU2FtZURheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciAwNjowMDowMCBhbmQgNCBTZXB0ZW1iZXIgMTg6MDA6MDAgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQsIDYsIDApLCBuZXcgRGF0ZSgyMDE0LCA4LCA0LCAxOCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIGFuZCA0IE9jdG9iZXIgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE0LCA5LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyLCAyMDE0IGFuZCA0IFNlcHRlbWJlciwgMjAxNSBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTUsIDgsIDQpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZURheShkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZEYXkuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mRGF5LmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9JdGVtXCI7XHJcbmltcG9ydCB7IGdldE5leHRJZCwgZ2V0SW5kZXhGcm9tSWQgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgaXNGdXR1cmUgZnJvbSBcImRhdGUtZm5zL2lzRnV0dXJlXCI7XHJcbmltcG9ydCBpc1RvZGF5IGZyb20gXCJkYXRlLWZucy9pc1RvZGF5XCI7XHJcbmltcG9ydCBQdWJTdWIgZnJvbSBcIi4uL1B1YlN1YlwiO1xyXG5cclxuY29uc3QgdG9kb0l0ZW1zID0gbG9hZFRvZG9JdGVtcygpIHx8IFtdO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGxvYWRUb2RvSXRlbXMoKSB7XHJcbiAgICBjb25zdCB0ZW1wVG9kb0l0ZW1zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0l0ZW1zJykpO1xyXG4gICAgaWYgKCF0ZW1wVG9kb0l0ZW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3VG9kb0l0ZW1zID0gdGVtcFRvZG9JdGVtcy5tYXAoaXRlbSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV3SXRlbSA9IG5ldyBUb2RvSXRlbShcclxuICAgICAgICAgICAgaXRlbS5pZCxcclxuICAgICAgICAgICAgaXRlbS50aXRsZSxcclxuICAgICAgICAgICAgaXRlbS5wcmlvcml0eSxcclxuICAgICAgICAgICAgaXRlbS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgbmV3IERhdGUoaXRlbS5kdWVEYXRlKSxcclxuICAgICAgICAgICAgaXRlbS5pc0NvbXBsZXRlLFxyXG4gICAgICAgICAgICBpdGVtLnByb2plY3RJZFxyXG4gICAgICAgIClcclxuICAgICAgICByZXR1cm4gbmV3SXRlbTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5ld1RvZG9JdGVtcztcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVG9kb0l0ZW0odGl0bGUsIHByaW9yaXR5LCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJvamVjdElkKSB7XHJcbiAgICBjb25zdCBuZXdJZCA9IGdldE5leHRJZCh0b2RvSXRlbXMpO1xyXG4gICAgaWYgKCF0aXRsZSB8fCAhcHJpb3JpdHkgfHwgIWRlc2NyaXB0aW9uIHx8ICFkdWVEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoIU51bWJlcihwcmlvcml0eSkpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGR1ZURhdGUgPSBuZXcgRGF0ZShkdWVEYXRlKTtcclxuICAgIGNvbnN0IG5ld1RvZG9JdGVtID0gbmV3IFRvZG9JdGVtKG5ld0lkLCB0aXRsZSwgTnVtYmVyKHByaW9yaXR5KSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByb2plY3RJZCB8fCAxKTtcclxuICAgIHRvZG9JdGVtcy5wdXNoKG5ld1RvZG9JdGVtKTtcclxuICAgIFB1YlN1Yi5wdWJsaXNoKCdUb2RvSXRlbXNDaGFuZ2VkJyk7XHJcbiAgICByZXR1cm4gbmV3VG9kb0l0ZW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRvZG9JdGVtcygpIHtcclxuICAgIHJldHVybiB0b2RvSXRlbXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRvZG9JdGVtc1RvZGF5KCkge1xyXG4gICAgcmV0dXJuIGdldFRvZG9JdGVtcygpLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICByZXR1cm4gaXNUb2RheShpdGVtLmR1ZURhdGUpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRvZG9JdGVtc1VwY29taW5nKCkge1xyXG4gICAgcmV0dXJuIGdldFRvZG9JdGVtcygpLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICByZXR1cm4gaXNGdXR1cmUoaXRlbS5kdWVEYXRlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb2RvSXRlbUJ5SWQoaWQpIHtcclxuICAgIHJldHVybiB0b2RvSXRlbXMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGlkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVsZXRlVG9kb0l0ZW0oaWQpIHtcclxuICAgIHRvZG9JdGVtcy5zcGxpY2UoZ2V0SW5kZXhGcm9tSWQodG9kb0l0ZW1zLCBpZCksIDEpO1xyXG4gICAgUHViU3ViLnB1Ymxpc2goJ1RvZG9JdGVtc0NoYW5nZWQnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlVG9kb0l0ZW0oaXRlbSkge1xyXG4gICAgY29uc3Qgb2xkSXRlbSA9IGdldFRvZG9JdGVtQnlJZChpdGVtLmlkKTtcclxuICAgIGlmICghb2xkSXRlbSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0b2RvSXRlbXNbZ2V0SW5kZXhGcm9tSWQodG9kb0l0ZW1zLCBpdGVtLmlkKV0gPSBpdGVtO1xyXG4gICAgUHViU3ViLnB1Ymxpc2goJ1RvZG9JdGVtc0NoYW5nZWQnKTtcclxufVxyXG5cclxuUHViU3ViLnN1YnNjcmliZSgnVG9kb0l0ZW1zQ2hhbmdlZCcsICgpID0+IHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2RvSXRlbXMnLCBKU09OLnN0cmluZ2lmeSh0b2RvSXRlbXMpKTtcclxufSk7XHJcblxyXG5leHBvcnQgeyBhZGRUb2RvSXRlbSwgZ2V0VG9kb0l0ZW1zLCBnZXRUb2RvSXRlbUJ5SWQsIGRlbGV0ZVRvZG9JdGVtLCB1cGRhdGVUb2RvSXRlbSwgZ2V0VG9kb0l0ZW1zVG9kYXksIGdldFRvZG9JdGVtc1VwY29taW5nIH07IiwiaW1wb3J0IGlzU2FtZURheSBmcm9tIFwiLi4vaXNTYW1lRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1RvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB0b2RheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0LCBpcyA2IE9jdG9iZXIgMTQ6MDA6MDAgdG9kYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1RvZGF5KG5ldyBEYXRlKDIwMTQsIDksIDYsIDE0LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVG9kYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lRGF5KGRpcnR5RGF0ZSwgRGF0ZS5ub3coKSk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0Z1dHVyZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgZnV0dXJlP1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBmdXR1cmU/XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIGluIHRoZSBmdXR1cmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNCwgaXMgMzEgRGVjZW1iZXIgMjAxNCBpbiB0aGUgZnV0dXJlP1xuICogY29uc3QgcmVzdWx0ID0gaXNGdXR1cmUobmV3IERhdGUoMjAxNCwgMTEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRnV0dXJlKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKSA+IERhdGUubm93KCk7XG59IiwiZXhwb3J0IGNsYXNzIFByb2plY3Qge1xyXG4gICAgY29uc3RydWN0b3IoaWQsIG5hbWUpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi9Qcm9qZWN0XCI7XHJcbmltcG9ydCB7IGdldE5leHRJZCwgZ2V0SW5kZXhGcm9tSWQgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgUHViU3ViIGZyb20gXCIuLi9QdWJTdWJcIjtcclxuXHJcbmNvbnN0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSkgfHwgW107XHJcbmlmIChwcm9qZWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgIGFkZFByb2plY3QoJ0RlZmF1bHQnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkUHJvamVjdChuYW1lKSB7XHJcbiAgICBjb25zdCBuZXdJZCA9IGdldE5leHRJZChwcm9qZWN0cyk7XHJcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IFByb2plY3QobmV3SWQsIG5hbWUpO1xyXG4gICAgcHJvamVjdHMucHVzaChuZXdQcm9qZWN0KTtcclxuICAgIFB1YlN1Yi5wdWJsaXNoKCdQcm9qZWN0Q2hhbmdlZCcpO1xyXG4gICAgcmV0dXJuIG5ld1Byb2plY3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFByb2plY3RzKCkge1xyXG4gICAgcmV0dXJuIHByb2plY3RzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRQcm9qZWN0QnlJZChpZCkge1xyXG4gICAgcmV0dXJuIHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09PSBpZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlbGV0ZVByb2plY3QoaWQpIHtcclxuICAgIHByb2plY3RzLnNwbGljZShnZXRJbmRleEZyb21JZChwcm9qZWN0cywgaWQpLCAxKTtcclxuICAgIFB1YlN1Yi5wdWJsaXNoKCdQcm9qZWN0Q2hhbmdlZCcpO1xyXG59XHJcblxyXG5QdWJTdWIuc3Vic2NyaWJlKCdQcm9qZWN0Q2hhbmdlZCcsICgpID0+IHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IHsgYWRkUHJvamVjdCwgZ2V0UHJvamVjdHMsIGdldFByb2plY3RCeUlkLCBkZWxldGVQcm9qZWN0IH0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9kb0l0ZW1EZXRhaWwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ub2RvSXRlbURldGFpbC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2hlY2tib3guY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DaGVja2JveC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgY2hlY2tTdmcgZnJvbSAnLi4vLi4vYXNzZXRzL2ljb25zL2NoZWNrLnN2ZydcclxuaW1wb3J0ICcuL0NoZWNrYm94LmNzcyc7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrYm94IHtcclxuICAgIGNvbnN0cnVjdG9yKGNoZWNrZWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jaGVja2JveERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tib3hEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5jaGVja2JveERpdi5jbGFzc0xpc3QuYWRkKCdjaGVja2JveCcpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tNYXJrKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tib3hEaXY7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja01hcmsoKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVDaGVja01hcmsoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wU3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRlbXBTdmcuaW5uZXJIVE1MID0gY2hlY2tTdmc7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hEaXYuYXBwZW5kQ2hpbGQodGVtcFN2Zy5maXJzdENoaWxkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94RGl2LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZm9ybWF0SVNPXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZSBhY2NvcmRpbmcgdG8gdGhlIElTTyA4NjAxIHN0YW5kYXJkIChodHRwczovL3N1cHBvcnQuc2FzLmNvbS9kb2N1bWVudGF0aW9uL2NkbC9lbi9scmRpY3QvNjQzMTYvSFRNTC9kZWZhdWx0L3ZpZXdlci5odG0jYTAwMzE2OTgxNC5odG0pLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gSVNPIDg2MDEgZm9ybWF0LiBPcHRpb25zIG1heSBiZSBwYXNzZWQgdG8gY29udHJvbCB0aGUgcGFydHMgYW5kIG5vdGF0aW9ucyBvZiB0aGUgZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHsnZXh0ZW5kZWQnfCdiYXNpYyd9IFtvcHRpb25zLmZvcm1hdD0nZXh0ZW5kZWQnXSAtIGlmICdiYXNpYycsIGhpZGUgZGVsaW1pdGVycyBiZXR3ZWVuIGRhdGUgYW5kIHRpbWUgdmFsdWVzLlxuICogQHBhcmFtIHsnY29tcGxldGUnfCdkYXRlJ3wndGltZSd9IFtvcHRpb25zLnJlcHJlc2VudGF0aW9uPSdjb21wbGV0ZSddIC0gZm9ybWF0IGRhdGUsIHRpbWUgd2l0aCBsb2NhbCB0aW1lIHpvbmUsIG9yIGJvdGguXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIChpbiBsb2NhbCB0aW1lIHpvbmUpXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZvcm1hdGAgbXVzdCBiZSAnZXh0ZW5kZWQnIG9yICdiYXNpYydcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLnJlcHJlc2VudGF0aW9uYCBtdXN0IGJlICdkYXRlJywgJ3RpbWUnIG9yICdjb21wbGV0ZSdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDE4IFNlcHRlbWJlciAyMDE5IGluIElTTyA4NjAxIGZvcm1hdCAobG9jYWwgdGltZSB6b25lIGlzIFVUQyk6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXRJU08obmV3IERhdGUoMjAxOSwgOCwgMTgsIDE5LCAwLCA1MikpXG4gKiAvLz0+ICcyMDE5LTA5LTE4VDE5OjAwOjUyWidcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDE4IFNlcHRlbWJlciAyMDE5IGluIElTTyA4NjAxLCBzaG9ydCBmb3JtYXQgKGxvY2FsIHRpbWUgem9uZSBpcyBVVEMpOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0SVNPKG5ldyBEYXRlKDIwMTksIDgsIDE4LCAxOSwgMCwgNTIpLCB7IGZvcm1hdDogJ2Jhc2ljJyB9KVxuICogLy89PiAnMjAxOTA5MThUMTkwMDUyJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTggU2VwdGVtYmVyIDIwMTkgaW4gSVNPIDg2MDEgZm9ybWF0LCBkYXRlIG9ubHk6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXRJU08obmV3IERhdGUoMjAxOSwgOCwgMTgsIDE5LCAwLCA1MiksIHsgcmVwcmVzZW50YXRpb246ICdkYXRlJyB9KVxuICogLy89PiAnMjAxOS0wOS0xOCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDE4IFNlcHRlbWJlciAyMDE5IGluIElTTyA4NjAxIGZvcm1hdCwgdGltZSBvbmx5IChsb2NhbCB0aW1lIHpvbmUgaXMgVVRDKTpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdElTTyhuZXcgRGF0ZSgyMDE5LCA4LCAxOCwgMTksIDAsIDUyKSwgeyByZXByZXNlbnRhdGlvbjogJ3RpbWUnIH0pXG4gKiAvLz0+ICcxOTowMDo1MlonXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0SVNPKGRhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGZvcm1hdCwgX29wdGlvbnMkcmVwcmVzZW50YXRpO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRhdGUpO1xuXG4gIGlmIChpc05hTihvcmlnaW5hbERhdGUuZ2V0VGltZSgpKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfVxuXG4gIHZhciBmb3JtYXQgPSBTdHJpbmcoKF9vcHRpb25zJGZvcm1hdCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5mb3JtYXQpICE9PSBudWxsICYmIF9vcHRpb25zJGZvcm1hdCAhPT0gdm9pZCAwID8gX29wdGlvbnMkZm9ybWF0IDogJ2V4dGVuZGVkJyk7XG4gIHZhciByZXByZXNlbnRhdGlvbiA9IFN0cmluZygoX29wdGlvbnMkcmVwcmVzZW50YXRpID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlcHJlc2VudGF0aW9uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRyZXByZXNlbnRhdGkgIT09IHZvaWQgMCA/IF9vcHRpb25zJHJlcHJlc2VudGF0aSA6ICdjb21wbGV0ZScpO1xuXG4gIGlmIChmb3JtYXQgIT09ICdleHRlbmRlZCcgJiYgZm9ybWF0ICE9PSAnYmFzaWMnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJmb3JtYXQgbXVzdCBiZSAnZXh0ZW5kZWQnIG9yICdiYXNpYydcIik7XG4gIH1cblxuICBpZiAocmVwcmVzZW50YXRpb24gIT09ICdkYXRlJyAmJiByZXByZXNlbnRhdGlvbiAhPT0gJ3RpbWUnICYmIHJlcHJlc2VudGF0aW9uICE9PSAnY29tcGxldGUnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJyZXByZXNlbnRhdGlvbiBtdXN0IGJlICdkYXRlJywgJ3RpbWUnLCBvciAnY29tcGxldGUnXCIpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgdHpPZmZzZXQgPSAnJztcbiAgdmFyIGRhdGVEZWxpbWl0ZXIgPSBmb3JtYXQgPT09ICdleHRlbmRlZCcgPyAnLScgOiAnJztcbiAgdmFyIHRpbWVEZWxpbWl0ZXIgPSBmb3JtYXQgPT09ICdleHRlbmRlZCcgPyAnOicgOiAnJzsgLy8gUmVwcmVzZW50YXRpb24gaXMgZWl0aGVyICdkYXRlJyBvciAnY29tcGxldGUnXG5cbiAgaWYgKHJlcHJlc2VudGF0aW9uICE9PSAndGltZScpIHtcbiAgICB2YXIgZGF5ID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXREYXRlKCksIDIpO1xuICAgIHZhciBtb250aCA9IGFkZExlYWRpbmdaZXJvcyhvcmlnaW5hbERhdGUuZ2V0TW9udGgoKSArIDEsIDIpO1xuICAgIHZhciB5ZWFyID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXRGdWxsWWVhcigpLCA0KTsgLy8geXl5eU1NZGQgb3IgeXl5eS1NTS1kZC5cblxuICAgIHJlc3VsdCA9IFwiXCIuY29uY2F0KHllYXIpLmNvbmNhdChkYXRlRGVsaW1pdGVyKS5jb25jYXQobW9udGgpLmNvbmNhdChkYXRlRGVsaW1pdGVyKS5jb25jYXQoZGF5KTtcbiAgfSAvLyBSZXByZXNlbnRhdGlvbiBpcyBlaXRoZXIgJ3RpbWUnIG9yICdjb21wbGV0ZSdcblxuXG4gIGlmIChyZXByZXNlbnRhdGlvbiAhPT0gJ2RhdGUnKSB7XG4gICAgLy8gQWRkIHRoZSB0aW1lem9uZS5cbiAgICB2YXIgb2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICB2YXIgYWJzb2x1dGVPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICAgICAgdmFyIGhvdXJPZmZzZXQgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNvbHV0ZU9mZnNldCAvIDYwKSwgMik7XG4gICAgICB2YXIgbWludXRlT2Zmc2V0ID0gYWRkTGVhZGluZ1plcm9zKGFic29sdXRlT2Zmc2V0ICUgNjAsIDIpOyAvLyBJZiBsZXNzIHRoYW4gMCwgdGhlIHNpZ24gaXMgKywgYmVjYXVzZSBpdCBpcyBhaGVhZCBvZiB0aW1lLlxuXG4gICAgICB2YXIgc2lnbiA9IG9mZnNldCA8IDAgPyAnKycgOiAnLSc7XG4gICAgICB0ek9mZnNldCA9IFwiXCIuY29uY2F0KHNpZ24pLmNvbmNhdChob3VyT2Zmc2V0LCBcIjpcIikuY29uY2F0KG1pbnV0ZU9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR6T2Zmc2V0ID0gJ1onO1xuICAgIH1cblxuICAgIHZhciBob3VyID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXRIb3VycygpLCAyKTtcbiAgICB2YXIgbWludXRlID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXRNaW51dGVzKCksIDIpO1xuICAgIHZhciBzZWNvbmQgPSBhZGRMZWFkaW5nWmVyb3Mob3JpZ2luYWxEYXRlLmdldFNlY29uZHMoKSwgMik7IC8vIElmIHRoZXJlJ3MgYWxzbyBkYXRlLCBzZXBhcmF0ZSBpdCB3aXRoIHRpbWUgd2l0aCAnVCdcblxuICAgIHZhciBzZXBhcmF0b3IgPSByZXN1bHQgPT09ICcnID8gJycgOiAnVCc7IC8vIENyZWF0ZXMgYSB0aW1lIHN0cmluZyBjb25zaXN0aW5nIG9mIGhvdXIsIG1pbnV0ZSwgYW5kIHNlY29uZCwgc2VwYXJhdGVkIGJ5IGRlbGltaXRlcnMsIGlmIGRlZmluZWQuXG5cbiAgICB2YXIgdGltZSA9IFtob3VyLCBtaW51dGUsIHNlY29uZF0uam9pbih0aW1lRGVsaW1pdGVyKTsgLy8gSEhtbXNzIG9yIEhIOm1tOnNzLlxuXG4gICAgcmVzdWx0ID0gXCJcIi5jb25jYXQocmVzdWx0KS5jb25jYXQoc2VwYXJhdG9yKS5jb25jYXQodGltZSkuY29uY2F0KHR6T2Zmc2V0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IHsgZGVsZXRlVG9kb0l0ZW0sIGdldFRvZG9JdGVtQnlJZCwgdXBkYXRlVG9kb0l0ZW0gfSBmcm9tIFwiLi9Ub2RvSXRlbUNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgZ2V0UHJvamVjdEJ5SWQsIGdldFByb2plY3RzIH0gZnJvbSBcIi4uL1Byb2plY3QvUHJvamVjdENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9JdGVtXCI7XHJcbmltcG9ydCAnLi9Ub2RvSXRlbURldGFpbC5jc3MnO1xyXG5pbXBvcnQgUHViU3ViIGZyb20gXCIuLi9QdWJTdWJcIjtcclxuaW1wb3J0IENoZWNrYm94IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0NoZWNrYm94XCI7XHJcbmltcG9ydCBmb3JtYXRJU08gZnJvbSAnZGF0ZS1mbnMvZm9ybWF0SVNPJ1xyXG5jbGFzcyBUb2RvSXRlbURldGFpbCB7XHJcbiAgICByZW5kZXIoaWQpIHtcclxuICAgICAgICB0aGlzLnRvZG9JdGVtID0gZ2V0VG9kb0l0ZW1CeUlkKGlkKTtcclxuICAgICAgICBpZiAoIXRoaXMudG9kb0l0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gZ2V0UHJvamVjdEJ5SWQodGhpcy50b2RvSXRlbS5wcm9qZWN0SWQpO1xyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdG9kb0l0ZW1EaXYuY2xhc3NMaXN0LmFkZCgndG9kby1pdGVtLWNvbnRhaW5lcicpO1xyXG5cclxuICAgICAgICBjb25zdCB0b2RvSXRlbUhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICAgICAgdG9kb0l0ZW1IZWFkZXIudGV4dENvbnRlbnQgPSB0aGlzLnRvZG9JdGVtLnRpdGxlO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgdG9kb0l0ZW1Db250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmNsYXNzTGlzdC5hZGQoJ3RvZG9JdGVtQ29udGVudCcpO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9qZWN0U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBwcm9qZWN0U3Bhbi50ZXh0Q29udGVudCA9ICdQcm9qZWN0OiAnO1xyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZChwcm9qZWN0U3Bhbik7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgIHByb2plY3RMaW5rLmhyZWYgPSAnIyc7XHJcbiAgICAgICAgcHJvamVjdExpbmsudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XHJcbiAgICAgICAgcHJvamVjdExpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHB1Ymxpc2hMaW5rKCdQcm9qZWN0RGV0YWlsJywgcHJvamVjdC5pZClcclxuICAgICAgICB9KTtcclxuICAgICAgICBwcm9qZWN0U3Bhbi5hcHBlbmRDaGlsZChwcm9qZWN0TGluayk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuICAgICAgICBwcm9qZWN0U2VsZWN0Lm5hbWUgPSAncHJvamVjdCc7XHJcbiAgICAgICAgZm9yIChsZXQgcHJvamVjdCBvZiBnZXRQcm9qZWN0cygpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvamVjdE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgICAgICBwcm9qZWN0T3B0aW9uLm5hbWUgPSAncHJvamVjdCc7XHJcbiAgICAgICAgICAgIHByb2plY3RPcHRpb24udmFsdWUgPSBwcm9qZWN0LmlkO1xyXG4gICAgICAgICAgICBwcm9qZWN0T3B0aW9uLnRleHQgPSBwcm9qZWN0Lm5hbWU7XHJcbiAgICAgICAgICAgIHByb2plY3RTZWxlY3QuYXBwZW5kQ2hpbGQocHJvamVjdE9wdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChwcm9qZWN0LmlkID09PSB0aGlzLnRvZG9JdGVtLnByb2plY3RJZCkge1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdE9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvamVjdFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtLnByb2plY3RJZCA9IE51bWJlcihlLnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMub25JdGVtQ2hhbmdlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvamVjdFNlbGVjdCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByaW9yaXR5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gICAgICAgIHByaW9yaXR5TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAncHJpb3JpdHknKTtcclxuICAgICAgICBwcmlvcml0eUxhYmVsLnRleHRDb250ZW50ID0gJ1ByaW9yaXR5JztcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQocHJpb3JpdHlMYWJlbCk7XHJcbiAgICAgICAgY29uc3QgcHJpb3JpdHlTZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuICAgICAgICBwcmlvcml0eVNlbGVjdC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgcHJpb3JpdHlTZWxlY3QubmFtZSA9ICdwcmlvcml0eSc7XHJcbiAgICAgICAgcHJpb3JpdHlTZWxlY3QuaWQgPSAncHJpb3JpdHknO1xyXG4gICAgICAgIGZvciAoY29uc3QgcHJpb3JpdHkgb2YgT2JqZWN0LmtleXMoVG9kb0l0ZW0ucHJpb3JpdGllcykpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJpb3JpdHlOdW0gPSBOdW1iZXIocHJpb3JpdHkpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmlvcml0eU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgICAgICBwcmlvcml0eU9wdGlvbi5uYW1lID0gJ3ByaW9yaXR5JztcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24udmFsdWUgPSBwcmlvcml0eU51bTtcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24udGV4dCA9IFRvZG9JdGVtLnByaW9yaXRpZXNbcHJpb3JpdHlOdW1dO1xyXG4gICAgICAgICAgICBpZiAocHJpb3JpdHlOdW0gPT09IHRoaXMudG9kb0l0ZW0ucHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgIHByaW9yaXR5T3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmlvcml0eVNlbGVjdC5hcHBlbmRDaGlsZChwcmlvcml0eU9wdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudG9kb0l0ZW0ucHJpb3JpdHkgPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLm9uSXRlbUNoYW5nZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKHByaW9yaXR5U2VsZWN0KTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgICAgZGVzY3JpcHRpb25MYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdkZXNjcmlwdGlvbicpO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uTGFiZWwudGV4dENvbnRlbnQgPSAnRGVzY3JpcHRpb24nO1xyXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uSW5wdXQudmFsdWUgPSB0aGlzLnRvZG9JdGVtLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uSW5wdXQubmFtZSA9ICdkZXNjcmlwdGlvbic7XHJcbiAgICAgICAgZGVzY3JpcHRpb25JbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtLmRlc2NyaXB0aW9uID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMub25JdGVtQ2hhbmdlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uTGFiZWwpO1xyXG4gICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbklucHV0KTtcclxuXHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBkdWVEYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnZHVlRGF0ZScpO1xyXG4gICAgICAgIGR1ZURhdGVMYWJlbC50ZXh0Q29udGVudCA9ICdEdWUgRGF0ZSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKGR1ZURhdGVMYWJlbCk7XHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZVNlbGVjdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICBkdWVEYXRlU2VsZWN0b3IudHlwZSA9ICdkYXRlJztcclxuICAgICAgICBkdWVEYXRlU2VsZWN0b3IubmFtZSA9ICdkdWVEYXRlJztcclxuICAgICAgICBkdWVEYXRlU2VsZWN0b3IudmFsdWUgPSBmb3JtYXRJU08odGhpcy50b2RvSXRlbS5kdWVEYXRlLCB7cmVwcmVzZW50YXRpb246ICdkYXRlJ30pO1xyXG4gICAgICAgIGR1ZURhdGVTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtLmR1ZURhdGUgPSBuZXcgRGF0ZShlLnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMudG9kb0l0ZW0uZHVlRGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMub25JdGVtQ2hhbmdlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKGR1ZURhdGVTZWxlY3Rvcik7XHJcblxyXG4gICAgICAgIGNvbnN0IGlzQ29tcGxldGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIGlzQ29tcGxldGVTcGFuLnRleHRDb250ZW50ID0gJ0lzIGNvbXBsZXRlZCc7XHJcbiAgICAgICAgY29uc3QgaXNDb21wbGV0ZUNoZWNrYm94ID0gbmV3IENoZWNrYm94KHRoaXMudG9kb0l0ZW0uaXNDb21wbGV0ZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtLmlzQ29tcGxldGUgPSAhdGhpcy50b2RvSXRlbS5pc0NvbXBsZXRlO1xyXG4gICAgICAgICAgICB0aGlzLm9uSXRlbUNoYW5nZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKGlzQ29tcGxldGVTcGFuKTtcclxuICAgICAgICB0b2RvSXRlbUNvbnRlbnQuYXBwZW5kQ2hpbGQoaXNDb21wbGV0ZUNoZWNrYm94KTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gJ0RlbGV0ZSc7XHJcbiAgICAgICAgZGVsZXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2RlbGV0ZS10b2RvaXRlbS1idXR0b24nKTtcclxuICAgICAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBkZWxldGVUb2RvSXRlbSh0aGlzLnRvZG9JdGVtLmlkKTtcclxuICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goJ2NoYW5nZVBhZ2UnLCB7cGFnZTogJ1Byb2plY3REZXRhaWwnLCBkYXRhOiBwcm9qZWN0LmlkfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbik7XHJcbiAgICAgICAgXHJcbiAgICBcclxuICAgICAgICB0b2RvSXRlbURpdi5hcHBlbmRDaGlsZCh0b2RvSXRlbUhlYWRlcik7XHJcbiAgICAgICAgdG9kb0l0ZW1EaXYuYXBwZW5kQ2hpbGQodG9kb0l0ZW1Db250ZW50KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiB0b2RvSXRlbURpdjtcclxuICAgIH1cclxuXHJcbiAgICBvbkl0ZW1DaGFuZ2UoKSB7XHJcbiAgICAgICAgdXBkYXRlVG9kb0l0ZW0odGhpcy50b2RvSXRlbSk7XHJcbiAgICAgICAgcHVibGlzaExpbmsoJ1RvZG9JdGVtRGV0YWlsJywgdGhpcy50b2RvSXRlbS5pZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBUb2RvSXRlbURldGFpbCgpOyIsImltcG9ydCB7IGdldFRvZG9JdGVtcyB9IGZyb20gXCIuL1RvZG9JdGVtL1RvZG9JdGVtQ29udHJvbGxlclwiO1xyXG5cclxuY2xhc3MgUHJvamVjdFRvZG9JdGVtTWVkaWF0b3Ige1xyXG4gICAgZ2V0VG9kb0l0ZW1zRm9yUHJvamVjdChwcm9qZWN0SWQpIHtcclxuICAgICAgICByZXR1cm4gZ2V0VG9kb0l0ZW1zKCkuZmlsdGVyKGl0ZW0gPT4gaXRlbS5wcm9qZWN0SWQgPT09IHByb2plY3RJZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBQcm9qZWN0VG9kb0l0ZW1NZWRpYXRvcigpO1xyXG5cclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2plY3RMaXN0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUHJvamVjdExpc3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgZ2V0UHJvamVjdHMgfSBmcm9tIFwiLi9Qcm9qZWN0Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBwdWJsaXNoTGluayB9IGZyb20gXCIuLi91dGlsXCI7XHJcbmltcG9ydCBQcm9qZWN0VG9kb0l0ZW1NZWRpYXRvciBmcm9tIFwiLi4vUHJvamVjdFRvZG9JdGVtTWVkaWF0b3JcIjtcclxuaW1wb3J0ICcuL1Byb2plY3RMaXN0LmNzcyc7XHJcbmNsYXNzIFByb2plY3RMaXN0IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGdldFByb2plY3RzKCk7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3RDb250YWluZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBwcm9qZWN0TGlzdENvbnRhaW5lckRpdi5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWxpc3QtY29udGFpbmVyJyk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICAgICAgcHJvamVjdExpc3RIZWFkZXIudGV4dENvbnRlbnQgPSBcIlByb2plY3RzXCI7XHJcbiAgICAgICAgcHJvamVjdExpc3RDb250YWluZXJEaXYuYXBwZW5kQ2hpbGQocHJvamVjdExpc3RIZWFkZXIpO1xyXG4gICAgXHJcbiAgICAgICAgZm9yIChsZXQgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0TGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgcHJvamVjdExpbmsuaHJlZj1cIiNcIjtcclxuICAgICAgICAgICAgcHJvamVjdExpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4gdGhpcy5vblByb2plY3RMaW5rQ2xpY2soZSwgcHJvamVjdCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJvamVjdERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBwcm9qZWN0RGl2LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtY2FyZCcpO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0TmFtZUhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XHJcbiAgICAgICAgICAgIHByb2plY3ROYW1lSGVhZGVyLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0VG9kb0l0ZW1zQ291bnRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgY29uc3QgdG9kb0l0ZW1zQ291bnQgPSBQcm9qZWN0VG9kb0l0ZW1NZWRpYXRvci5nZXRUb2RvSXRlbXNGb3JQcm9qZWN0KHByb2plY3QuaWQpLmxlbmd0aDtcclxuICAgICAgICAgICAgcHJvamVjdFRvZG9JdGVtc0NvdW50ZXIudGV4dENvbnRlbnQgPSBgVG9kbyBpdGVtczogJHt0b2RvSXRlbXNDb3VudH1gO1xyXG5cclxuICAgICAgICAgICAgcHJvamVjdExpbmsuYXBwZW5kQ2hpbGQocHJvamVjdERpdik7XHJcblxyXG4gICAgICAgICAgICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKHByb2plY3ROYW1lSGVhZGVyKTtcclxuICAgICAgICAgICAgcHJvamVjdERpdi5hcHBlbmRDaGlsZChwcm9qZWN0VG9kb0l0ZW1zQ291bnRlcik7XHJcblxyXG4gICAgICAgICAgICBwcm9qZWN0TGlzdENvbnRhaW5lckRpdi5hcHBlbmRDaGlsZChwcm9qZWN0TGluayk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHByb2plY3RMaXN0Q29udGFpbmVyRGl2O1xyXG4gICAgfVxyXG5cclxuICAgIG9uUHJvamVjdExpbmtDbGljayhlLCBwcm9qZWN0KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHtwcm9qZWN0fSk7XHJcbiAgICAgICAgcHVibGlzaExpbmsoJ1Byb2plY3REZXRhaWwnLCBwcm9qZWN0LmlkKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFByb2plY3RMaXN0KCk7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FkZENvbXBvbmVudC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FkZENvbXBvbmVudC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgJy4vQWRkQ29tcG9uZW50LmNzcyc7XHJcbmltcG9ydCBhZGRJY29uU3ZnIGZyb20gJy4uLy4uL2Fzc2V0cy9pY29ucy9wbHVzLnN2Zyc7XHJcbmltcG9ydCBjaGV2cm9uU3ZnIGZyb20gJy4uLy4uL2Fzc2V0cy9pY29ucy9jaGV2cm9uLWRvd24uc3ZnJztcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tICcuLi9tb2R1bGVzL3V0aWwnO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGRDb21wb25lbnQge1xyXG4gICAgbGlua3MgPSBbXHJcbiAgICAgICAge25hbWU6ICdBZGQgVG9kbyBJdGVtJywgbGluazogJ0FkZFRvZG9JdGVtJ30sXHJcbiAgICAgICAge25hbWU6ICdBZGQgUHJvamVjdCcsIGxpbms6ICdBZGRQcm9qZWN0J31cclxuICAgIF1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBhZGRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBhZGRDb250YWluZXIuY2xhc3NOYW1lID0gJ2FkZC1jb250YWluZXInO1xyXG5cclxuICAgICAgICBjb25zdCBpY29uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgaWNvbkNvbnRhaW5lci5jbGFzc05hbWUgPSAnaWNvbi1jb250YWluZXInO1xyXG4gICAgICAgIGNvbnN0IGFkZEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XHJcbiAgICAgICAgYWRkSWNvbi5pbm5lckhUTUwgPSBhZGRJY29uU3ZnO1xyXG4gICAgICAgIGFkZEljb24uY2xhc3NOYW1lID0gJ2FkZC1pY29uJztcclxuXHJcbiAgICAgICAgY29uc3QgY2hldnJvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcclxuICAgICAgICBjaGV2cm9uLmlubmVySFRNTCA9IGNoZXZyb25Tdmc7XHJcbiAgICAgICAgY2hldnJvbi5jbGFzc05hbWUgPSAnY2hldnJvbi1pY29uJztcclxuXHJcbiAgICAgICAgaWNvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRJY29uKTtcclxuICAgICAgICBpY29uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNoZXZyb24pO1xyXG4gICAgICAgIGFkZENvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcm9wZG93bi5jbGFzc05hbWUgPSAnYWRkLWRyb3Bkb3duJztcclxuICAgICAgICBkcm9wZG93bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICBjb25zdCBkcm9wZG93bkxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG4gICAgICAgIGRyb3Bkb3duTGlzdC5jbGFzc05hbWUgPSAnYWRkLWRyb3Bkb3duLWxpc3QnO1xyXG4gICAgICAgIGZvciAobGV0IGxpbmsgb2YgdGhpcy5saW5rcykge1xyXG4gICAgICAgICAgICBjb25zdCBkcm9wZG93bkxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgY29uc3QgbGlzdEl0ZW1MaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBsaXN0SXRlbUxpbmsuaHJlZiA9ICcnO1xyXG4gICAgICAgICAgICBsaXN0SXRlbUxpbmsudGV4dCA9IGxpbmsubmFtZTtcclxuICAgICAgICAgICAgbGlzdEl0ZW1MaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHB1Ymxpc2hMaW5rKGxpbmsubGluayk7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBkcm9wZG93bkxpc3RJdGVtLmFwcGVuZENoaWxkKGxpc3RJdGVtTGluayk7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duTGlzdC5hcHBlbmRDaGlsZChkcm9wZG93bkxpc3RJdGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyb3Bkb3duLmFwcGVuZENoaWxkKGRyb3Bkb3duTGlzdCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG91dHNpZGVDbGlja0xpc3RlbmVyID0gZSA9PiB7XHJcbiAgICAgICAgICAgIGlmKCFhZGRDb250YWluZXIuY29udGFpbnMoZS50YXJnZXQpICYmIGRyb3Bkb3duLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvdXRzaWRlQ2xpY2tMaXN0ZW5lcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWNvbkNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkcm9wZG93bi5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHJvcGRvd24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhZGRDb250YWluZXIuYXBwZW5kQ2hpbGQoZHJvcGRvd24pO1xyXG5cclxuICAgICAgICByZXR1cm4gYWRkQ29udGFpbmVyO1xyXG4gICAgfVxyXG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgQWRkQ29tcG9uZW50IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0FkZENvbXBvbmVudFwiO1xyXG5pbXBvcnQgUHViU3ViIGZyb20gXCIuLi9QdWJTdWJcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tIFwiLi4vdXRpbFwiO1xyXG5pbXBvcnQgbG9nb0ljb25TdmcgZnJvbSAnLi4vLi4vLi4vYXNzZXRzL2ljb25zL2NsaXBib2FyZC1saXN0LW91dGxpbmUuc3ZnJztcclxuaW1wb3J0ICcuL2hlYWRlci5jc3MnO1xyXG5pbXBvcnQgeyBnZXRUb2RvSXRlbXMgfSBmcm9tIFwiLi4vVG9kb0l0ZW0vVG9kb0l0ZW1Db250cm9sbGVyXCI7XHJcblxyXG5jbGFzcyBIZWFkZXIge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hlYWRlcicpO1xyXG4gICAgICAgIGNvbnN0IGxvZ29Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBsb2dvQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdsb2dvLWNvbnRhaW5lcic7XHJcblxyXG4gICAgICAgIGNvbnN0IGxvZ29JY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xyXG4gICAgICAgIGxvZ29JY29uLmNsYXNzTmFtZSA9ICdsb2dvLWljb24nO1xyXG4gICAgICAgIGxvZ29JY29uLmlubmVySFRNTCA9IGxvZ29JY29uU3ZnO1xyXG4gICAgICAgIGxvZ29Db250YWluZXIuYXBwZW5kQ2hpbGQobG9nb0ljb24pO1xyXG5cclxuICAgICAgICBjb25zdCBsb2dvVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBsb2dvVGV4dC50ZXh0Q29udGVudCA9ICdPZGluIFRvZG8tTGlzdCc7XHJcbiAgICAgICAgbG9nb1RleHQuY2xhc3NOYW1lID0gJ2xvZ28tdGV4dCc7XHJcbiAgICAgICAgbG9nb0NvbnRhaW5lci5hcHBlbmRDaGlsZChsb2dvVGV4dCk7XHJcblxyXG4gICAgICAgIGxvZ29Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBwdWJsaXNoTGluaygnVG9kb0l0ZW1MaXN0Jywge3RpdGxlOidBbGwgaXRlbXMnLCBjYWxsYmFjazpnZXRUb2RvSXRlbXN9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIGhlYWRlci5hcHBlbmRDaGlsZChsb2dvQ29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGJ1dHRvbnNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYnV0dG9ucy1jb250YWluZXInKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkQ29tcG9uZW50ID0gbmV3IEFkZENvbXBvbmVudCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoYWRkQ29tcG9uZW50LnJlbmRlcigpKTtcclxuICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQoYnV0dG9uc0NvbnRhaW5lcik7XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICBvbkhlYWRlckxpbmtDbGljayhlLCBuZXdQYWdlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdjaGFuZ2VQYWdlJywge3BhZ2U6IG5ld1BhZ2UucGFnZX0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgSGVhZGVyKCk7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NpZGViYXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zaWRlYmFyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TaWRlYmFyTGlua0l0ZW0uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TaWRlYmFyTGlua0l0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwiLi4vbW9kdWxlcy9QdWJTdWJcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tIFwiLi4vbW9kdWxlcy91dGlsXCI7XHJcbmltcG9ydCAnLi9TaWRlYmFyTGlua0l0ZW0uY3NzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZGViYXJMaW5rSXRlbSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgY2FsbGJhY2ssIGljb24pIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuaWNvbiA9IGljb247XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGxpbmtJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICBsaW5rSXRlbS5jbGFzc05hbWUgPSAnc2lkZWJhci1saW5rLWl0ZW0nO1xyXG5cclxuICAgICAgICBjb25zdCBsaW5rQSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsaW5rQS5ocmVmID0gJyMnO1xyXG5cclxuICAgICAgICBjb25zdCBsaW5rVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBsaW5rVGV4dC50ZXh0Q29udGVudCA9IHRoaXMudGl0bGU7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuaWNvbikge1xyXG4gICAgICAgICAgICBjb25zdCBsaW5rSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcclxuICAgICAgICAgICAgbGlua0ljb24uaW5uZXJIVE1MID0gdGhpcy5pY29uO1xyXG4gICAgICAgICAgICBsaW5rQS5hcHBlbmRDaGlsZChsaW5rSWNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaW5rSXRlbU51bWJlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICBsaW5rSXRlbU51bWJlci5jbGFzc05hbWUgPSAnc2lkZWJhci1saW5rLWl0ZW0tbnVtYmVyJztcclxuICAgICAgICBsaW5rSXRlbU51bWJlci50ZXh0Q29udGVudCA9IHRoaXMuY2FsbGJhY2soKS5maWx0ZXIoaXRlbSA9PiAhaXRlbS5pc0NvbXBsZXRlKS5sZW5ndGg7XHJcblxyXG4gICAgICAgIFB1YlN1Yi5zdWJzY3JpYmUoJ1RvZG9JdGVtc0NoYW5nZWQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxpbmtJdGVtTnVtYmVyLnRleHRDb250ZW50ID0gdGhpcy5jYWxsYmFjaygpLmZpbHRlcihpdGVtID0+ICFpdGVtLmlzQ29tcGxldGUpLmxlbmd0aDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGlua0EuYXBwZW5kKGxpbmtUZXh0LCBsaW5rSXRlbU51bWJlcik7XHJcbiAgICAgICAgbGlua0l0ZW0uYXBwZW5kQ2hpbGQobGlua0EpO1xyXG4gICAgICAgIGxpbmtJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBwdWJsaXNoTGluaygnVG9kb0l0ZW1MaXN0Jywge3RpdGxlOnRoaXMudGl0bGUsIGNhbGxiYWNrOnRoaXMuY2FsbGJhY2t9KTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXR1cm4gbGlua0l0ZW07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBnZXRQcm9qZWN0cyB9IGZyb20gJy4uL1Byb2plY3QvUHJvamVjdENvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBnZXRUb2RvSXRlbXMsIGdldFRvZG9JdGVtc1RvZGF5LCBnZXRUb2RvSXRlbXNVcGNvbWluZyB9IGZyb20gJy4uL1RvZG9JdGVtL1RvZG9JdGVtQ29udHJvbGxlcic7XHJcbmltcG9ydCBQcm9qZWN0VG9kb0l0ZW1NZWRpYXRvciBmcm9tIFwiLi4vUHJvamVjdFRvZG9JdGVtTWVkaWF0b3JcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tICcuLi91dGlsJztcclxuaW1wb3J0ICcuL3NpZGViYXIuY3NzJztcclxuaW1wb3J0IFB1YlN1YiBmcm9tICcuLi9QdWJTdWInO1xyXG5pbXBvcnQgU2lkZWJhckxpbmtJdGVtIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvU2lkZWJhckxpbmtJdGVtJztcclxuaW1wb3J0IGFsbFN2ZyBmcm9tICcuLi8uLi8uLi9hc3NldHMvaWNvbnMvbGlzdC1ib3guc3ZnJztcclxuaW1wb3J0IHRvZGF5U3ZnIGZyb20gJy4uLy4uLy4uL2Fzc2V0cy9pY29ucy9jYWxlbmRhci1ibGFuay5zdmcnO1xyXG5pbXBvcnQgdXBjb21pbmdTdmcgZnJvbSAnLi4vLi4vLi4vYXNzZXRzL2ljb25zL2NhbGVuZGFyLWNsb2NrLnN2Zyc7XHJcblxyXG5jbGFzcyBTaWRlYmFyIHtcclxuICAgIG1haW5MaW5rcyA9IFtcclxuICAgICAgICB7J3RpdGxlJzonQWxsIGl0ZW1zJywnY2FsbGJhY2snOmdldFRvZG9JdGVtcywnaWNvbic6YWxsU3ZnfSxcclxuICAgICAgICB7J3RpdGxlJzonVG9kYXknLCdjYWxsYmFjayc6Z2V0VG9kb0l0ZW1zVG9kYXksICdpY29uJzp0b2RheVN2Z30sXHJcbiAgICAgICAgeyd0aXRsZSc6J1VwY29taW5nJywnY2FsbGJhY2snOmdldFRvZG9JdGVtc1VwY29taW5nLCAnaWNvbic6dXBjb21pbmdTdmd9XHJcbiAgICBdXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc2lkZWJhckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHNpZGViYXJEaXYuY2xhc3NOYW1lID0gJ3NpZGViYXInO1xyXG5cclxuICAgICAgICBjb25zdCBtYWluTGlua3NMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgICBtYWluTGlua3NMaXN0LmNsYXNzTmFtZSA9ICdzaWRlYmFyLWxpbmstbGlzdCc7XHJcbiAgICAgICAgZm9yIChsZXQgbGluayBvZiB0aGlzLm1haW5MaW5rcykge1xyXG4gICAgICAgICAgICBjb25zdCBtYWluTGlua0l0ZW0gPSBuZXcgU2lkZWJhckxpbmtJdGVtKGxpbmsudGl0bGUsIGxpbmsuY2FsbGJhY2ssIGxpbmsuaWNvbiB8fCBudWxsKS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgbWFpbkxpbmtzTGlzdC5hcHBlbmRDaGlsZChtYWluTGlua0l0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xyXG4gICAgICAgIHByb2plY3RMaXN0LmNsYXNzTmFtZSA9ICdzaWRlYmFyLWxpbmstbGlzdCdcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3RIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgIHByb2plY3RMaXN0SGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3NpZGViYXItbGluay1saXN0LWhlYWRlcicsICdzaWRlYmFyLWxpbmstaXRlbScpO1xyXG4gICAgICAgIGNvbnN0IHByb2plY3RMaXN0SGVhZGVyTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBwcm9qZWN0TGlzdEhlYWRlckxpbmsuaHJlZiA9ICcjJztcclxuICAgICAgICBwcm9qZWN0TGlzdEhlYWRlckxpbmsudGV4dCA9ICdQcm9qZWN0cyc7XHJcbiAgICAgICAgcHJvamVjdExpc3RIZWFkZXIuYXBwZW5kQ2hpbGQocHJvamVjdExpc3RIZWFkZXJMaW5rKTtcclxuICAgICAgICBwcm9qZWN0TGlzdC5hcHBlbmRDaGlsZChwcm9qZWN0TGlzdEhlYWRlcik7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHByb2plY3Qgb2YgZ2V0UHJvamVjdHMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SXRlbSA9IG5ldyBTaWRlYmFyTGlua0l0ZW0oXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0Lm5hbWUsIFxyXG4gICAgICAgICAgICAgICAgKCkgPT4gUHJvamVjdFRvZG9JdGVtTWVkaWF0b3IuZ2V0VG9kb0l0ZW1zRm9yUHJvamVjdChwcm9qZWN0LmlkKSlcclxuICAgICAgICAgICAgICAgIC5yZW5kZXIoKTtcclxuICAgICAgICAgICAgcHJvamVjdExpc3QuYXBwZW5kQ2hpbGQocHJvamVjdEl0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2lkZWJhckRpdi5hcHBlbmRDaGlsZChtYWluTGlua3NMaXN0KTtcclxuICAgICAgICBzaWRlYmFyRGl2LmFwcGVuZENoaWxkKHByb2plY3RMaXN0KTtcclxuICAgICAgICByZXR1cm4gc2lkZWJhckRpdjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFNpZGViYXIoKTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9kb0l0ZW1zTGlzdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1RvZG9JdGVtc0xpc3QuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgdXBkYXRlVG9kb0l0ZW0gfSBmcm9tIFwiLi4vbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbUNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgcHVibGlzaExpbmsgfSBmcm9tIFwiLi4vbW9kdWxlcy91dGlsXCI7XHJcbmltcG9ydCAnLi9Ub2RvSXRlbXNMaXN0LmNzcyc7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tIFwiLi9DaGVja2JveFwiO1xyXG5pbXBvcnQgZm9ybWF0SVNPIGZyb20gXCJkYXRlLWZucy9mb3JtYXRJU09cIjtcclxuaW1wb3J0IHsgaXNCZWZvcmUgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcclxuXHJcbmNsYXNzIFRvZG9JdGVtc0xpc3Qge1xyXG4gICAgY29uc3RydWN0b3IodG9kb0l0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy50b2RvSXRlbXMgPSB0b2RvSXRlbXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICghdGhpcy50b2RvSXRlbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50b2RvSXRlbXNMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcclxuICAgICAgICB0aGlzLnRvZG9JdGVtc0xpc3QuY2xhc3NOYW1lID0gJ3RvZG8taXRlbXMtbGlzdCc7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJMaXN0SXRlbXMoKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcy50b2RvSXRlbXNMaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckxpc3RJdGVtcygpIHtcclxuICAgICAgICB0aGlzLnRvZG9JdGVtcy5zb3J0KChpdGVtMSwgaXRlbTIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0xLmlzQ29tcGxldGUgPT09IGl0ZW0yLmlzQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0JlZm9yZShpdGVtMS5kdWVEYXRlLCBpdGVtMi5kdWVEYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0xLmlzQ29tcGxldGUgJiYgIWl0ZW0yLmlzQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHRvZG9JdGVtIG9mIHRoaXMudG9kb0l0ZW1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvZG9JdGVtc0xpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgaWYgKHRvZG9JdGVtLmlzQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHRvZG9JdGVtc0xpc3RJdGVtLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjaGVja0JveCA9IG5ldyBDaGVja2JveCh0b2RvSXRlbS5pc0NvbXBsZXRlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b2RvSXRlbS5pc0NvbXBsZXRlID0gIXRvZG9JdGVtLmlzQ29tcGxldGU7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUb2RvSXRlbSh0b2RvSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZG9JdGVtc0xpc3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxpc3RJdGVtcygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1zTGlzdEl0ZW0uYXBwZW5kQ2hpbGQoY2hlY2tCb3gpO1xyXG4gICAgICAgICAgICBjb25zdCB0b2RvSXRlbUNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1Db250ZW50LmNsYXNzTmFtZSA9ICd0b2RvLWl0ZW1zLWxpc3QtaXRlbS1jb250ZW50JztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHRvZG9JdGVtTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1OYW1lLnRleHRDb250ZW50ID0gdG9kb0l0ZW0udGl0bGU7XHJcbiAgICAgICAgICAgIHRvZG9JdGVtQ29udGVudC5hcHBlbmRDaGlsZCh0b2RvSXRlbU5hbWUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgdG9kb0l0ZW1EdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICB0b2RvSXRlbUR1ZURhdGUudGV4dENvbnRlbnQgPSBmb3JtYXRJU08odG9kb0l0ZW0uZHVlRGF0ZSwge3JlcHJlc2VudGF0aW9uOiAnZGF0ZSd9KTtcclxuICAgICAgICAgICAgdG9kb0l0ZW1Db250ZW50LmFwcGVuZENoaWxkKHRvZG9JdGVtRHVlRGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0b2RvSXRlbXNMaXN0SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRvZG9JdGVtc0xpc3RJdGVtIHx8IHRvZG9JdGVtQ29udGVudC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwdWJsaXNoTGluaygnVG9kb0l0ZW1EZXRhaWwnLCB0b2RvSXRlbS5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0b2RvSXRlbXNMaXN0SXRlbS5hcHBlbmRDaGlsZCh0b2RvSXRlbUNvbnRlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLnRvZG9JdGVtc0xpc3QuYXBwZW5kQ2hpbGQodG9kb0l0ZW1zTGlzdEl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9kb0l0ZW1zTGlzdDsiLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzQmVmb3JlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBmaXJzdCBkYXRlIGJlZm9yZSB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBmaXJzdCBkYXRlIGJlZm9yZSB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYmVmb3JlIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVUb0NvbXBhcmUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBiZWZvcmUgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzQmVmb3JlKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQmVmb3JlKGRpcnR5RGF0ZSwgZGlydHlEYXRlVG9Db21wYXJlKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF0ZVRvQ29tcGFyZSA9IHRvRGF0ZShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPCBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUHJvamVjdERldGFpbC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2plY3REZXRhaWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IENoZWNrYm94IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0NoZWNrYm94XCI7XHJcbmltcG9ydCBUb2RvSXRlbXNMaXN0IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1RvZG9JdGVtc0xpc3RcIjtcclxuaW1wb3J0IFByb2plY3RUb2RvSXRlbU1lZGlhdG9yIGZyb20gXCIuLi9Qcm9qZWN0VG9kb0l0ZW1NZWRpYXRvclwiO1xyXG5pbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuLi9Ub2RvSXRlbS9Ub2RvSXRlbVwiO1xyXG5pbXBvcnQgeyBwdWJsaXNoTGluayB9IGZyb20gXCIuLi91dGlsXCI7XHJcbmltcG9ydCB7IGRlbGV0ZVByb2plY3QsIGdldFByb2plY3RCeUlkLCBnZXRQcm9qZWN0cyB9IGZyb20gXCIuL1Byb2plY3RDb250cm9sbGVyXCI7XHJcbmltcG9ydCAnLi9Qcm9qZWN0RGV0YWlsLmNzcyc7XHJcblxyXG5jbGFzcyBQcm9qZWN0RGV0YWlsIHtcclxuICAgIHJlbmRlcihpZCkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBnZXRQcm9qZWN0QnlJZChpZCk7XHJcbiAgICAgICAgY29uc3QgdG9kb0l0ZW1zID0gUHJvamVjdFRvZG9JdGVtTWVkaWF0b3IuZ2V0VG9kb0l0ZW1zRm9yUHJvamVjdChwcm9qZWN0LmlkKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdERldGFpbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHByb2plY3REZXRhaWxEaXYuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1kZXRhaWwnKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBwcm9qZWN0RGV0YWlsSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICAgICAgICBwcm9qZWN0RGV0YWlsSGVhZGVyLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lIHx8ICdQcm9qZWN0IERldGFpbHMnO1xyXG4gICAgICAgIHByb2plY3REZXRhaWxEaXYuYXBwZW5kQ2hpbGQocHJvamVjdERldGFpbEhlYWRlcik7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtc0xpc3QgPSBuZXcgVG9kb0l0ZW1zTGlzdCh0b2RvSXRlbXMpO1xyXG4gICAgICAgIHByb2plY3REZXRhaWxEaXYuYXBwZW5kQ2hpbGQodG9kb0l0ZW1zTGlzdC5yZW5kZXIoKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gJ0RlbGV0ZSBQcm9qZWN0JztcclxuICAgICAgICBkZWxldGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnZGVsZXRlLXByb2plY3QtYnV0dG9uJyk7XHJcblxyXG4gICAgICAgIGlmIChwcm9qZWN0Lm5hbWUgPT09ICdEZWZhdWx0JyB8fCBnZXRQcm9qZWN0cygpLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBkZWxldGVQcm9qZWN0KHByb2plY3QuaWQpO1xyXG4gICAgICAgICAgICBwdWJsaXNoTGluaygnUHJvamVjdExpc3QnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBwcm9qZWN0RGV0YWlsRGl2LmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHByb2plY3REZXRhaWxEaXY7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBQcm9qZWN0RGV0YWlsKCk7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FkZFRvZG9JdGVtLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQWRkVG9kb0l0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgZ2V0UHJvamVjdHMgfSBmcm9tIFwiLi4vUHJvamVjdC9Qcm9qZWN0Q29udHJvbGxlclwiO1xyXG5pbXBvcnQgJy4vQWRkVG9kb0l0ZW0uY3NzJztcclxuaW1wb3J0IHsgVG9kb0l0ZW0gfSBmcm9tIFwiLi9Ub2RvSXRlbVwiO1xyXG5pbXBvcnQgeyBhZGRUb2RvSXRlbSB9IGZyb20gXCIuL1RvZG9JdGVtQ29udHJvbGxlclwiO1xyXG5cclxuY2xhc3MgQWRkVG9kb0l0ZW0ge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkVG9kb0l0ZW1Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkVG9kb0l0ZW1IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gICAgICAgIGFkZFRvZG9JdGVtSGVhZGVyLnRleHRDb250ZW50ID0gJ0FkZCBUb2RvIEl0ZW0nO1xyXG5cclxuICAgICAgICBjb25zdCB0b2RvSXRlbUZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMub25Gb3JtU3VibWl0KTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBuYW1lTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xyXG4gICAgICAgIG5hbWVMYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICd0aXRsZScpO1xyXG4gICAgICAgIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9ICdUaXRsZSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7XHJcbiAgICAgICAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICBuYW1lSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgIG5hbWVJbnB1dC5uYW1lID0gJ3RpdGxlJztcclxuICAgICAgICBuYW1lSW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICBuYW1lSW5wdXQuaWQgPSAndGl0bGUnO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChuYW1lSW5wdXQpO1xyXG5cclxuICAgICAgICBjb25zdCBwcmlvcml0eUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBwcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZSgnZm9yJywgJ3ByaW9yaXR5Jyk7XHJcbiAgICAgICAgcHJpb3JpdHlMYWJlbC50ZXh0Q29udGVudCA9ICdQcmlvcml0eSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFwcGVuZENoaWxkKHByaW9yaXR5TGFiZWwpO1xyXG4gICAgICAgIGNvbnN0IHByaW9yaXR5U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgcHJpb3JpdHlTZWxlY3QucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0Lm5hbWUgPSAncHJpb3JpdHknO1xyXG4gICAgICAgIHByaW9yaXR5U2VsZWN0LmlkID0gJ3ByaW9yaXR5JztcclxuICAgICAgICBmb3IgKGxldCBwcmlvcml0eSBvZiBPYmplY3Qua2V5cyhUb2RvSXRlbS5wcmlvcml0aWVzKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwcmlvcml0eU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgICAgICBwcmlvcml0eU9wdGlvbi5uYW1lID0gJ3ByaW9yaXR5JztcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24udmFsdWUgPSBwcmlvcml0eTtcclxuICAgICAgICAgICAgcHJpb3JpdHlPcHRpb24udGV4dCA9IFRvZG9JdGVtLnByaW9yaXRpZXNbcHJpb3JpdHldO1xyXG4gICAgICAgICAgICBwcmlvcml0eVNlbGVjdC5hcHBlbmRDaGlsZChwcmlvcml0eU9wdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChwcmlvcml0eVNlbGVjdCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgICAgICAgZGVzY3JpcHRpb25MYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsICdkZXNjcmlwdGlvbicpO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uTGFiZWwudGV4dENvbnRlbnQgPSAnRGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbkxhYmVsKTtcclxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvblRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgICBkZXNjcmlwdGlvblRleHRBcmVhLnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICBkZXNjcmlwdGlvblRleHRBcmVhLm5hbWUgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIGRlc2NyaXB0aW9uVGV4dEFyZWEuaWQgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvblRleHRBcmVhKTtcclxuXHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBkdWVEYXRlTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnZHVlRGF0ZScpO1xyXG4gICAgICAgIGR1ZURhdGVMYWJlbC50ZXh0Q29udGVudCA9ICdEdWUgRGF0ZSc7XHJcbiAgICAgICAgdG9kb0l0ZW1Gb3JtLmFwcGVuZENoaWxkKGR1ZURhdGVMYWJlbCk7XHJcbiAgICAgICAgY29uc3QgZHVlRGF0ZVBpY2tlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgZHVlRGF0ZVBpY2tlci5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgZHVlRGF0ZVBpY2tlci50eXBlID0gJ2RhdGUnO1xyXG4gICAgICAgIGR1ZURhdGVQaWNrZXIubmFtZSA9ICdkdWVEYXRlJztcclxuICAgICAgICBkdWVEYXRlUGlja2VyLmlkID0gJ2R1ZURhdGUnO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChkdWVEYXRlUGlja2VyKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBwcm9qZWN0TGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAncHJvamVjdCcpO1xyXG4gICAgICAgIHByb2plY3RMYWJlbC50ZXh0Q29udGVudCA9ICdQcm9qZWN0JztcclxuICAgICAgICBjb25zdCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICAgICAgcHJvamVjdFNlbGVjdC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgcHJvamVjdFNlbGVjdC5uYW1lID0gJ3Byb2plY3QnO1xyXG4gICAgICAgIHByb2plY3RTZWxlY3QuaWQgPSAncHJvamVjdCc7XHJcbiAgICAgICAgZm9yIChsZXQgcHJvamVjdCBvZiBwcm9qZWN0cykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgICAgIHByb2plY3RPcHRpb24udmFsdWUgPSBwcm9qZWN0LmlkO1xyXG4gICAgICAgICAgICBwcm9qZWN0T3B0aW9uLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xyXG4gICAgICAgICAgICBwcm9qZWN0U2VsZWN0LmFwcGVuZENoaWxkKHByb2plY3RPcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b2RvSXRlbUZvcm0uYXBwZW5kQ2hpbGQocHJvamVjdFNlbGVjdCk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBzdWJtaXRCdXR0b24udHlwZSA9ICdzdWJtaXQnO1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9ICdBZGQnO1xyXG4gICAgICAgIHRvZG9JdGVtRm9ybS5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xyXG5cclxuICAgICAgICBhZGRUb2RvSXRlbUNvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRUb2RvSXRlbUhlYWRlcik7XHJcbiAgICAgICAgYWRkVG9kb0l0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW1Gb3JtKTtcclxuICAgICAgICByZXR1cm4gYWRkVG9kb0l0ZW1Db250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgb25Gb3JtU3VibWl0KGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGlmKCFmb3JtLmNoZWNrVmFsaWRpdHkoKSkge1xyXG4gICAgICAgICAgICBmb3JtLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcclxuICAgICAgICBjb25zdCBuZXdUb2RvSXRlbSA9IGFkZFRvZG9JdGVtKFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5nZXQoJ3RpdGxlJyksIFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5nZXQoJ3ByaW9yaXR5JyksXHJcbiAgICAgICAgICAgIGZvcm1EYXRhLmdldCgnZGVzY3JpcHRpb24nKSwgXHJcbiAgICAgICAgICAgIGZvcm1EYXRhLmdldCgnZHVlRGF0ZScpLFxyXG4gICAgICAgICAgICBOdW1iZXIoZm9ybURhdGEuZ2V0KCdwcm9qZWN0JykpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAobmV3VG9kb0l0ZW0pIHtcclxuICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciB3aGVuIGNyZWF0aW5nIG5ldyB0b2RvIGl0ZW0nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBBZGRUb2RvSXRlbSgpOyIsImltcG9ydCB7IHB1Ymxpc2hMaW5rIH0gZnJvbSBcIi4uL3V0aWxcIjtcclxuaW1wb3J0IHsgYWRkUHJvamVjdCB9IGZyb20gXCIuL1Byb2plY3RDb250cm9sbGVyXCI7XHJcblxyXG5jbGFzcyBBZGRQcm9qZWN0IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBhZGRQcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gJ0FkZCBQcm9qZWN0JztcclxuXHJcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcclxuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMub25Gb3JtU3VibWl0KTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgICBuYW1lTGFiZWwuc2V0QXR0cmlidXRlKCdmb3InLCAnbmFtZScpO1xyXG4gICAgICAgIG5hbWVMYWJlbC50ZXh0Q29udGVudCA9ICdQcm9qZWN0IG5hbWUnO1xyXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICBuYW1lSW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICBuYW1lSW5wdXQubmFtZSA9ICduYW1lJztcclxuICAgICAgICBuYW1lSW5wdXQuaWQgPSAnbmFtZSc7XHJcbiAgICAgICAgbmFtZUlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICBmb3JtLmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9ICdBZGQnO1xyXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3VibWl0QnV0dG9uKTtcclxuXHJcbiAgICAgICAgYWRkUHJvamVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xyXG4gICAgICAgIGFkZFByb2plY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoZm9ybSk7XHJcblxyXG4gICAgICAgIHJldHVybiBhZGRQcm9qZWN0Q29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRm9ybVN1Ym1pdChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGZvcm0gPSBlLnRhcmdldDtcclxuICAgICAgICBpZiAoIWZvcm0uY2hlY2tWYWxpZGl0eSgpKSB7XHJcbiAgICAgICAgICAgIGZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBhZGRQcm9qZWN0KFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5nZXQoJ25hbWUnKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIGlmIChuZXdQcm9qZWN0KSB7XHJcbiAgICAgICAgICAgIHB1Ymxpc2hMaW5rKCdQcm9qZWN0TGlzdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLnRhYmxlKGZvcm1EYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IEFkZFByb2plY3QoKTsiLCJpbXBvcnQgeyBnZXRUb2RvSXRlbXMsIGdldFRvZG9JdGVtc1RvZGF5LCBnZXRUb2RvSXRlbXNVcGNvbWluZyB9IGZyb20gXCIuL1RvZG9JdGVtQ29udHJvbGxlclwiXHJcbmltcG9ydCBUb2RvSXRlbXNMaXN0IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1RvZG9JdGVtc0xpc3RcIjtcclxuaW1wb3J0IHsgaXNGdXR1cmUsIGlzVG9kYXkgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcclxuXHJcbmNsYXNzIFRvZG9JdGVtTGlzdCB7XHJcblxyXG4gICAgcmVuZGVyKHt0aXRsZSwgY2FsbGJhY2t9KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGl0bGUsIGNhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLnRvZG9JdGVtcyA9IGNhbGxiYWNrKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtTGlzdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IHRvZG9JdGVtTGlzdEhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XHJcbiAgICAgICAgdG9kb0l0ZW1MaXN0SGVhZGVyLnRleHRDb250ZW50ID0gdGl0bGU7XHJcbiAgICAgICAgdG9kb0l0ZW1MaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRvZG9JdGVtTGlzdEhlYWRlcik7XHJcbiAgICAgICAgY29uc3QgdG9kb0l0ZW1zTGlzdCA9IG5ldyBUb2RvSXRlbXNMaXN0KHRoaXMudG9kb0l0ZW1zKS5yZW5kZXIoKTtcclxuICAgICAgICB0b2RvSXRlbUxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW1zTGlzdCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0b2RvSXRlbUxpc3RDb250YWluZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBUb2RvSXRlbUxpc3QoKTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJy4vbW9kdWxlcy9QdWJTdWInO1xyXG5pbXBvcnQgeyBhZGRUb2RvSXRlbSwgZ2V0VG9kb0l0ZW1CeUlkLCBnZXRUb2RvSXRlbXMgfSBmcm9tICcuL21vZHVsZXMvVG9kb0l0ZW0vVG9kb0l0ZW1Db250cm9sbGVyJztcclxuaW1wb3J0IFRvZG9JdGVtRGV0YWlsIGZyb20gJy4vbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbURldGFpbCc7XHJcbmltcG9ydCBQcm9qZWN0TGlzdCBmcm9tICcuL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0TGlzdCc7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9tb2R1bGVzL0xheW91dC9oZWFkZXInO1xyXG5pbXBvcnQgU2lkZWJhciBmcm9tICcuL21vZHVsZXMvTGF5b3V0L3NpZGViYXInO1xyXG5pbXBvcnQgUHJvamVjdERldGFpbCBmcm9tICcuL21vZHVsZXMvUHJvamVjdC9Qcm9qZWN0RGV0YWlsJztcclxuaW1wb3J0IEFkZFRvZG9JdGVtIGZyb20gJy4vbW9kdWxlcy9Ub2RvSXRlbS9BZGRUb2RvSXRlbSc7XHJcbmltcG9ydCBBZGRQcm9qZWN0IGZyb20gJy4vbW9kdWxlcy9Qcm9qZWN0L0FkZFByb2plY3QnO1xyXG5pbXBvcnQgVG9kb0l0ZW1MaXN0IGZyb20gJy4vbW9kdWxlcy9Ub2RvSXRlbS9Ub2RvSXRlbUxpc3QnO1xyXG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuY29uc29sZS5sb2coJ1RvZG9MaXN0IGFwcCBsb2FkZWQnKTtcclxuaWYgKGdldFRvZG9JdGVtcygpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgYWRkVG9kb0l0ZW0oXCJUZXN0XCIsIDEsIFwiVGVzdCBEZXNjcmlwdGlvblwiLCBcIjIwMjItMTItMjlcIik7XHJcbiAgICBhZGRUb2RvSXRlbShcIlRlc3QyXCIsIDEsIFwiVGVzdCBEZXNjcmlwdGlvbiAyXCIsIFwiMjAyMi0xMi0zMFwiKTtcclxufVxyXG5cclxuY29uc29sZS50YWJsZShnZXRUb2RvSXRlbXMoKSk7XHJcblxyXG5jb25zdCBwYWdlcyA9IHtcclxuICAgIFwiVG9kb0l0ZW1EZXRhaWxcIjogVG9kb0l0ZW1EZXRhaWwsXHJcbiAgICBcIlByb2plY3RMaXN0XCI6IFByb2plY3RMaXN0LFxyXG4gICAgXCJQcm9qZWN0RGV0YWlsXCI6UHJvamVjdERldGFpbCxcclxuICAgIFwiQWRkVG9kb0l0ZW1cIjpBZGRUb2RvSXRlbSxcclxuICAgIFwiQWRkUHJvamVjdFwiOkFkZFByb2plY3QsXHJcbiAgICAnVG9kb0l0ZW1MaXN0JzpUb2RvSXRlbUxpc3QsXHJcbn1cclxuXHJcblB1YlN1Yi5zdWJzY3JpYmUoJ2NoYW5nZVBhZ2UnLCBjaGFuZ2VQYWdlKTtcclxuXHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoSGVhZGVyLnJlbmRlcigpKTtcclxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChTaWRlYmFyLnJlbmRlcigpKTtcclxuY29uc3QgbWFpbkNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxubWFpbkNvbnRlbnQuY2xhc3NMaXN0LmFkZCgnbWFpbi1jb250ZW50Jyk7XHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFpbkNvbnRlbnQpO1xyXG5cclxuZnVuY3Rpb24gY2hhbmdlUGFnZShkYXRhKSB7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgIGlmICghZGF0YS5wYWdlIHx8ICFwYWdlc1tkYXRhLnBhZ2VdKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIG1haW5Db250ZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBtYWluQ29udGVudC5hcHBlbmRDaGlsZChwYWdlc1tkYXRhLnBhZ2VdLnJlbmRlcihkYXRhLmRhdGEpKTtcclxufVxyXG5cclxuY2hhbmdlUGFnZSh7XHJcbiAgICBwYWdlOiBcIlByb2plY3RMaXN0XCJcclxufSk7XHJcbi8vY2hhbmdlUGFnZShUb2RvSXRlbURldGFpbCwgMSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwiZXZlbnRzIiwicHVibGlzaCIsImV2ZW50IiwibGlzdGVuZXIiLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsInVuc3Vic2NyaWJlIiwiZmluZCIsIlRvZG9JdGVtIiwiY29uc3RydWN0b3IiLCJ0aXRsZSIsInByaW9yaXR5IiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwiaXNDb21wbGV0ZSIsInByb2plY3RJZCIsInN0YXRpYyIsImdldE5leHRJZCIsImFyciIsInJlZHVjZSIsInByZXZpb3VzIiwicHVibGlzaExpbmsiLCJwYWdlIiwiZ2V0SW5kZXhGcm9tSWQiLCJmaW5kSW5kZXgiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsInN0YXJ0T2ZEYXkiLCJkaXJ0eURhdGUiLCJkYXRlIiwic2V0SG91cnMiLCJpc1NhbWVEYXkiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJkYXRlTGVmdFN0YXJ0T2ZEYXkiLCJkYXRlUmlnaHRTdGFydE9mRGF5IiwidG9kb0l0ZW1zIiwidGVtcFRvZG9JdGVtcyIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImxvYWRUb2RvSXRlbXMiLCJhZGRUb2RvSXRlbSIsIm5ld0lkIiwiTnVtYmVyIiwibmV3VG9kb0l0ZW0iLCJnZXRUb2RvSXRlbXMiLCJnZXRUb2RvSXRlbXNUb2RheSIsImZpbHRlciIsIm5vdyIsImlzVG9kYXkiLCJnZXRUb2RvSXRlbXNVcGNvbWluZyIsImlzRnV0dXJlIiwiZ2V0VG9kb0l0ZW1CeUlkIiwidXBkYXRlVG9kb0l0ZW0iLCJzZXRJdGVtIiwiUHJvamVjdCIsIm5hbWUiLCJwcm9qZWN0cyIsImFkZFByb2plY3QiLCJuZXdQcm9qZWN0IiwiZ2V0UHJvamVjdHMiLCJnZXRQcm9qZWN0QnlJZCIsInByb2plY3QiLCJjaGVja2VkIiwiY2hlY2tib3hEaXYiLCJhZGRFdmVudExpc3RlbmVyIiwib25DbGljayIsImJpbmQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ1cGRhdGVDaGVja01hcmsiLCJ0b2dnbGUiLCJ0ZW1wU3ZnIiwiaW5uZXJIVE1MIiwiYWRkTGVhZGluZ1plcm9zIiwibnVtYmVyIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsIk1hdGgiLCJhYnMiLCJmb3JtYXRJU08iLCJfb3B0aW9ucyRmb3JtYXQiLCJfb3B0aW9ucyRyZXByZXNlbnRhdGkiLCJvcmlnaW5hbERhdGUiLCJpc05hTiIsIlJhbmdlRXJyb3IiLCJmb3JtYXQiLCJTdHJpbmciLCJyZXByZXNlbnRhdGlvbiIsInR6T2Zmc2V0IiwiZGF0ZURlbGltaXRlciIsInRpbWVEZWxpbWl0ZXIiLCJkYXkiLCJnZXREYXRlIiwibW9udGgiLCJnZXRNb250aCIsInllYXIiLCJnZXRGdWxsWWVhciIsIm9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiYWJzb2x1dGVPZmZzZXQiLCJob3VyT2Zmc2V0IiwiZmxvb3IiLCJtaW51dGVPZmZzZXQiLCJob3VyIiwiZ2V0SG91cnMiLCJtaW51dGUiLCJnZXRNaW51dGVzIiwic2Vjb25kIiwiZ2V0U2Vjb25kcyIsInNlcGFyYXRvciIsInRpbWUiLCJyZW5kZXIiLCJ0b2RvSXRlbSIsInRvZG9JdGVtRGl2IiwidG9kb0l0ZW1IZWFkZXIiLCJ0ZXh0Q29udGVudCIsInRvZG9JdGVtQ29udGVudCIsInByb2plY3RTcGFuIiwicHJvamVjdExpbmsiLCJocmVmIiwicHJldmVudERlZmF1bHQiLCJwcm9qZWN0U2VsZWN0IiwicHJvamVjdE9wdGlvbiIsInZhbHVlIiwidGV4dCIsInNlbGVjdGVkIiwib25JdGVtQ2hhbmdlIiwicHJpb3JpdHlMYWJlbCIsInByaW9yaXR5U2VsZWN0Iiwia2V5cyIsInByaW9yaXRpZXMiLCJwcmlvcml0eU51bSIsInByaW9yaXR5T3B0aW9uIiwiZGVzY3JpcHRpb25MYWJlbCIsImRlc2NyaXB0aW9uSW5wdXQiLCJkdWVEYXRlTGFiZWwiLCJkdWVEYXRlU2VsZWN0b3IiLCJ0eXBlIiwibG9nIiwiaXNDb21wbGV0ZVNwYW4iLCJpc0NvbXBsZXRlQ2hlY2tib3giLCJkZWxldGVCdXR0b24iLCJkZWxldGVUb2RvSXRlbSIsImdldFRvZG9JdGVtc0ZvclByb2plY3QiLCJwcm9qZWN0TGlzdENvbnRhaW5lckRpdiIsInByb2plY3RMaXN0SGVhZGVyIiwib25Qcm9qZWN0TGlua0NsaWNrIiwicHJvamVjdERpdiIsInByb2plY3ROYW1lSGVhZGVyIiwicHJvamVjdFRvZG9JdGVtc0NvdW50ZXIiLCJ0b2RvSXRlbXNDb3VudCIsImxpbmtzIiwibGluayIsImFkZENvbnRhaW5lciIsImNsYXNzTmFtZSIsImljb25Db250YWluZXIiLCJhZGRJY29uIiwiY2hldnJvbiIsImRyb3Bkb3duIiwiZGlzcGxheSIsImRyb3Bkb3duTGlzdCIsImRyb3Bkb3duTGlzdEl0ZW0iLCJsaXN0SXRlbUxpbmsiLCJjb250YWlucyIsImhlYWRlciIsImxvZ29Db250YWluZXIiLCJsb2dvSWNvbiIsImxvZ29UZXh0IiwiYnV0dG9uc0NvbnRhaW5lciIsImFkZENvbXBvbmVudCIsIm9uSGVhZGVyTGlua0NsaWNrIiwibmV3UGFnZSIsImljb24iLCJsaW5rSXRlbSIsImxpbmtBIiwibGlua1RleHQiLCJsaW5rSWNvbiIsImxpbmtJdGVtTnVtYmVyIiwiYXBwZW5kIiwibWFpbkxpbmtzIiwic2lkZWJhckRpdiIsIm1haW5MaW5rc0xpc3QiLCJtYWluTGlua0l0ZW0iLCJwcm9qZWN0TGlzdCIsInByb2plY3RMaXN0SGVhZGVyTGluayIsInByb2plY3RJdGVtIiwidG9kb0l0ZW1zTGlzdCIsInJlbmRlckxpc3RJdGVtcyIsInNvcnQiLCJpdGVtMSIsIml0ZW0yIiwiZGlydHlEYXRlVG9Db21wYXJlIiwiZGF0ZVRvQ29tcGFyZSIsImlzQmVmb3JlIiwidG9kb0l0ZW1zTGlzdEl0ZW0iLCJjaGVja0JveCIsInRvZG9JdGVtTmFtZSIsInRvZG9JdGVtRHVlRGF0ZSIsInByb2plY3REZXRhaWxEaXYiLCJwcm9qZWN0RGV0YWlsSGVhZGVyIiwiZGlzYWJsZWQiLCJkZWxldGVQcm9qZWN0IiwiYWRkVG9kb0l0ZW1Db250YWluZXIiLCJhZGRUb2RvSXRlbUhlYWRlciIsInRvZG9JdGVtRm9ybSIsIm9uRm9ybVN1Ym1pdCIsIm5hbWVMYWJlbCIsIm5hbWVJbnB1dCIsImRlc2NyaXB0aW9uVGV4dEFyZWEiLCJkdWVEYXRlUGlja2VyIiwicHJvamVjdExhYmVsIiwic3VibWl0QnV0dG9uIiwiZm9ybSIsImNoZWNrVmFsaWRpdHkiLCJyZXBvcnRWYWxpZGl0eSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJyZXNldCIsImFkZFByb2plY3RDb250YWluZXIiLCJ0YWJsZSIsInRvZG9JdGVtTGlzdENvbnRhaW5lciIsInRvZG9JdGVtTGlzdEhlYWRlciIsInBhZ2VzIiwiY2hhbmdlUGFnZSIsImJvZHkiLCJtYWluQ29udGVudCJdLCJzb3VyY2VSb290IjoiIn0=